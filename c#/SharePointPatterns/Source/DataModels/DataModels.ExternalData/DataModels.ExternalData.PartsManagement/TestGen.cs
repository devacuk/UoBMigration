//===============================================================================
// Microsoft patterns & practices
// Developing Applications for SharePoint 2010
//===============================================================================
// Copyright Microsoft Corporation.  All rights reserved.
// This code released under the terms of the 
// Microsoft patterns & practices license (http://msdn.microsoft.com/en-us/library/ee663037.aspx)
//===============================================================================


//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:2.0.50727.4927
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;



public partial class TestGenDataContext : Microsoft.SharePoint.Linq.DataContext {
	
	#region Extensibility Method Definitions
	partial void OnCreated();
	#endregion
	
	public TestGenDataContext(string requestUrl) : 
			base(requestUrl) {
		this.OnCreated();
	}
	
	[Microsoft.SharePoint.Linq.ListAttribute(Name="Approved Estimates")]
	public Microsoft.SharePoint.Linq.EntityList<Document> ApprovedEstimates {
		get {
			return this.GetList<Document>("Approved Estimates");
		}
	}
	
	/// <summary>
	/// This Document library has the templates to create Web Analytics custom reports for this site collection
	/// </summary>
	[Microsoft.SharePoint.Linq.ListAttribute(Name="Customized Reports")]
	public Microsoft.SharePoint.Linq.EntityList<Document> CustomizedReports {
		get {
			return this.GetList<Document>("Customized Reports");
		}
	}
	
	[Microsoft.SharePoint.Linq.ListAttribute(Name="ModalPages")]
	public Microsoft.SharePoint.Linq.EntityList<Document> ModalPages {
		get {
			return this.GetList<Document>("ModalPages");
		}
	}
	
	[Microsoft.SharePoint.Linq.ListAttribute(Name="Projects")]
	public Microsoft.SharePoint.Linq.EntityList<Item> Projects {
		get {
			return this.GetList<Item>("Projects");
		}
	}
	
	/// <summary>
	/// Use this library to create and store pages on this site.
	/// </summary>
	[Microsoft.SharePoint.Linq.ListAttribute(Name="Site Pages")]
	public Microsoft.SharePoint.Linq.EntityList<WikiPage> SitePages {
		get {
			return this.GetList<WikiPage>("Site Pages");
		}
	}
	
	/// <summary>
	/// Use the style library to store style sheets, such as CSS or XSL files. The style sheets in this gallery can be used by this site or any of its subsites.
	/// </summary>
	[Microsoft.SharePoint.Linq.ListAttribute(Name="Style Library")]
	public Microsoft.SharePoint.Linq.EntityList<Document> StyleLibrary {
		get {
			return this.GetList<Document>("Style Library");
		}
	}
}

/// <summary>
/// Create a new list item.
/// </summary>
[Microsoft.SharePoint.Linq.ContentTypeAttribute(Name="Item", Id="0x01")]
[Microsoft.SharePoint.Linq.DerivedEntityClassAttribute(Type=typeof(Document))]
public partial class Item : Microsoft.SharePoint.Linq.ITrackEntityState, Microsoft.SharePoint.Linq.ITrackOriginalValues, System.ComponentModel.INotifyPropertyChanged, System.ComponentModel.INotifyPropertyChanging {
	
	private System.Nullable<int> _id;
	
	private System.Nullable<int> _version;
	
	private string _path;
	
	private Microsoft.SharePoint.Linq.EntityState _entityState;
	
	private System.Collections.Generic.IDictionary<string, object> _originalValues;
	
	private string _title;
	
	#region Extensibility Method Definitions
	partial void OnLoaded();
	partial void OnValidate();
	partial void OnCreated();
	#endregion

	Microsoft.SharePoint.Linq.EntityState Microsoft.SharePoint.Linq.ITrackEntityState.EntityState {
		get {
			return this._entityState;
		}
		set {
			if ((value != this._entityState)) {
				this._entityState = value;
			}
		}
	}

	System.Collections.Generic.IDictionary<string, object> Microsoft.SharePoint.Linq.ITrackOriginalValues.OriginalValues {
		get {
			if ((null == this._originalValues)) {
				this._originalValues = new System.Collections.Generic.Dictionary<string, object>();
			}
			return this._originalValues;
		}
	}
	
	public Item() {
		this.OnCreated();
	}
	
	[Microsoft.SharePoint.Linq.ColumnAttribute(Name="ID", Storage="_id", ReadOnly=true, FieldType="Counter")]
	public System.Nullable<int> Id {
		get {
			return this._id;
		}
		set {
			if ((value != this._id)) {
				this.OnPropertyChanging("Id", this._id);
				this._id = value;
				this.OnPropertyChanged("Id");
			}
		}
	}
	
	[Microsoft.SharePoint.Linq.ColumnAttribute(Name="owshiddenversion", Storage="_version", ReadOnly=true, FieldType="Integer")]
	public System.Nullable<int> Version {
		get {
			return this._version;
		}
		set {
			if ((value != this._version)) {
				this.OnPropertyChanging("Version", this._version);
				this._version = value;
				this.OnPropertyChanged("Version");
			}
		}
	}
	
	[Microsoft.SharePoint.Linq.ColumnAttribute(Name="FileDirRef", Storage="_path", ReadOnly=true, FieldType="Lookup", IsLookupValue=true)]
	public string Path {
		get {
			return this._path;
		}
		set {
			if ((value != this._path)) {
				this.OnPropertyChanging("Path", this._path);
				this._path = value;
				this.OnPropertyChanged("Path");
			}
		}
	}
	
	[Microsoft.SharePoint.Linq.ColumnAttribute(Name="Title", Storage="_title", Required=true, FieldType="Text")]
	public virtual string Title {
		get {
			return this._title;
		}
		set {
			if ((value != this._title)) {
				this.OnPropertyChanging("Title", this._title);
				this._title = value;
				this.OnPropertyChanged("Title");
			}
		}
	}
	
	public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
	
	public event System.ComponentModel.PropertyChangingEventHandler PropertyChanging;
	
	protected virtual void OnPropertyChanged(string propertyName) {
		if ((null != this.PropertyChanged)) {
			this.PropertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
		}
	}
	
	protected virtual void OnPropertyChanging(string propertyName, object value) {
		if ((null == this._originalValues)) {
			this._originalValues = new System.Collections.Generic.Dictionary<string, object>();
		}
		if ((false == this._originalValues.ContainsKey(propertyName))) {
			this._originalValues.Add(propertyName, value);
		}
		if ((null != this.PropertyChanging)) {
			this.PropertyChanging(this, new System.ComponentModel.PropertyChangingEventArgs(propertyName));
		}
	}
}

/// <summary>
/// Create a new document.
/// </summary>
[Microsoft.SharePoint.Linq.ContentTypeAttribute(Name="Document", Id="0x0101")]
[Microsoft.SharePoint.Linq.DerivedEntityClassAttribute(Type=typeof(SOW))]
[Microsoft.SharePoint.Linq.DerivedEntityClassAttribute(Type=typeof(Estimate))]
[Microsoft.SharePoint.Linq.DerivedEntityClassAttribute(Type=typeof(WikiPage))]
public partial class Document : Item {
	
	private string _name;
	
	private string _documentModifiedBy;
	
	private string _documentCreatedBy;
	
	#region Extensibility Method Definitions
	partial void OnLoaded();
	partial void OnValidate();
	partial void OnCreated();
	#endregion
	
	public Document() {
		this.OnCreated();
	}
	
	[Microsoft.SharePoint.Linq.ColumnAttribute(Name="FileLeafRef", Storage="_name", Required=true, FieldType="File")]
	public string Name {
		get {
			return this._name;
		}
		set {
			if ((value != this._name)) {
				this.OnPropertyChanging("Name", this._name);
				this._name = value;
				this.OnPropertyChanged("Name");
			}
		}
	}
	
	[Microsoft.SharePoint.Linq.ColumnAttribute(Name="Modified_x0020_By", Storage="_documentModifiedBy", ReadOnly=true, FieldType="Text")]
	public string DocumentModifiedBy {
		get {
			return this._documentModifiedBy;
		}
		set {
			if ((value != this._documentModifiedBy)) {
				this.OnPropertyChanging("DocumentModifiedBy", this._documentModifiedBy);
				this._documentModifiedBy = value;
				this.OnPropertyChanged("DocumentModifiedBy");
			}
		}
	}
	
	[Microsoft.SharePoint.Linq.ColumnAttribute(Name="Created_x0020_By", Storage="_documentCreatedBy", ReadOnly=true, FieldType="Text")]
	public string DocumentCreatedBy {
		get {
			return this._documentCreatedBy;
		}
		set {
			if ((value != this._documentCreatedBy)) {
				this.OnPropertyChanging("DocumentCreatedBy", this._documentCreatedBy);
				this._documentCreatedBy = value;
				this.OnPropertyChanged("DocumentCreatedBy");
			}
		}
	}
}

/// <summary>
/// Create a new wiki page.
/// </summary>
[Microsoft.SharePoint.Linq.ContentTypeAttribute(Name="Wiki Page", Id="0x010108")]
public partial class WikiPage : Document {
	
	private string _wikiContent;
	
	#region Extensibility Method Definitions
	partial void OnLoaded();
	partial void OnValidate();
	partial void OnCreated();
	#endregion
	
	public WikiPage() {
		this.OnCreated();
	}
	
	[Microsoft.SharePoint.Linq.ColumnAttribute(Name="WikiField", Storage="_wikiContent", FieldType="Note")]
	public string WikiContent {
		get {
			return this._wikiContent;
		}
		set {
			if ((value != this._wikiContent)) {
				this.OnPropertyChanging("WikiContent", this._wikiContent);
				this._wikiContent = value;
				this.OnPropertyChanged("WikiContent");
			}
		}
	}
	
	[System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Never)]
	[Microsoft.SharePoint.Linq.RemovedColumnAttribute()]
	public override string Title {
		get {
			throw new System.InvalidOperationException("Field Title was removed from content type Wiki Page.");
		}
		set {
			throw new System.InvalidOperationException("Field Title was removed from content type Wiki Page.");
		}
	}
}

/// <summary>
/// Create a new document.
/// </summary>
[Microsoft.SharePoint.Linq.ContentTypeAttribute(Name="SOW", Id="0x010100FF4AAD791DCC425D85F03F3F1DE61402")]
public partial class SOW : Document {
	
	private System.Nullable<double> _estimateValue;
	
	private string _vendorId;
	
	private string _vendorName;
	
	private System.Nullable<SOWStatus> _sOWStatus;
	
	private Microsoft.SharePoint.Linq.EntityRef<Item> _projectsLookup;
	
	#region Extensibility Method Definitions
	partial void OnLoaded();
	partial void OnValidate();
	partial void OnCreated();
	#endregion
	
	public SOW() {
		this._projectsLookup = new Microsoft.SharePoint.Linq.EntityRef<Item>();
		this._projectsLookup.OnSync += new System.EventHandler<Microsoft.SharePoint.Linq.AssociationChangedEventArgs<Item>>(this.OnProjectsLookupSync);
		this._projectsLookup.OnChanged += new System.EventHandler(this.OnProjectsLookupChanged);
		this._projectsLookup.OnChanging += new System.EventHandler(this.OnProjectsLookupChanging);
		this.OnCreated();
	}
	
	[Microsoft.SharePoint.Linq.ColumnAttribute(Name="EstimateValue", Storage="_estimateValue", FieldType="Currency")]
	public System.Nullable<double> EstimateValue {
		get {
			return this._estimateValue;
		}
		set {
			if ((value != this._estimateValue)) {
				this.OnPropertyChanging("EstimateValue", this._estimateValue);
				this._estimateValue = value;
				this.OnPropertyChanged("EstimateValue");
			}
		}
	}
	
	[Microsoft.SharePoint.Linq.ColumnAttribute(Name="VendorId", Storage="_vendorId", FieldType="Text")]
	public string VendorId {
		get {
			return this._vendorId;
		}
		set {
			if ((value != this._vendorId)) {
				this.OnPropertyChanging("VendorId", this._vendorId);
				this._vendorId = value;
				this.OnPropertyChanged("VendorId");
			}
		}
	}
	
	[Microsoft.SharePoint.Linq.ColumnAttribute(Name="VendorName", Storage="_vendorName", FieldType="Text")]
	public string VendorName {
		get {
			return this._vendorName;
		}
		set {
			if ((value != this._vendorName)) {
				this.OnPropertyChanging("VendorName", this._vendorName);
				this._vendorName = value;
				this.OnPropertyChanged("VendorName");
			}
		}
	}
	
	[Microsoft.SharePoint.Linq.ColumnAttribute(Name="SOWStatus", Storage="_sOWStatus", FieldType="Choice")]
	public System.Nullable<SOWStatus> SOWStatus {
		get {
			return this._sOWStatus;
		}
		set {
			if ((value != this._sOWStatus)) {
				this.OnPropertyChanging("SOWStatus", this._sOWStatus);
				this._sOWStatus = value;
				this.OnPropertyChanged("SOWStatus");
			}
		}
	}
	
	[Microsoft.SharePoint.Linq.AssociationAttribute(Name="ProjectsLookup", Storage="_projectsLookup", MultivalueType=Microsoft.SharePoint.Linq.AssociationType.Single, List="Projects")]
	public Item ProjectsLookup {
		get {
			return this._projectsLookup.GetEntity();
		}
		set {
			this._projectsLookup.SetEntity(value);
		}
	}
	
	private void OnProjectsLookupChanging(object sender, System.EventArgs e) {
		this.OnPropertyChanging("ProjectsLookup", this._projectsLookup.Clone());
	}
	
	private void OnProjectsLookupChanged(object sender, System.EventArgs e) {
		this.OnPropertyChanged("ProjectsLookup");
	}
	
	private void OnProjectsLookupSync(object sender, Microsoft.SharePoint.Linq.AssociationChangedEventArgs<Item> e) {
	}
}

/// <summary>
/// Create a new document.
/// </summary>
[Microsoft.SharePoint.Linq.ContentTypeAttribute(Name="Estimate", Id="0x010100B022E34803AB43AEA87C937368261B49")]
public partial class Estimate : Document {
	
	private System.Nullable<double> _estimateValue;
	
	private string _vendorId;
	
	private string _vendorName;
	
	private System.Nullable<SOWStatus> _sOWStatus;
	
	private Microsoft.SharePoint.Linq.EntityRef<Item> _projectsLookup;
	
	#region Extensibility Method Definitions
	partial void OnLoaded();
	partial void OnValidate();
	partial void OnCreated();
	#endregion
	
	public Estimate() {
		this._projectsLookup = new Microsoft.SharePoint.Linq.EntityRef<Item>();
		this._projectsLookup.OnSync += new System.EventHandler<Microsoft.SharePoint.Linq.AssociationChangedEventArgs<Item>>(this.OnProjectsLookupSync);
		this._projectsLookup.OnChanged += new System.EventHandler(this.OnProjectsLookupChanged);
		this._projectsLookup.OnChanging += new System.EventHandler(this.OnProjectsLookupChanging);
		this.OnCreated();
	}
	
	[Microsoft.SharePoint.Linq.ColumnAttribute(Name="EstimateValue", Storage="_estimateValue", FieldType="Currency")]
	public System.Nullable<double> EstimateValue {
		get {
			return this._estimateValue;
		}
		set {
			if ((value != this._estimateValue)) {
				this.OnPropertyChanging("EstimateValue", this._estimateValue);
				this._estimateValue = value;
				this.OnPropertyChanged("EstimateValue");
			}
		}
	}
	
	[Microsoft.SharePoint.Linq.ColumnAttribute(Name="VendorId", Storage="_vendorId", FieldType="Text")]
	public string VendorId {
		get {
			return this._vendorId;
		}
		set {
			if ((value != this._vendorId)) {
				this.OnPropertyChanging("VendorId", this._vendorId);
				this._vendorId = value;
				this.OnPropertyChanged("VendorId");
			}
		}
	}
	
	[Microsoft.SharePoint.Linq.ColumnAttribute(Name="VendorName", Storage="_vendorName", FieldType="Text")]
	public string VendorName {
		get {
			return this._vendorName;
		}
		set {
			if ((value != this._vendorName)) {
				this.OnPropertyChanging("VendorName", this._vendorName);
				this._vendorName = value;
				this.OnPropertyChanged("VendorName");
			}
		}
	}
	
	[Microsoft.SharePoint.Linq.ColumnAttribute(Name="SOWStatus", Storage="_sOWStatus", FieldType="Choice")]
	public System.Nullable<SOWStatus> SOWStatus {
		get {
			return this._sOWStatus;
		}
		set {
			if ((value != this._sOWStatus)) {
				this.OnPropertyChanging("SOWStatus", this._sOWStatus);
				this._sOWStatus = value;
				this.OnPropertyChanged("SOWStatus");
			}
		}
	}
	
	[Microsoft.SharePoint.Linq.AssociationAttribute(Name="ProjectsLookup", Storage="_projectsLookup", MultivalueType=Microsoft.SharePoint.Linq.AssociationType.Single, List="Projects")]
	public Item ProjectsLookup {
		get {
			return this._projectsLookup.GetEntity();
		}
		set {
			this._projectsLookup.SetEntity(value);
		}
	}
	
	private void OnProjectsLookupChanging(object sender, System.EventArgs e) {
		this.OnPropertyChanging("ProjectsLookup", this._projectsLookup.Clone());
	}
	
	private void OnProjectsLookupChanged(object sender, System.EventArgs e) {
		this.OnPropertyChanged("ProjectsLookup");
	}
	
	private void OnProjectsLookupSync(object sender, Microsoft.SharePoint.Linq.AssociationChangedEventArgs<Item> e) {
	}
}

public enum SOWStatus : int {
	
	None = 0,
	
	Invalid = 1,
	
	[Microsoft.SharePoint.Linq.ChoiceAttribute(Value="Draft")]
	Draft = 2,
	
	[Microsoft.SharePoint.Linq.ChoiceAttribute(Value="Submitted")]
	Submitted = 4,
	
	[Microsoft.SharePoint.Linq.ChoiceAttribute(Value="Approved")]
	Approved = 8,
}
