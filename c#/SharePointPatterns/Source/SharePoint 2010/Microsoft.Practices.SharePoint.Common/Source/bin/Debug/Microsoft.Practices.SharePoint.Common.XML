<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Microsoft.Practices.SharePoint.Common</name>
    </assembly>
    <members>
        <member name="T:Microsoft.Practices.SharePoint.Common.Configuration.SandboxPropertyBagHierarchy">
            <summary>
            Constructs the property bag hierarchy for a sandbox environment. Contains a property bag for
            the web and site levels.
            </summary>
        </member>
        <member name="T:Microsoft.Practices.SharePoint.Common.Configuration.PropertyBagHierarchy">
            <summary>
            Implements the base behavior for a property bag hierarchy.  <see cref="T:Microsoft.Practices.SharePoint.Common.Configuration.IPropertyBagHierarchy"/>
            for more inforamtion.
            </summary>
        </member>
        <member name="T:Microsoft.Practices.SharePoint.Common.Configuration.IPropertyBagHierarchy">
            <summary>
            Represents an interface for a container of property bags.  The container
            is responsible for ordering the property bags as well in hierarchical 
            sequence.  The first bag in the PropertyBags is the lowest in the hierachy.
            </summary>
        </member>
        <member name="M:Microsoft.Practices.SharePoint.Common.Configuration.IPropertyBagHierarchy.GetPropertyBagForLevel(Microsoft.Practices.SharePoint.Common.Configuration.ConfigLevel)">
            <summary>
            Retrieves the property bag for a specific level in the hierarchy.
            </summary>
            <param name="level">The level of the property bag to get</param>
            <returns>The property bag for the level, null if the property bag is not available.</returns>
        </member>
        <member name="P:Microsoft.Practices.SharePoint.Common.Configuration.IPropertyBagHierarchy.PropertyBags">
            <summary>
            Gets the enumeration for the property bags in the hierarchy, in order of lowest to 
            highest.  The number and types of property bags available will depend upon the context.
            </summary>
        </member>
        <member name="M:Microsoft.Practices.SharePoint.Common.Configuration.PropertyBagHierarchy.#ctor">
            <summary>
            Constructs the property bag hierarchy
            </summary>
        </member>
        <member name="M:Microsoft.Practices.SharePoint.Common.Configuration.PropertyBagHierarchy.GetPropertyBagForLevel(Microsoft.Practices.SharePoint.Common.Configuration.ConfigLevel)">
            <summary>
            Gets the property bag for the level specified.
            </summary>
            <param name="level">The level to get the property bag for</param>
            <returns>the property bag for the level, null if the bag is not available</returns>
        </member>
        <member name="P:Microsoft.Practices.SharePoint.Common.Configuration.PropertyBagHierarchy.Bags">
            <summary>
            The list of property bags to use for this hierarchy.
            </summary>
        </member>
        <member name="P:Microsoft.Practices.SharePoint.Common.Configuration.PropertyBagHierarchy.PropertyBags">
            <summary>
            The enumerated list of property bags to read configuration from in 
            order.
            </summary>
        </member>
        <member name="M:Microsoft.Practices.SharePoint.Common.Configuration.SandboxPropertyBagHierarchy.#ctor(Microsoft.SharePoint.SPWeb)">
            <summary>
            Constructs a sandbox hierarchy for the provided web.
            </summary>
            <param name="web">The web to use as a basis for constructing the hierarchy.</param>
        </member>
        <member name="M:Microsoft.Practices.SharePoint.Common.Configuration.SandboxPropertyBagHierarchy.BuildHierarchy(Microsoft.SharePoint.SPWeb)">
            <summary>
            Builds the hierarchy for the web provided.
            </summary>
            <param name="web">The web to use for creating the property bags</param>
        </member>
        <member name="T:Microsoft.Practices.SharePoint.Common.ServiceLocation.NoSharePointContextException">
            <summary>
            Exception that is thrown if the service locator is ran from a place where the SharePoint context
            could not be retrieved. For example, SPFarm.Local == null. 
            </summary>
        </member>
        <member name="M:Microsoft.Practices.SharePoint.Common.ServiceLocation.NoSharePointContextException.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Practices.SharePoint.Common.ServiceLocation.NoSharePointContextException"/> class.
            </summary>
        </member>
        <member name="M:Microsoft.Practices.SharePoint.Common.ServiceLocation.NoSharePointContextException.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Practices.SharePoint.Common.ServiceLocation.NoSharePointContextException"/> class.
            </summary>
            <param name="message">The message.</param>
        </member>
        <member name="M:Microsoft.Practices.SharePoint.Common.ServiceLocation.NoSharePointContextException.#ctor(System.String,System.Exception)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Practices.SharePoint.Common.ServiceLocation.NoSharePointContextException"/> class.
            </summary>
            <param name="message">The message.</param>
            <param name="inner">The inner exception.</param>
        </member>
        <member name="M:Microsoft.Practices.SharePoint.Common.ServiceLocation.NoSharePointContextException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Practices.SharePoint.Common.ServiceLocation.NoSharePointContextException"/> class.
            </summary>
            <param name="info">The <see cref="T:System.Runtime.Serialization.SerializationInfo"/> that holds the serialized object data about the exception being thrown.</param>
            <param name="context">The <see cref="T:System.Runtime.Serialization.StreamingContext"/> that contains contextual information about the source or destination.</param>
            <exception cref="T:System.ArgumentNullException">
            The <paramref name="info"/> parameter is null.
            </exception>
            <exception cref="T:System.Runtime.Serialization.SerializationException">
            The class name is null or <see cref="P:System.Exception.HResult"/> is zero (0).
            </exception>
        </member>
        <member name="T:Microsoft.Practices.SharePoint.Common.Logging.SharePointLogger">
            <summary>
            Class that does the logging for a SharePoint environment.
            
            This class will write operations messages to BOTH the EventLog and the trace log. Messages for the
            developer will only be written to the trace log. If something goes wrong while logging, an exception
            with both the original log message and the reason why logging failed is thrown. If tracing fails, it will
            attempt to write this to the EventLog, but will silently fail. 
            </summary>
        </member>
        <member name="T:Microsoft.Practices.SharePoint.Common.Logging.BaseLogger">
            <summary>
            Base class that makes it easier to implement a logger. 
            </summary>
        </member>
        <member name="T:Microsoft.Practices.SharePoint.Common.Logging.ILogger">
            <summary>
            Interface for logging implementations
            </summary>
        </member>
        <member name="M:Microsoft.Practices.SharePoint.Common.Logging.ILogger.LogToOperations(System.String)">
            <summary>
            Writes an error message into the log, works from sandbox.
            </summary>
            <param name="message">The message to write</param>
        </member>
        <member name="M:Microsoft.Practices.SharePoint.Common.Logging.ILogger.LogToOperations(System.Exception)">
            <summary>
            Writes information about an exception into the log to be read by operations, 
            works from sandbox.
            </summary>
            <param name="exception">The exception to write into the log. </param>
        </member>
        <member name="M:Microsoft.Practices.SharePoint.Common.Logging.ILogger.LogToOperations(System.String,Microsoft.SharePoint.Administration.EventSeverity)">
            <summary>
            Writes an error message into the log, do not use in sandbox.
            </summary>
            <param name="message">The message to write</param>
            <param name="severity">How serious the event is. </param>
        </member>
        <member name="M:Microsoft.Practices.SharePoint.Common.Logging.ILogger.LogToOperations(System.String,Microsoft.Practices.SharePoint.Common.Logging.SandboxEventSeverity)">
            <summary>
            Writes an error message into the log from the sandbox.
            </summary>
            <param name="message">The message to write</param>
            <param name="severity">How serious the event is. </param>
        </member>
        <member name="M:Microsoft.Practices.SharePoint.Common.Logging.ILogger.LogToOperations(System.String,System.Int32)">
            <summary>
            Writes an error message into the log with specified event Id, works from sandbox.
            </summary>
            <param name="message">The message to write into the log.</param>
            <param name="eventId">
            The eventId that corresponds to the event. This value, coupled with the EventSource is often used by
            administrators and IT PRo's to monitor the EventLog of a system. 
            </param>
        </member>
        <member name="M:Microsoft.Practices.SharePoint.Common.Logging.ILogger.LogToOperations(System.Exception,System.String)">
            <summary>
            Writes information about an exception into the log to be read by operations, , works from sandbox.
            </summary>
            <param name="exception">The exception to write into the log. </param>
            <param name="additionalMessage">Additional information about the exception message.</param>
        </member>
        <member name="M:Microsoft.Practices.SharePoint.Common.Logging.ILogger.LogToOperations(System.String,System.String)">
            <summary>
            Writes an error message into the log with specified category, works from sandbox.
            </summary>
            <param name="message">The message to write into the log.</param>
            <param name="category">The category to write the message to.</param>
        </member>
        <member name="M:Microsoft.Practices.SharePoint.Common.Logging.ILogger.LogToOperations(System.String,System.Int32,Microsoft.SharePoint.Administration.EventSeverity)">
            <summary>
            Writes an error message into the log, don't use in sandbox.
            </summary>
            <param name="message">The message to write</param>
            <param name="severity">How serious the event is. </param>
            <param name="eventId">
            The eventId that corresponds to the event. This value, coupled with the EventSource is often used by
            administrators and IT PRo's to monitor the EventLog of a system. 
            </param>
        </member>
        <member name="M:Microsoft.Practices.SharePoint.Common.Logging.ILogger.LogToOperations(System.String,System.Int32,Microsoft.Practices.SharePoint.Common.Logging.SandboxEventSeverity)">
            <summary>
            Writes an error message into the log from the sandbox.
            </summary>
            <param name="message">The message to write</param>
            <param name="severity">How serious the event is. </param>
            <param name="eventId">
            The eventId that corresponds to the event. This value, coupled with the EventSource is often used by
            administrators and IT PRo's to monitor the EventLog of a system. 
            </param>
        </member>
        <member name="M:Microsoft.Practices.SharePoint.Common.Logging.ILogger.LogToOperations(System.String,System.Int32,System.String)">
            <summary>
            Writes an error message into the log with specified event Id, works from sandbox.
            </summary>
            <param name="message">The message to write into the log.</param>
            <param name="eventId">
            The eventId that corresponds to the event. This value, coupled with the EventSource is often used by
            administrators and IT PRo's to monitor the EventLog of a system. 
            </param>
            <param name="category">The category to write the message to.</param>
        </member>
        <member name="M:Microsoft.Practices.SharePoint.Common.Logging.ILogger.LogToOperations(System.Exception,System.String,System.Int32)">
            <summary>
            Writes information about an exception into the log, works from sandbox.
            </summary>
            <param name="exception">The exception to write into the log to be read by operations. </param>
            <param name="eventId">
            The eventId that corresponds to the event. This value, coupled with the EventSource is often used by
            administrators and IT PRo's to monitor the EventLog of a system. 
            </param>
            <param name="additionalMessage">Additional information about the exception message.</param>
        </member>
        <member name="M:Microsoft.Practices.SharePoint.Common.Logging.ILogger.LogToOperations(System.String,System.Int32,Microsoft.SharePoint.Administration.EventSeverity,System.String)">
            <summary>
            Log a message with specified <paramref name="message"/>, <paramref name="eventId"/>, <paramref name="severity"/>
            and <paramref name="category"/>.  Don't use in sandbox.
            </summary>
            <param name="message">The message to write into the log.</param>
            <param name="eventId">
            The eventId that corresponds to the event. This value, coupled with the EventSource is often used by
            administrators and IT PRo's to monitor the EventLog of a system. 
            </param>
            <param name="severity">How serious the event is. </param>
            <param name="category">The category of the log message.</param>
        </member>
        <member name="M:Microsoft.Practices.SharePoint.Common.Logging.ILogger.LogToOperations(System.String,System.Int32,Microsoft.Practices.SharePoint.Common.Logging.SandboxEventSeverity,System.String)">
            <summary>
            Log a message from the sandbox with specified <paramref name="message"/>, <paramref name="eventId"/>, <paramref name="severity"/>
            and <paramref name="category"/>.
            </summary>
            <param name="message">The message to write into the log.</param>
            <param name="eventId">
            The eventId that corresponds to the event. This value, coupled with the EventSource is often used by
            administrators and IT PRo's to monitor the EventLog of a system. 
            </param>
            <param name="severity">How serious the event is. </param>
            <param name="category">The category of the log message.</param>
        </member>
        <member name="M:Microsoft.Practices.SharePoint.Common.Logging.ILogger.LogToOperations(System.Exception,System.Int32,Microsoft.SharePoint.Administration.EventSeverity,System.String)">
            <summary>
            Writes information about an exception into the log to be read by operations. Don't use from sandbox.
            </summary>
            <param name="exception">The exception to write into the log. </param>
            <param name="eventId">
            The eventId that corresponds to the event. This value, coupled with the EventSource is often used by
            administrators and IT PRo's to monitor the EventLog of a system. 
            </param>
            <param name="category">The category to write the message to.</param>
            <param name="severity">The severity of the exception.</param>
        </member>
        <member name="M:Microsoft.Practices.SharePoint.Common.Logging.ILogger.LogToOperations(System.Exception,System.Int32,Microsoft.Practices.SharePoint.Common.Logging.SandboxEventSeverity,System.String)">
            <summary>
            Writes information about an exception into the log to be read by operations from the sandbox. 
            </summary>
            <param name="exception">The exception to write into the log. </param>
            <param name="eventId">
            The eventId that corresponds to the event. This value, coupled with the EventSource is often used by
            administrators and IT PRo's to monitor the EventLog of a system. 
            </param>
            <param name="category">The category to write the message to.</param>
            <param name="severity">The severity of the exception.</param>
        </member>
        <member name="M:Microsoft.Practices.SharePoint.Common.Logging.ILogger.LogToOperations(System.Exception,System.String,System.Int32,Microsoft.SharePoint.Administration.EventSeverity,System.String)">
            <summary>
            Writes information about an exception into the log, don't use from sandbox.
            </summary>
            <param name="exception">The exception to write into the log to be read by operations. </param>
            <param name="eventId">
            The eventId that corresponds to the event. This value, coupled with the EventSource is often used by
            administrators and IT PRo's to monitor the EventLog of a system. 
            </param>
            <param name="category">The category to write the message to.</param>
            <param name="severity">The severity of the exception.</param>
            <param name="additionalMessage">Additional information about the exception message.</param>
        </member>
        <member name="M:Microsoft.Practices.SharePoint.Common.Logging.ILogger.LogToOperations(System.Exception,System.String,System.Int32,Microsoft.Practices.SharePoint.Common.Logging.SandboxEventSeverity,System.String)">
            <summary>
            Writes information about an exception into the log from the sandbox. 
            </summary>
            <param name="exception">The exception to write into the log to be read by operations. </param>
            <param name="eventId">
            The eventId that corresponds to the event. This value, coupled with the EventSource is often used by
            administrators and IT PRo's to monitor the EventLog of a system. 
            </param>
            <param name="category">The category to write the message to.</param>
            <param name="severity">The severity of the exception.</param>
            <param name="additionalMessage">Additional information about the exception message.</param>
        </member>
        <member name="M:Microsoft.Practices.SharePoint.Common.Logging.ILogger.TraceToDeveloper(System.String)">
            <summary>
            Write a diagnostic message into the log, with the default category, default id,
            and default severity, works from sandbox.
            </summary>
            <param name="message">The message to write into the log.</param>
        </member>
        <member name="M:Microsoft.Practices.SharePoint.Common.Logging.ILogger.TraceToDeveloper(System.Exception)">
            <summary>
            Writes information about an exception into the log. with the default category, default id,
            and default severity, works from sandbox.
            </summary>
            <param name="exception">The exception to write into the log. </param>
        </member>
        <member name="M:Microsoft.Practices.SharePoint.Common.Logging.ILogger.TraceToDeveloper(System.Exception,System.String)">
            <summary>
            Writes information about an exception into the log, works from sandbox.
            </summary>
            <param name="exception">The exception to write into the log. </param>
            <param name="additionalMessage">Additional information about the exception message.</param>
        </member>
        <member name="M:Microsoft.Practices.SharePoint.Common.Logging.ILogger.TraceToDeveloper(System.String,Microsoft.SharePoint.Administration.TraceSeverity)">
            <summary>
            Write a diagnostic message into the log for the default category with severity, don't use
            from sandbox.
            </summary>
            <param name="message">The message to write into the log.</param>
            <param name="severity">The severity of the exception.</param>
        </member>
        <member name="M:Microsoft.Practices.SharePoint.Common.Logging.ILogger.TraceToDeveloper(System.String,Microsoft.Practices.SharePoint.Common.Logging.SandboxTraceSeverity)">
            <summary>
            Write a diagnostic message into the log for the default category with default severity
            from the sandbox, works from sandbox.
            </summary>
            <param name="message"></param>
            <param name="severity"></param>
        </member>
        <member name="M:Microsoft.Practices.SharePoint.Common.Logging.ILogger.TraceToDeveloper(System.String,System.Int32)">
            <summary>
            Writes a diagnostic message into the trace log, with severity <see cref="F:Microsoft.SharePoint.Administration.TraceSeverity.Medium"/>, 
            works from sandbox.
            </summary>
            <param name="message">The message to write into the log.</param>
            <param name="eventId">
            The eventId that corresponds to the event. This value, coupled with the EventSource is often used by
            administrators and IT PRo's to monitor the EventLog of a system. 
            </param>
        </member>
        <member name="M:Microsoft.Practices.SharePoint.Common.Logging.ILogger.TraceToDeveloper(System.String,System.String)">
            <summary>
            Writes a diagnostic message into the trace log, with severity <see cref="F:Microsoft.SharePoint.Administration.TraceSeverity.Medium"/>,
            works from sandbox.
            </summary>
            <param name="message">The message to write into the log.</param>
            <param name="category">The category to write the message to.</param>
        </member>
        <member name="M:Microsoft.Practices.SharePoint.Common.Logging.ILogger.TraceToDeveloper(System.String,System.Int32,System.String)">
            <summary>
            Writes a diagnostic message into the log, works from sandbox. 
            </summary>
            <param name="message">The message to write into the log.</param>
            <param name="eventId">
            The eventId that corresponds to the event.
            </param>
            <param name="category">The category to write the message to.</param>
        </member>
        <member name="M:Microsoft.Practices.SharePoint.Common.Logging.ILogger.TraceToDeveloper(System.Exception,System.String,System.Int32)">
            <summary>
            Writes information about an exception into the log, works from sandbox.
            </summary>
            <param name="exception">The exception to write into the log to be read by operations. </param>
            <param name="eventId">
            The eventId that corresponds to the event. 
            </param>
            <param name="additionalMessage">Additional information about the exception message.</param>
        </member>
        <member name="M:Microsoft.Practices.SharePoint.Common.Logging.ILogger.TraceToDeveloper(System.String,System.Int32,Microsoft.SharePoint.Administration.TraceSeverity,System.String)">
            <summary>
            Writes a diagnostic message into the trace log, with specified <see cref="T:Microsoft.SharePoint.Administration.TraceSeverity"/>. Don't
            use in sandbox.
            </summary>
            <param name="message">The message to write into the log.</param>
            <param name="eventId">
            The eventId that corresponds to the event.
            </param>
            <param name="severity">The severity of the trace.</param>
            <param name="category">The category to write the message to.</param>
        </member>
        <member name="M:Microsoft.Practices.SharePoint.Common.Logging.ILogger.TraceToDeveloper(System.String,System.Int32,Microsoft.Practices.SharePoint.Common.Logging.SandboxTraceSeverity,System.String)">
            <summary>
            Writes a diagnostic message into the trace log, with specified <see cref="T:Microsoft.Practices.SharePoint.Common.Logging.SandboxTraceSeverity"/>. 
            </summary>
            <param name="message">The message to write into the log.</param>
            <param name="eventId">
            The eventId that corresponds to the event.
            </param>
            <param name="severity">The severity of the trace.</param>
            <param name="category">The category to write the message to.</param>
        </member>
        <member name="M:Microsoft.Practices.SharePoint.Common.Logging.ILogger.TraceToDeveloper(System.Exception,System.Int32,Microsoft.SharePoint.Administration.TraceSeverity,System.String)">
            <summary>
            Writes information about an exception into the log, don't use from sandbox.
            </summary>
            <param name="exception">The exception to write into the log. </param>
            <param name="eventId">
            The eventId that corresponds to the event. 
            </param>
            <param name="category">The category to write the message to.</param>
            <param name="severity">The severity of the exception.</param>
        </member>
        <member name="M:Microsoft.Practices.SharePoint.Common.Logging.ILogger.TraceToDeveloper(System.Exception,System.Int32,Microsoft.Practices.SharePoint.Common.Logging.SandboxTraceSeverity,System.String)">
            <summary>
            Writes information about an exception into the log from the sandbox.  This will work
            from outside the sandbox as well.
            </summary>
            <param name="exception">The exception to write into the log. </param>
            <param name="eventId">
            The eventId that corresponds to the event. 
            </param>
            <param name="category">The category to write the message to.</param>
            <param name="severity">The severity of the exception.</param>
        </member>
        <member name="M:Microsoft.Practices.SharePoint.Common.Logging.ILogger.TraceToDeveloper(System.Exception,System.String,System.Int32,Microsoft.SharePoint.Administration.TraceSeverity,System.String)">
            <summary>
            Writes information about an exception into the log. Don't use from sandbox.
            </summary>
            <param name="exception">The exception to write into the log. </param>
            <param name="eventId">
            The eventId that corresponds to the event. 
            </param>
            <param name="category">The category to write the message to.</param>
            <param name="severity">The severity of the exception.</param>
            <param name="additionalMessage">Additional information about the exception message.</param>
        </member>
        <member name="M:Microsoft.Practices.SharePoint.Common.Logging.ILogger.TraceToDeveloper(System.Exception,System.String,System.Int32,Microsoft.Practices.SharePoint.Common.Logging.SandboxTraceSeverity,System.String)">
            <summary>
            Writes information about an exception into the log from the sandbox.
            Will work from outside the sandbox as well.
            </summary>
            <param name="exception">The exception to write into the log. </param>
            <param name="eventId">
            The eventId that corresponds to the event. 
            </param>
            <param name="category">The category to write the message to.</param>
            <param name="severity">The severity of the exception.</param>
            <param name="additionalMessage">Additional information about the exception message.</param>
        </member>
        <member name="M:Microsoft.Practices.SharePoint.Common.Logging.BaseLogger.TraceToDeveloper(System.String)">
            <summary>
            Writes a diagnostic message into the trace log, with default severity for the category.
            </summary>
            <param name="message">The message to write into the log.</param>
        </member>
        <member name="M:Microsoft.Practices.SharePoint.Common.Logging.BaseLogger.TraceToDeveloper(System.Exception)">
            <summary>
            Writes information about an exception into the log.
            </summary>
            <param name="exception">The exception to write into the log.</param>
        </member>
        <member name="M:Microsoft.Practices.SharePoint.Common.Logging.BaseLogger.TraceToDeveloper(System.Exception,System.String)">
            <summary>
            Writes information about an exception into the log.
            </summary>
            <param name="exception">The exception to write into the log.</param>
            <param name="additionalMessage">Additional information about the exception message.</param>
        </member>
        <member name="M:Microsoft.Practices.SharePoint.Common.Logging.BaseLogger.TraceToDeveloper(System.String,Microsoft.SharePoint.Administration.TraceSeverity)">
            <summary>
            Write a diagnostic message into the trace log, with default severity for the category.
            </summary>
            <param name="message">The message to write into the log.</param>
            <param name="severity">The severity of the exception.</param>
        </member>
        <member name="M:Microsoft.Practices.SharePoint.Common.Logging.BaseLogger.TraceToDeveloper(System.String,Microsoft.Practices.SharePoint.Common.Logging.SandboxTraceSeverity)">
            <summary>
            Write a diagnostic message into the trace log, with default severity for the category.
            </summary>
            <param name="message">The message to write into the log.</param>
            <param name="severity">The severity of the exception.</param>
        </member>
        <member name="M:Microsoft.Practices.SharePoint.Common.Logging.BaseLogger.TraceToDeveloper(System.String,System.Int32)">
            <summary>
            Writes a diagnostic message into the trace log, with  default severity for the category.
            </summary>
            <param name="message">The message to write into the log.</param>
            <param name="eventId">The eventId that corresponds to the event. This value, coupled with the EventSource is often used by
            administrators and IT PRo's to monitor the EventLog of a system.</param>
        </member>
        <member name="M:Microsoft.Practices.SharePoint.Common.Logging.BaseLogger.TraceToDeveloper(System.String,System.String)">
            <summary>
            Writes a diagnostic message into the trace log, with default severity for the category.
            </summary>
            <param name="message">The message to write into the log.</param>
            <param name="category">The category to write the message to.</param>
        </member>
        <member name="M:Microsoft.Practices.SharePoint.Common.Logging.BaseLogger.TraceToDeveloper(System.String,System.Int32,System.String)">
            <summary>
            Writes a diagnostic message into the trace log, with the default severity for the category.
            </summary>
            <param name="message">The message to write into the log.</param>
            <param name="eventId">The eventId that corresponds to the event.</param>
            <param name="category">The category to write the message to.</param>
        </member>
        <member name="M:Microsoft.Practices.SharePoint.Common.Logging.BaseLogger.TraceToDeveloper(System.Exception,System.String,System.Int32)">
            <summary>
            Writes a diagnostic trace for the exception to the trace log with the default severity.
            </summary>
            <param name="exception">The exception to log</param>
            <param name="additionalMessage">Additional information to log</param>
            <param name="eventId">The event id to log</param>
        </member>
        <member name="M:Microsoft.Practices.SharePoint.Common.Logging.BaseLogger.TraceToDeveloper(System.String,System.Int32,Microsoft.SharePoint.Administration.TraceSeverity,System.String)">
            <summary>
            Writes a diagnostic message into the trace log, with  specified <see cref="T:Microsoft.SharePoint.Administration.TraceSeverity"/>.
            </summary>
            <param name="message">The message to write into the log.</param>
            <param name="eventId">The eventId that corresponds to the event.</param>
            <param name="severity">The severity of the exception.</param>
            <param name="category">The category to write the message to.</param>
        </member>
        <member name="M:Microsoft.Practices.SharePoint.Common.Logging.BaseLogger.TraceToDeveloper(System.String,System.Int32,Microsoft.Practices.SharePoint.Common.Logging.SandboxTraceSeverity,System.String)">
            <summary>
            Writes a diagnostic message into the trace log, with specified <see cref="T:Microsoft.SharePoint.Administration.TraceSeverity"/>.
            </summary>
            <param name="message">The message to write into the log.</param>
            <param name="eventId">The eventId that corresponds to the event.</param>
            <param name="severity">The severity of the exception.</param>
            <param name="category">The category to write the message to.</param>
        </member>
        <member name="M:Microsoft.Practices.SharePoint.Common.Logging.BaseLogger.TraceToDeveloper(System.Exception,System.Int32,Microsoft.SharePoint.Administration.TraceSeverity,System.String)">
            <summary>
            Writes information about an exception into the log.
            </summary>
            <param name="exception">The exception to write into the log.</param>
            <param name="eventId">The eventId that corresponds to the event.</param>
            <param name="severity">The severity of the exception.</param>
            <param name="category">The category to write the message to.</param>
        </member>
        <member name="M:Microsoft.Practices.SharePoint.Common.Logging.BaseLogger.TraceToDeveloper(System.Exception,System.Int32,Microsoft.Practices.SharePoint.Common.Logging.SandboxTraceSeverity,System.String)">
            <summary>
            Writes information about an exception into the log from the sandbox.
            </summary>
            <param name="exception">The exception to write into the log.</param>
            <param name="eventId">The eventId that corresponds to the event.</param>
            <param name="severity">The severity of the exception.</param>
            <param name="category">The category to write the message to.</param>
        </member>
        <member name="M:Microsoft.Practices.SharePoint.Common.Logging.BaseLogger.TraceToDeveloper(System.Exception,System.String,System.Int32,Microsoft.SharePoint.Administration.TraceSeverity,System.String)">
            <summary>
            Writes information about an exception into the log.
            </summary>
            <param name="exception">The exception to write into the log.</param>
            <param name="additionalMessage">Additional information about the exception message.</param>
            <param name="eventId">The eventId that corresponds to the event.</param>
            <param name="severity">The severity of the exception.</param>
            <param name="category">The category to write the message to.</param>
        </member>
        <member name="M:Microsoft.Practices.SharePoint.Common.Logging.BaseLogger.TraceToDeveloper(System.Exception,System.String,System.Int32,Microsoft.Practices.SharePoint.Common.Logging.SandboxTraceSeverity,System.String)">
            <summary>
            Writes information about an exception into the log from the sandbox.
            </summary>
            <param name="exception">The exception to write into the log.</param>
            <param name="additionalMessage">Additional information about the exception message.</param>
            <param name="eventId">The eventId that corresponds to the event.</param>
            <param name="severity">The severity of the exception.</param>
            <param name="category">The category to write the message to.</param>
        </member>
        <member name="M:Microsoft.Practices.SharePoint.Common.Logging.BaseLogger.LogToOperations(System.String)">
            <summary>
            Writes an error message into the log
            </summary>
            <param name="message">The message to write</param>
        </member>
        <member name="M:Microsoft.Practices.SharePoint.Common.Logging.BaseLogger.LogToOperations(System.Exception)">
            <summary>
            Writes information about an exception into the log to be read by operations.
            </summary>
            <param name="exception">The exception to write into the log.</param>
        </member>
        <member name="M:Microsoft.Practices.SharePoint.Common.Logging.BaseLogger.LogToOperations(System.String,Microsoft.SharePoint.Administration.EventSeverity)">
            <summary>
            Writes an error message into the log
            </summary>
            <param name="message">The message to write</param>
            <param name="severity">How serious the event is.</param>
        </member>
        <member name="M:Microsoft.Practices.SharePoint.Common.Logging.BaseLogger.LogToOperations(System.String,Microsoft.Practices.SharePoint.Common.Logging.SandboxEventSeverity)">
            <summary>
            Writes an error message into the log from the sandbox.  WIll
            work from outside the sandbox as well.
            </summary>
            <param name="message">The message to write</param>
            <param name="severity">How serious the event is.</param>
        </member>
        <member name="M:Microsoft.Practices.SharePoint.Common.Logging.BaseLogger.LogToOperations(System.String,System.Int32)">
            <summary>
            Writes an error message into the log with specified event Id.
            </summary>
            <param name="message">The message to write into the log.</param>
            <param name="eventId">The eventId that corresponds to the event. This value, coupled with the EventSource is often used by
            administrators and IT PRo's to monitor the EventLog of a system.</param>
        </member>
        <member name="M:Microsoft.Practices.SharePoint.Common.Logging.BaseLogger.LogToOperations(System.String,System.String)">
            <summary>
            Writes an error message into the log with specified category.
            </summary>
            <param name="message">The message to write into the log.</param>
            <param name="category">The category to write the message to.</param>
        </member>
        <member name="M:Microsoft.Practices.SharePoint.Common.Logging.BaseLogger.LogToOperations(System.Exception,System.String)">
            <summary>
            Writes information about an exception into the log to be read by operations.
            </summary>
            <param name="exception">The exception to write into the log.</param>
            <param name="additionalMessage">Additional information about the exception message.</param>
        </member>
        <member name="M:Microsoft.Practices.SharePoint.Common.Logging.BaseLogger.LogToOperations(System.String,System.Int32,Microsoft.SharePoint.Administration.EventSeverity)">
            <summary>
            Writes an error message into the log
            </summary>
            <param name="message">The message to write</param>
            <param name="eventId">The eventId that corresponds to the event. This value, coupled with the EventSource is often used by
            administrators and IT PRo's to monitor the EventLog of a system.</param>
            <param name="severity">How serious the event is.</param>
        </member>
        <member name="M:Microsoft.Practices.SharePoint.Common.Logging.BaseLogger.LogToOperations(System.String,System.Int32,Microsoft.Practices.SharePoint.Common.Logging.SandboxEventSeverity)">
            <summary>
            Writes an error message into the log in the sandbox
            </summary>
            <param name="message">The message to write</param>
            <param name="eventId">The eventId that corresponds to the event. This value, coupled with the EventSource is often used by
            administrators and IT PRo's to monitor the EventLog of a system.</param>
            <param name="severity">How serious the event is.</param>
        </member>
        <member name="M:Microsoft.Practices.SharePoint.Common.Logging.BaseLogger.LogToOperations(System.String,System.Int32,System.String)">
            <summary>
            Writes a error message into the log with specified event Id.
            </summary>
            <param name="message">The message to write into the log.</param>
            <param name="eventId">
            The event Id that corresponds to the event. This value, coupled with the EventSource is often used by
            administrators and IT PRo's to monitor the EventLog of a system. 
            </param>
            <param name="category">The category to write the message to.</param>
        </member>
        <member name="M:Microsoft.Practices.SharePoint.Common.Logging.BaseLogger.LogToOperations(System.String,System.Int32,Microsoft.SharePoint.Administration.EventSeverity,System.String)">
            <summary>
            Writes the logged message to the operations log 
            </summary>
            <param name="message">The message to write into the log.</param>
            <param name="eventId">
            The eventId that corresponds to the event. This value, coupled with the EventSource is often used by
            administrators and IT PRo's to monitor the EventLog of a system. 
            </param>
            <param name="severity">How serious the event is. </param>
            <param name="category">The category of the log message.</param>
        </member>
        <member name="M:Microsoft.Practices.SharePoint.Common.Logging.BaseLogger.LogToOperations(System.String,System.Int32,Microsoft.Practices.SharePoint.Common.Logging.SandboxEventSeverity,System.String)">
            <summary>
            Writes the logged message to the operations log from the sandbox.
            </summary>
            <param name="message">The message to write into the log.</param>
            <param name="eventId">
            The eventId that corresponds to the event. This value, coupled with the EventSource is often used by
            administrators and IT PRo's to monitor the EventLog of a system. 
            </param>
            <param name="severity">How serious the event is. </param>
            <param name="category">The category of the log message.</param>
        </member>
        <member name="M:Microsoft.Practices.SharePoint.Common.Logging.BaseLogger.LogToOperations(System.Exception,System.String,System.Int32)">
            <summary>
            Writes information about an exception into the log.
            </summary>
            <param name="exception">The exception to write into the log to be read by operations.</param>
            <param name="additionalMessage">Additional information about the exception message.</param>
            <param name="eventId">The eventId that corresponds to the event. This value, coupled with the EventSource is often used by
            administrators and IT PRo's to monitor the EventLog of a system.</param>
        </member>
        <member name="M:Microsoft.Practices.SharePoint.Common.Logging.BaseLogger.LogToOperations(System.Exception,System.Int32,Microsoft.SharePoint.Administration.EventSeverity,System.String)">
            <summary>
            Writes information about an exception into the log.
            </summary>
            <param name="exception">The exception to write into the log.</param>
            <param name="eventId">The eventId that corresponds to the event. This value, coupled with the EventSource is often used by
            administrators and IT PRo's to monitor the EventLog of a system.</param>
            <param name="severity">The severity of the exception.</param>
            <param name="category">The category to write the message to.</param>
        </member>
        <member name="M:Microsoft.Practices.SharePoint.Common.Logging.BaseLogger.LogToOperations(System.Exception,System.Int32,Microsoft.Practices.SharePoint.Common.Logging.SandboxEventSeverity,System.String)">
            <summary>
            Writes information about an exception into the log to the sandbox.
            </summary>
            <param name="exception">The exception to write into the log.</param>
            <param name="eventId">The eventId that corresponds to the event. This value, coupled with the EventSource is often used by
            administrators and IT PRo's to monitor the EventLog of a system.</param>
            <param name="severity">The severity of the exception.</param>
            <param name="category">The category to write the message to.</param>
        </member>
        <member name="M:Microsoft.Practices.SharePoint.Common.Logging.BaseLogger.LogToOperations(System.Exception,System.String,System.Int32,Microsoft.SharePoint.Administration.EventSeverity,System.String)">
            <summary>
            Writes information about an exception into the log.
            </summary>
            <param name="exception">The exception to write into the log to be read by operations.</param>
            <param name="additionalMessage">Additional information about the exception message.</param>
            <param name="eventId">The eventId that corresponds to the event. This value, coupled with the EventSource is often used by
            administrators and IT PRo's to monitor the EventLog of a system.</param>
            <param name="severity">The severity of the exception.</param>
            <param name="category">The category to write the message to.</param>
        </member>
        <member name="M:Microsoft.Practices.SharePoint.Common.Logging.BaseLogger.LogToOperations(System.Exception,System.String,System.Int32,Microsoft.Practices.SharePoint.Common.Logging.SandboxEventSeverity,System.String)">
            <summary>
            Writes information about an exception into the log from the sandbox.
            </summary>
            <param name="exception">The exception to write into the log to be read by operations.</param>
            <param name="additionalMessage">Additional information about the exception message.</param>
            <param name="eventId">The eventId that corresponds to the event. This value, coupled with the EventSource is often used by
            administrators and IT PRo's to monitor the EventLog of a system.</param>
            <param name="severity">The severity of the exception.</param>
            <param name="category">The category to write the message to.</param>
        </member>
        <member name="M:Microsoft.Practices.SharePoint.Common.Logging.BaseLogger.WriteLogMessageDefaultSeverity(System.String,System.Int32,System.String)">
            <summary>
            Method that derived classes must implement to do the logging. 
            </summary>
            <param name="message">The message to write into the log.</param>
            <param name="eventId">
            The eventId that corresponds to the event. This value, coupled with the EventSource is often used by
            administrators and IT PRo's to monitor the EventLog of a system. 
            </param>
            <param name="category">The category of the log message.</param>
        </member>
        <member name="M:Microsoft.Practices.SharePoint.Common.Logging.BaseLogger.TraceToDeveloperDefaultSeverity(System.String,System.Int32,System.String)">
            <summary>
            Writes information about an exception into the log.
            </summary>
            <param name="message">The message to write into the log to be read by operations.</param>
            <param name="eventId">The eventId that corresponds to the event.</param>
            <param name="category">The category for the trace.</param>
        </member>
        <member name="M:Microsoft.Practices.SharePoint.Common.Logging.BaseLogger.WriteTraceMessage(System.String,System.Int32,Microsoft.SharePoint.Administration.TraceSeverity,System.String)">
            <summary>
            Safe method to trace to the sandbox.
            </summary>
            <param name="message">The message to trace</param>
            <param name="eventId">the event id to trace</param>
            <param name="severity">the sandbox severity to use</param>
            <param name="category">The category to trace under</param>
        </member>
        <member name="M:Microsoft.Practices.SharePoint.Common.Logging.BaseLogger.WriteTraceMessage(System.String,System.Int32,Microsoft.Practices.SharePoint.Common.Logging.SandboxTraceSeverity,System.String)">
            <summary>
            Safe method to trace to the sandbox.
            </summary>
            <param name="message">The message to trace</param>
            <param name="eventId">the event id to trace</param>
            <param name="severity">the sandbox severity to use</param>
            <param name="category">The category to trace under</param>
        </member>
        <member name="M:Microsoft.Practices.SharePoint.Common.Logging.BaseLogger.WriteLogMessage(System.String,System.Int32,Microsoft.SharePoint.Administration.EventSeverity,System.String)">
            <summary>
            Safe method to trace to the sandbox.
            </summary>
            <param name="message">The message to trace</param>
            <param name="eventId">the event id to trace</param>
            <param name="severity">the sandbox severity to use</param>
            <param name="category">The category to trace under</param>
        </member>
        <member name="M:Microsoft.Practices.SharePoint.Common.Logging.BaseLogger.WriteLogMessage(System.String,System.Int32,Microsoft.Practices.SharePoint.Common.Logging.SandboxEventSeverity,System.String)">
            <summary>
            Safe method to trace to the sandbox.
            </summary>
            <param name="message">The message to trace</param>
            <param name="eventId">the event id to trace</param>
            <param name="severity">the sandbox severity to use</param>
            <param name="category">The category to trace under</param>
        </member>
        <member name="M:Microsoft.Practices.SharePoint.Common.Logging.BaseLogger.BuildTraceMessage(System.String,System.Int32,Microsoft.SharePoint.Administration.TraceSeverity,System.String)">
            <summary>
            Override this method to change the way the trace message is created. 
            </summary>
            <param name="message">The message to write into the log.</param>
            <param name="eventId">
            The eventId that corresponds to the event. This value, coupled with the EventSource is often used by
            administrators and IT PRo's to monitor the EventLog of a system. 
            </param>
            <param name="severity">How serious the event is. </param>
            <param name="category">The category of the log message.</param>
            <returns>The message.</returns>
        </member>
        <member name="M:Microsoft.Practices.SharePoint.Common.Logging.BaseLogger.BuildTraceMessage(System.String,System.Int32,System.String)">
            <summary>
            Override this method to change the way the trace message is created. 
            </summary>
            <param name="message">The message to write into the log.</param>
            <param name="eventId">
            The eventId that corresponds to the event. This value, coupled with the EventSource is often used by
            administrators and IT PRo's to monitor the EventLog of a system. 
            </param>
            <param name="category">The category of the log message.</param>
            <returns>The message.</returns>
        </member>
        <member name="M:Microsoft.Practices.SharePoint.Common.Logging.BaseLogger.BuildSandboxTraceMessage(System.String,System.Int32,Microsoft.Practices.SharePoint.Common.Logging.SandboxTraceSeverity,System.String)">
            <summary>
            Override this method to change the way the trace message is created. 
            </summary>
            <param name="message">The message to write into the log.</param>
            <param name="eventId">
            The eventId that corresponds to the event. This value, coupled with the EventSource is often used by
            administrators and IT PRo's to monitor the EventLog of a system. 
            </param>
            <param name="severity">How serious the event is. </param>
            <param name="category">The category of the log message.</param>
            <returns>The message.</returns>
        </member>
        <member name="M:Microsoft.Practices.SharePoint.Common.Logging.BaseLogger.BuildEventLogMessage(System.String,System.Int32,Microsoft.SharePoint.Administration.EventSeverity,System.String)">
            <summary>
            Override this method to change the way the log message is created. 
            </summary>
            <param name="message">The message to write into the log.</param>
            <param name="eventId">
            The event Id that corresponds to the event. This value, coupled with the EventSource is often used by
            administrators and IT PRo's to monitor the EventLog of a system. 
            </param>
            <param name="severity">How serious the event is. </param>
            <param name="category">The category of the log message.</param>
            <returns>The message.</returns>
        </member>
        <member name="M:Microsoft.Practices.SharePoint.Common.Logging.BaseLogger.BuildEventLogMessage(System.String,System.Int32,Microsoft.Practices.SharePoint.Common.Logging.SandboxEventSeverity,System.String)">
            <summary>
            Override this method to change the way the log message is created for the sandbox 
            </summary>
            <param name="message">The message to write into the log.</param>
            <param name="eventId">
            The event Id that corresponds to the event. This value, coupled with the EventSource is often used by
            administrators and IT PRo's to monitor the EventLog of a system. 
            </param>
            <param name="severity">How serious the event is. </param>
            <param name="category">The category of the log message.</param>
            <returns>The message.</returns>
        </member>
        <member name="M:Microsoft.Practices.SharePoint.Common.Logging.BaseLogger.BuildEventLogMessage(System.String,System.Int32,System.String)">
            <summary>
            Builds an event log message without a severity specified.
            </summary>
            <param name="message">The message to write into the log.</param>
            <param name="eventId">
            The event Id that corresponds to the event. This value, coupled with the EventSource is often used by
            administrators and IT PRo's to monitor the EventLog of a system. 
            </param>
            <param name="category">The category of the log message.</param>
            <returns>The message.</returns>
        </member>
        <member name="M:Microsoft.Practices.SharePoint.Common.Logging.BaseLogger.WriteToOperationsLog(System.String,System.Int32,Microsoft.SharePoint.Administration.EventSeverity,System.String)">
            <summary>
            Override this method to implement how to write to a log message.
            </summary>
            <param name="message">The message to write into the log.</param>
            <param name="eventId">
            The eventId that corresponds to the event. This value, coupled with the EventSource is often used by
            administrators and IT PRo's to monitor the EventLog of a system. 
            </param>
            <param name="severity">How serious the event is. </param>
            <param name="category">The category of the log message.</param>
        </member>
        <member name="M:Microsoft.Practices.SharePoint.Common.Logging.BaseLogger.WriteToOperationsLog(System.String,System.Int32,System.String)">
            <summary>
            Override this method to implement how to write to a log message.  This writes using the default severity
            for the underlying logging system.
            </summary>
            <param name="message">The message to write into the log.</param>
            <param name="eventId">
            The eventId that corresponds to the event. This value, coupled with the EventSource is often used by
            administrators and IT PRo's to monitor the EventLog of a system. 
            </param>
            <param name="category">The category of the log message.</param>
        </member>
        <member name="M:Microsoft.Practices.SharePoint.Common.Logging.BaseLogger.WriteToOperationsLog(System.String,System.Int32,Microsoft.Practices.SharePoint.Common.Logging.SandboxEventSeverity,System.String)">
            <summary>
            Override this method to implement how to write to a log message for the sandbox
            </summary>
            <param name="message">The message to write into the log.</param>
            <param name="eventId">
            The eventId that corresponds to the event. This value, coupled with the EventSource is often used by
            administrators and IT PRo's to monitor the EventLog of a system. 
            </param>
            <param name="severity">How serious the event is. </param>
            <param name="category">The category of the log message.</param>
        </member>
        <member name="M:Microsoft.Practices.SharePoint.Common.Logging.BaseLogger.WriteToDeveloperTrace(System.String,System.Int32,Microsoft.SharePoint.Administration.TraceSeverity,System.String)">
            <summary>
            Override this method to implement how to write to a trace message.
            </summary>
            <param name="message">The message to write into the log.</param>
            <param name="eventId">
            The eventId that corresponds to the event. This value, coupled with the EventSource is often used by
            administrators and IT PRo's to monitor the EventLog of a system. 
            </param>
            <param name="severity">How serious the event is. </param>
            <param name="category">The category of the log message.</param>
        </member>
        <member name="M:Microsoft.Practices.SharePoint.Common.Logging.BaseLogger.WriteToDeveloperTrace(System.String,System.Int32,System.String)">
            <summary>
            Override this method to implement how to write to a trace message. This writes using the default severity
            for the underlying trace system.
            </summary>
            <param name="message">The message to write into the log.</param>
            <param name="eventId">
            The eventId that corresponds to the event. This value, coupled with the EventSource is often used by
            administrators and IT PRo's to monitor the EventLog of a system. 
            </param>
            <param name="category">The category of the log message.</param>
        </member>
        <member name="M:Microsoft.Practices.SharePoint.Common.Logging.BaseLogger.WriteToDeveloperTrace(System.String,System.Int32,Microsoft.Practices.SharePoint.Common.Logging.SandboxTraceSeverity,System.String)">
            <summary>
            Writes a sandbox safe developer trace message.
            </summary>
            <param name="message">The message to trace</param>
            <param name="eventId">The event id of the message to trace</param>
            <param name="severity">The severity of the message to trace</param>
            <param name="category">The category of the message being traced</param>
        </member>
        <member name="M:Microsoft.Practices.SharePoint.Common.Logging.BaseLogger.BuildExceptionMessage(System.Exception,System.String)">
            <summary>
            Build an exception message for an exception that contains more information than the
            normal Exception.ToString().
            </summary>
            <param name="exception">The exception to format.</param>
            <param name="customErrorMessage">Any custom error information to include.</param>
            <returns>The error message.</returns>
        </member>
        <member name="M:Microsoft.Practices.SharePoint.Common.Logging.BaseLogger.WriteExceptionDetails(System.Text.StringBuilder,System.Exception,System.Int32)">
            <summary>
            Write the details of an exception to the string builder. This method is called recursively to 
            format all the inner exceptions. 
            </summary>
            <param name="messageBuilder">The stringbuilder that will hold the full exception message.</param>
            <param name="exception">The exception (and all it's inner exceptions) to add.</param>
            <param name="level">How far should the exceptions be indented.</param>
        </member>
        <member name="P:Microsoft.Practices.SharePoint.Common.Logging.BaseLogger.DefaultEventId">
            <summary>
            The default event Id. Normally, you wouldn't want to use this, but provide an event Id for each error. 
            </summary>
        </member>
        <member name="M:Microsoft.Practices.SharePoint.Common.Logging.SharePointLogger.WriteToOperationsLog(System.String,System.Int32,Microsoft.SharePoint.Administration.EventSeverity,System.String)">
            <summary>
            Writes messages targeted to operations into the EventLog, to be read by operations. It will also attempt
            to write the message into the trace log. 
            </summary>
            <param name="message">The message to write into the log.</param>
            <param name="eventId">The eventId that corresponds to the event. This value, coupled with the EventSource is often used by
            administrators and IT PRo's to monitor the EventLog of a system.</param>
            <param name="severity">How serious the event is.</param>
            <param name="category">The category of the log message.</param>
        </member>
        <member name="M:Microsoft.Practices.SharePoint.Common.Logging.SharePointLogger.WriteToOperationsLog(System.String,System.Int32,System.String)">
            <summary>
            Writes a log message using the default severity for the category.
            </summary>
            <param name="message">The message to write to the event log</param>
            <param name="eventId">The id of the event</param>
            <param name="category">The category for the event in the form 'area/category'</param>
        </member>
        <member name="M:Microsoft.Practices.SharePoint.Common.Logging.SharePointLogger.WriteToOperationsLog(System.String,System.Int32,Microsoft.Practices.SharePoint.Common.Logging.SandboxEventSeverity,System.String)">
            <summary>
            Writes the message to the operations log using a sadnbox sevlerity
            </summary>
            <param name="message"></param>
            <param name="eventId"></param>
            <param name="severity"></param>
            <param name="category"></param>
        </member>
        <member name="M:Microsoft.Practices.SharePoint.Common.Logging.SharePointLogger.WriteToDeveloperTrace(System.String,System.Int32,Microsoft.SharePoint.Administration.TraceSeverity,System.String)">
            <summary>
            Writes a trace message to be read by developers into the trace log. 
            </summary>
            <param name="message">The message to write into the log.</param>
            <param name="eventId">The eventId that corresponds to the event. This value, coupled with the EventSource is often used by
            administrators and IT PRo's to monitor the EventLog of a system.</param>
            <param name="severity">How serious the event is.</param>
            <param name="category">The category of the log message.</param>
        </member>
        <member name="M:Microsoft.Practices.SharePoint.Common.Logging.SharePointLogger.WriteToDeveloperTrace(System.String,System.Int32,System.String)">
            <summary>
            Writes the trace message using the default severity for the category
            </summary>
            <param name="message">The message to trace</param>
            <param name="eventId">The id of the trace</param>
            <param name="category">The category of the trace</param>
        </member>
        <member name="M:Microsoft.Practices.SharePoint.Common.Logging.SharePointLogger.WriteToDeveloperTrace(System.String,System.Int32,Microsoft.Practices.SharePoint.Common.Logging.SandboxTraceSeverity,System.String)">
            <summary>
            Writes a trace message for sandbox to trace logger.
            </summary>
            <param name="message">The message to write</param>
            <param name="eventId">The id for this message</param>
            <param name="severity">The severity of this message</param>
            <param name="category">The category for this message</param>
        </member>
        <member name="M:Microsoft.Practices.SharePoint.Common.Logging.SharePointLogger.WriteToOperationsLogSandbox(System.String,System.Int32,System.Nullable{Microsoft.Practices.SharePoint.Common.Logging.SandboxEventSeverity},System.String)">
            <summary>
            By default the logger will drop operations messages if the proxy is not installed.  You can provide
            custom behavior by overriding this method and storing the logged message somwhere else for the sandbox.
            You will then need to replace the SharePointLogger ILogger mapping with your derived class through
            the service locator.
            </summary>
            <param name="message">The message to log</param>
            <param name="eventId">The id of the event</param>
            <param name="severity">The severity of the event</param>
            <param name="category">The category of the event</param>
        </member>
        <member name="M:Microsoft.Practices.SharePoint.Common.Logging.SharePointLogger.WriteToTraceSandbox(System.String,System.Int32,System.Nullable{Microsoft.Practices.SharePoint.Common.Logging.SandboxTraceSeverity},System.String)">
            <summary>
            By default the logger will drop trace messages if the proxy is not installed.  You can provide
            custom behavior by overriding this method and storing the traced message somwhere else for the sandbox.
            You will then need to replace the SharePointLogger ILogger mapping with your derived class through
            the service locator.
            </summary>
            <param name="message">The message to trace</param>
            <param name="eventId">The id of the trace</param>
            <param name="severity">The severity of the trace</param>
            <param name="category">The category of the trace</param>
        </member>
        <member name="M:Microsoft.Practices.SharePoint.Common.Logging.SharePointLogger.GetEventSeverity(Microsoft.Practices.SharePoint.Common.Logging.SandboxEventSeverity)">
            <summary>
            Translates a <see cref="T:Microsoft.Practices.SharePoint.Common.Logging.SandboxEventSeverity"/> into an EventSeverity.
            SandboxEventSeverity uses same enum values.
            </summary>
            <param name="severity">The severity of the event</param>
            <returns>the equlivalent SharePoint EventSeverity value</returns>
        </member>
        <member name="M:Microsoft.Practices.SharePoint.Common.Logging.SharePointLogger.GetTraceSeverity(Microsoft.Practices.SharePoint.Common.Logging.SandboxTraceSeverity)">
            <summary>
            Translates a <see cref="T:Microsoft.Practices.SharePoint.Common.Logging.SandboxTraceSeverity"/> into an TraceSeverity.
            SandboxTraceSeverity uses the same enum values.
            </summary>
            <param name="severity">The severity of the trace</param>
            <returns>the equlivalent SharePoint TraceSeverity value</returns>
        </member>
        <member name="M:Microsoft.Practices.SharePoint.Common.Logging.SharePointLogger.BuildEventLogMessage(System.String,System.Int32,Microsoft.SharePoint.Administration.EventSeverity,System.String)">
            <summary>
            Add contextual information to the EventLog message.
            </summary>
            <param name="message">The message to write into the log.</param>
            <param name="eventId">The eventId that corresponds to the event. This value, coupled with the EventSource is often used by
            administrators and IT PRo's to monitor the EventLog of a system.</param>
            <param name="severity">How serious the event is.</param>
            <param name="category">The category of the log message.</param>
            <returns>The message.</returns>
        </member>
        <member name="M:Microsoft.Practices.SharePoint.Common.Logging.SharePointLogger.BuildEventLogMessage(System.String,System.Int32,System.String)">
            <summary>
            Builds the event message to log
            </summary>
            <param name="message">the message to log</param>
            <param name="eventId">th id to associate with th event</param>
            <param name="category">the category for the event</param>
            <returns></returns>
        </member>
        <member name="P:Microsoft.Practices.SharePoint.Common.Logging.SharePointLogger.TraceLogger">
            <summary>
            The logger that get's trace messages written to. 
            </summary>
        </member>
        <member name="P:Microsoft.Practices.SharePoint.Common.Logging.SharePointLogger.EventLogLogger">
            <summary>
            The logger that get's error messages written to. 
            </summary>
        </member>
        <member name="P:Microsoft.Practices.SharePoint.Common.Logging.SharePointLogger.DefaultCategory">
            <summary>
            The default area/category for logging.
            </summary>
        </member>
        <member name="T:Microsoft.Practices.SharePoint.Common.ListRepository.CAMLFilter">
            <summary>
            Class that holds filter expressions that can be used by the <see cref="T:Microsoft.Practices.SharePoint.Common.ListRepository.CAMLQueryBuilder"/>. 
            </summary>
        </member>
        <member name="P:Microsoft.Practices.SharePoint.Common.ListRepository.CAMLFilter.FilterExpression">
            <summary>
            The filter expression to use when building a query. 
            </summary>
        </member>
        <member name="T:Microsoft.Practices.SharePoint.Common.Logging.SandboxEventSeverity">
            <summary>
            This enumeration represents the non-oboslete levels for
            SharePoint EventSeverity accessible from the sandbox.  Values match
            values declared for EventSeverity
            </summary>
        </member>
        <member name="F:Microsoft.Practices.SharePoint.Common.Logging.SandboxEventSeverity.None">
            <summary>
             Indicates no event entries are written. 
            </summary>
        </member>
        <member name="F:Microsoft.Practices.SharePoint.Common.Logging.SandboxEventSeverity.ErrorCritical">
            <summary>
             Indicates a problem state that needs the immediate attention of an administrator. 
            </summary>
        </member>
        <member name="F:Microsoft.Practices.SharePoint.Common.Logging.SandboxEventSeverity.Error">
            <summary>
            Indicates a problem state requiring attention by a site administrator.
            </summary>
        </member>
        <member name="F:Microsoft.Practices.SharePoint.Common.Logging.SandboxEventSeverity.Warning">
            <summary>
            Indicates conditions that are not immediately significant but that may eventually cause failure. 
            </summary>
        </member>
        <member name="F:Microsoft.Practices.SharePoint.Common.Logging.SandboxEventSeverity.Information">
            <summary>
             Contains noncritical information provided for the administrator. 
            </summary>
        </member>
        <member name="F:Microsoft.Practices.SharePoint.Common.Logging.SandboxEventSeverity.Verbose">
            <summary>
            Contains detailed information provided for the administrator
            </summary>
        </member>
        <member name="T:Microsoft.Practices.SharePoint.Common.Logging.EventLogLogger">
            <summary>
            Loging implementation that writes the log messages to the EventLog.
            </summary>
        </member>
        <member name="T:Microsoft.Practices.SharePoint.Common.Logging.IEventLogLogger">
            <summary>
            Interface for classes that log to the EventLog. 
            
            This interface is primarily used to be able to register an <see cref="T:Microsoft.Practices.SharePoint.Common.Logging.IEventLogLogger"/> in the service locator.
            </summary>
        </member>
        <member name="M:Microsoft.Practices.SharePoint.Common.Logging.IEventLogLogger.Log(System.String,System.Int32,Microsoft.SharePoint.Administration.EventSeverity,System.String)">
            <summary>
            Log a message with specified <paramref name="message"/>, <paramref name="eventId"/>, <paramref name="severity"/>
            and <paramref name="category"/>.
            </summary>
            <param name="message">The message to write into the log.</param>
            <param name="eventId">
            The eventId that corresponds to the event. This value, coupled with the EventSource is often used by
            administrators and IT PRo's to monitor the EventLog of a system. 
            </param>
            <param name="severity">How serious the event is. </param>
            <param name="category">The category of the log message.</param>
        </member>
        <member name="M:Microsoft.Practices.SharePoint.Common.Logging.IEventLogLogger.Log(System.String,System.Int32,System.String)">
            <summary>
            Log a message with specified <paramref name="message"/>, <paramref name="eventId"/>, 
            and <paramref name="category"/> using the default severity for the category.
            </summary>
            <param name="message">The message to write into the log.</param>
            <param name="eventId">
            The eventId that corresponds to the event. This value, coupled with the EventSource is often used by
            administrators and IT PRo's to monitor the EventLog of a system. 
            </param>
            <param name="category">The category of the log message.</param>
        </member>
        <member name="M:Microsoft.Practices.SharePoint.Common.Logging.EventLogLogger.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Practices.SharePoint.Common.Logging.EventLogLogger"/> class.
            </summary>
        </member>
        <member name="M:Microsoft.Practices.SharePoint.Common.Logging.EventLogLogger.Log(System.String,System.Int32,Microsoft.SharePoint.Administration.EventSeverity,System.String)">
            <summary>
            Overrides the Log method to write messages to the EventLog. 
            </summary>
            <param name="message">Message to write</param>
            <param name="eventId">
            The eventId that corresponds to the event. This value, coupled with the EventSource is often used by
            administrators and IT PRo's to monitor the EventLog of a system. 
            </param>
            <param name="category">The category to write the message to.</param>
            <param name="severity">The severity of the exception.</param>
        </member>
        <member name="M:Microsoft.Practices.SharePoint.Common.Logging.EventLogLogger.Log(System.String,System.Int32,System.String)">
            <summary>
            Overrides the Log method to write messages to the EventLog, writes the event using the 
            default severity for the category.
            </summary>
            <param name="message">Message to write</param>
            <param name="eventId">
            The eventId that corresponds to the event. This value, coupled with the EventSource is often used by
            administrators and IT PRo's to monitor the EventLog of a system. 
            </param>
            <param name="category">The category to write the message to.</param>
        </member>
        <member name="T:Microsoft.Practices.SharePoint.Common.ListRepository.ListItemFieldMappingException">
            <summary>
            Exception that can occur when mapping a field of an SPListItem to a property of a business entity. 
            </summary>
        </member>
        <member name="M:Microsoft.Practices.SharePoint.Common.ListRepository.ListItemFieldMappingException.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Practices.SharePoint.Common.ListRepository.ListItemFieldMappingException"/> class.
            </summary>
        </member>
        <member name="M:Microsoft.Practices.SharePoint.Common.ListRepository.ListItemFieldMappingException.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Practices.SharePoint.Common.ListRepository.ListItemFieldMappingException"/> class.
            </summary>
            <param name="message">The message.</param>
        </member>
        <member name="M:Microsoft.Practices.SharePoint.Common.ListRepository.ListItemFieldMappingException.#ctor(System.String,System.Exception)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Practices.SharePoint.Common.ListRepository.ListItemFieldMappingException"/> class.
            </summary>
            <param name="message">The message.</param>
            <param name="inner">The inner exception.</param>
        </member>
        <member name="M:Microsoft.Practices.SharePoint.Common.ListRepository.ListItemFieldMappingException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Practices.SharePoint.Common.ListRepository.ListItemFieldMappingException"/> class.
            </summary>
            <param name="info">The <see cref="T:System.Runtime.Serialization.SerializationInfo"/> that holds the serialized object data about the exception being thrown.</param>
            <param name="context">The <see cref="T:System.Runtime.Serialization.StreamingContext"/> that contains contextual information about the source or destination.</param>
            <exception cref="T:System.ArgumentNullException">The <paramref name="info"/> parameter is null. </exception>
            <exception cref="T:System.Runtime.Serialization.SerializationException">The class name is null or <see cref="P:System.Exception.HResult"/> is zero (0). </exception>
        </member>
        <member name="T:Microsoft.Practices.SharePoint.Common.Configuration.SPFarmPropertyBag">
            <summary>
            Provides a property bag for a web application based upon the SPWebApplication property bag. 
            </summary>
        </member>
        <member name="T:Microsoft.Practices.SharePoint.Common.Configuration.IPropertyBag">
            <summary>
            The Interface that represents a property bag (stores name-value pairs) for holding
            configuration information for a particular level like a web, site, web application, and farm. 
            </summary>
        </member>
        <member name="M:Microsoft.Practices.SharePoint.Common.Configuration.IPropertyBag.Contains(System.String)">
            <summary>
            Checks if a specific key exist in the PropertyBag. 
            </summary>
            <param name="key">the key to check.</param>
            <returns><c>true</c> if the key exists, else <c>false</c>.</returns>
        </member>
        <member name="M:Microsoft.Practices.SharePoint.Common.Configuration.IPropertyBag.Remove(System.String)">
            <summary>
            Remove a particular config setting from this property bag.
            </summary>
            <param name="key">The key to remove</param>
        </member>
        <member name="P:Microsoft.Practices.SharePoint.Common.Configuration.IPropertyBag.Item(System.String)">
            <summary>
            Gets or sets a value based on the key. If the value is not defined in this PropertyBag.
            </summary>
            <param name="key">The key to find the config value in the config. </param>
            <returns>The config value defined in the property bag, null if not found </returns>
        </member>
        <member name="P:Microsoft.Practices.SharePoint.Common.Configuration.IPropertyBag.Level">
            <summary>
            The config level this PropertyBag represents. 
            </summary>
        </member>
        <member name="M:Microsoft.Practices.SharePoint.Common.Configuration.SPFarmPropertyBag.ClearCache">
            <summary>
            For internal use, clears the cached setting store data
            </summary>
        </member>
        <member name="M:Microsoft.Practices.SharePoint.Common.Configuration.SPFarmPropertyBag.Reset">
            <summary>
            Forces the property bag to reload settings on next access.
            </summary>
        </member>
        <member name="M:Microsoft.Practices.SharePoint.Common.Configuration.SPFarmPropertyBag.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Practices.SharePoint.Common.Configuration.SPWebAppPropertyBag"/> class.
            </summary>
        </member>
        <member name="M:Microsoft.Practices.SharePoint.Common.Configuration.SPFarmPropertyBag.#ctor(Microsoft.SharePoint.Administration.SPFarm)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Practices.SharePoint.Common.Configuration.SPWebAppPropertyBag"/> class.
            </summary>
            <param name="farm">The Farm.</param>
        </member>
        <member name="M:Microsoft.Practices.SharePoint.Common.Configuration.SPFarmPropertyBag.Contains(System.String)">
            <summary>
            Does a specific key exist in the PropertyBag.
            </summary>
            <param name="key">the key to check.</param>
            <returns>true if the key exists, else false.</returns>
        </member>
        <member name="M:Microsoft.Practices.SharePoint.Common.Configuration.SPFarmPropertyBag.Remove(System.String)">
            <summary>
            Remove a particular config setting from this property bag.
            </summary>
            <param name="key">The key to remove</param>
        </member>
        <member name="P:Microsoft.Practices.SharePoint.Common.Configuration.SPFarmPropertyBag.Level">
            <summary>
            The config level this property bag operates on. Returns <see cref="F:Microsoft.Practices.SharePoint.Common.Configuration.ConfigLevel.CurrentSPWebApplication"/>.
            </summary>
        </member>
        <member name="P:Microsoft.Practices.SharePoint.Common.Configuration.SPFarmPropertyBag.Item(System.String)">
            <summary>
            Gets or sets a value based on the key. If the value is not defined in this PropertyBag, it will look in it's
            parent property bag.
            </summary>
            <value></value>
            <returns>The config value defined in the property bag. </returns>
        </member>
        <member name="T:Microsoft.Practices.SharePoint.Common.Configuration.IHierarchicalConfig">
            <summary>
            Allows you to read config settings in a hierarchical way. You can look for a config setting in a property bag
            at a certain level, and it will look up the hierarchy for the first location where that config setting is located. 
            
            Using this interface, you can look up values in your current context. That means: in your Current SPWeb (default)
            , current SPSite, current SPWebApplication and current SPFarm.  If the SPContext.Current is not available, you can
            set the web to use as a basis for the web, site (web.Site), web application (web.Site.WebApplication), and farm
            (web.Site.WebApplication.Farm) to use.  Use this approach for example in a feature reciever, event reciever, or a 
            console application.
            
            This interface is only for reading config settings using the hierarchy.  Use <see cref="T:Microsoft.Practices.SharePoint.Common.Configuration.IConfigManager"/> for getting
            values from a specific level in the hierarchy, or to manage settings stored within property bags. 
            </summary>
        </member>
        <member name="M:Microsoft.Practices.SharePoint.Common.Configuration.IHierarchicalConfig.GetByKey``1(System.String)">
            <summary>
            Read a config value based on the key, walking the property bag hierarchy to find the value.  Throws 
            a <see cref="T:Microsoft.Practices.SharePoint.Common.Configuration.ConfigurationException"/> if the key is not found.
            </summary>
            <typeparam name="TValue">The type of the value to read. </typeparam>
            <param name="key">The key associated with the config value</param>
            <returns>The value</returns>
        </member>
        <member name="M:Microsoft.Practices.SharePoint.Common.Configuration.IHierarchicalConfig.GetByKey``1(System.String,Microsoft.Practices.SharePoint.Common.Configuration.ConfigLevel)">
            <summary>
            Read a config value based on the key, walking the property bag hierarchy starting at the specified config level.  Throws 
            a <see cref="T:Microsoft.Practices.SharePoint.Common.Configuration.ConfigurationException"/> if the key is not found.
            
            </summary>
            <typeparam name="TValue">The type of the value to read.</typeparam>
            <param name="key">The key associated with the config value</param>
            <param name="level">The config level to start looking in.
            For example, <see cref="F:Microsoft.Practices.SharePoint.Common.Configuration.ConfigLevel.CurrentSPWebApplication"/> means that it's looking at the current 'SPWebApplication'
            and above.
             </param>
            <returns>The value</returns>
        </member>
        <member name="M:Microsoft.Practices.SharePoint.Common.Configuration.IHierarchicalConfig.ContainsKey(System.String)">
            <summary>
            Determines if a config value with the specified key can be found in config. Will walk the 
            hierarchy of property bags to find the key.
            </summary>
            <param name="key">the specified key</param>
            <returns>
            	<c>true</c> if the specified key contains key; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Microsoft.Practices.SharePoint.Common.Configuration.IHierarchicalConfig.ContainsKey(System.String,Microsoft.Practices.SharePoint.Common.Configuration.ConfigLevel)">
            <summary>
            Determines if a config value with the specified key can be found walking the property bag hierarchy, starting at 
            the specified level. 
            </summary>
            <param name="key">The key.</param>
            <param name="level">The level to start looking in.</param>
            <returns>
            	<c>true</c> if the specified key contains key; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Microsoft.Practices.SharePoint.Common.Configuration.IHierarchicalConfig.SetWeb(Microsoft.SharePoint.SPWeb)">
            <summary>
            Sets the web to use as a basis for creating the property bag hierarchy.  Set this value if you are accessing
            configuration from a context where SPContext.Current is null.
            </summary>
            <param name="web">The web to use for creating the property bags for the hierarchy</param>
        </member>
        <member name="T:Microsoft.Practices.SharePoint.Common.Configuration.HierarchicalConfig">
            <summary>
            Class implements the <see cref="T:Microsoft.Practices.SharePoint.Common.Configuration.IHierarchicalConfig"/>, to allow users to read config settings in a hierarchical fashion. 
            </summary>
        </member>
        <member name="M:Microsoft.Practices.SharePoint.Common.Configuration.HierarchicalConfig.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Practices.SharePoint.Common.Configuration.HierarchicalConfig"/> class.
            </summary>
        </member>
        <member name="M:Microsoft.Practices.SharePoint.Common.Configuration.HierarchicalConfig.#ctor(Microsoft.SharePoint.SPWeb)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Practices.SharePoint.Common.Configuration.HierarchicalConfig"/> class using the provided web.
            This constructor supports injecting the web to use rather than relying upon SPContext.Current.Web.
            </summary>
            <param name="web">The web to use to construct the configuration hierarchy</param>
        </member>
        <member name="M:Microsoft.Practices.SharePoint.Common.Configuration.HierarchicalConfig.#ctor(Microsoft.Practices.SharePoint.Common.Configuration.IPropertyBagHierarchy)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Practices.SharePoint.Common.Configuration.HierarchicalConfig"/> class.
            </summary>
            <param name="hierarchy">instance of <see cref="T:Microsoft.Practices.SharePoint.Common.Configuration.IPropertyBagHierarchy"/>.</param>
        </member>
        <member name="M:Microsoft.Practices.SharePoint.Common.Configuration.HierarchicalConfig.#ctor(Microsoft.Practices.SharePoint.Common.Configuration.IPropertyBagHierarchy,Microsoft.Practices.SharePoint.Common.Configuration.IConfigSettingSerializer)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Practices.SharePoint.Common.Configuration.HierarchicalConfig"/> class.
            </summary>
            <param name="hierarchy">instance of <see cref="T:Microsoft.Practices.SharePoint.Common.Configuration.IPropertyBagHierarchy"/>.</param>
            <param name="configSettingSerializer">The config setting serializer.</param>
        </member>
        <member name="M:Microsoft.Practices.SharePoint.Common.Configuration.HierarchicalConfig.SetWeb(Microsoft.SharePoint.SPWeb)">
            <summary>
            Sets the web to use for the configuration hierarchy.  This supports injecting the web to use (method injection) for
            looking up the hierarchical configuration.  This supports using the service locator to find the IHierarchicalConfig instance
            to use, then setting the SPWeb to use for a lookup where an SPContext.Current does not exist.
            </summary>
            <param name="web"></param>
        </member>
        <member name="M:Microsoft.Practices.SharePoint.Common.Configuration.HierarchicalConfig.GetHierarchy">
            <summary>
            Gets the hierarchy of property bags to use for looking up a value.
            </summary>
            <returns>The <see cref="T:Microsoft.Practices.SharePoint.Common.Configuration.IPropertyBagHierarchy"/> to use for the lookup</returns>
        </member>
        <member name="M:Microsoft.Practices.SharePoint.Common.Configuration.HierarchicalConfig.ContainsKey(System.String)">
            <summary>
            Determines if a config value with the specified key can be found in config.
            Will walk the hierarchy of property bags to find the key.
            </summary>
            <param name="key">the specified key</param>
            <returns>
            	<c>true</c> if the specified property bag contains key; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Microsoft.Practices.SharePoint.Common.Configuration.HierarchicalConfig.ContainsKey(System.String,Microsoft.Practices.SharePoint.Common.Configuration.ConfigLevel)">
            <summary>
            Determines if a config value with the specified key can be found in the hierarchical config at
            the specified level in the current context or above.  Will walk the hierarchy of property bags to find the key.
            </summary>
            <param name="key">The key.</param>
            <param name="level">The level to start looking in.</param>
            <returns>
            	<c>true</c> if the specified property bag contains key; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Microsoft.Practices.SharePoint.Common.Configuration.HierarchicalConfig.GetByKey``1(System.String)">
            <summary>
            Read a config value based on the key.  It will walk the hierarchy to find the key, starting
            at the first property bag in the hierarchy (typically the SPWeb).  Throws <see cref="T:Microsoft.Practices.SharePoint.Common.Configuration.ConfigurationException"/>
            if they key is not found.
            </summary>
            <typeparam name="TValue">The type of the value to read.</typeparam>
            <param name="key">The key associated with the config value</param>
            <returns>The value</returns>
        </member>
        <member name="M:Microsoft.Practices.SharePoint.Common.Configuration.HierarchicalConfig.GetByKey``1(System.String,Microsoft.Practices.SharePoint.Common.Configuration.ConfigLevel)">
            <summary>
            Read a config value based on the key, from the specified config level in the current context.
            If the value cannot be found at the specified level, it will walk the hierarchy from the level specified
            upward.  Throws <see cref="T:Microsoft.Practices.SharePoint.Common.Configuration.ConfigurationException"/> if they key is not found.
            </summary>
            <typeparam name="TValue">The type of the value to read.</typeparam>
            <param name="key">The key associated with the config value</param>
            <param name="level">The config level to start looking in.
            For example, <see cref="F:Microsoft.Practices.SharePoint.Common.Configuration.ConfigLevel.CurrentSPWebApplication"/> means that it's looking at the current 'SPWebApplication'
            and above.</param>
            <returns>The value</returns>
        </member>
        <member name="M:Microsoft.Practices.SharePoint.Common.Configuration.HierarchicalConfig.GetSetting(System.String)">
            <summary>
            Gets the serialized string data for the key specified.
            </summary>
            <param name="key">The key to retrieve data for</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Practices.SharePoint.Common.Configuration.HierarchicalConfig.Contains(System.String)">
            <summary>
            Looks up if one of the property bags in the full hierarchy contains the key specified.
            </summary>
            <param name="key">The to check for</param>
            <returns><c>true</c> if the key is found, <c>false</c> otherwise.</returns>
        </member>
        <member name="M:Microsoft.Practices.SharePoint.Common.Configuration.HierarchicalConfig.GetSettingFrom(System.String,Microsoft.Practices.SharePoint.Common.Configuration.ConfigLevel)">
            <summary>
            Gets the serialized data starting at the level specified and walking the
            hierarchy if found, returns null if not found.
            </summary>
            <param name="key">The key to walk the hierarchy for</param>
            <param name="level">The level to start walking at</param>
            <returns><c>true</c> if the key is found, <c>false</c> otherwise.</returns>
        </member>
        <member name="M:Microsoft.Practices.SharePoint.Common.Configuration.HierarchicalConfig.ContainsFrom(System.String,Microsoft.Practices.SharePoint.Common.Configuration.ConfigLevel)">
            <summary>
            Looks up if one of the property bags in the hierarchy contains the key specified starting
            at the level specified.
            </summary>
            <param name="key">The key to walk the hierarchy for</param>
            <param name="level">The level to start walking at</param>
            <returns><c>true</c> if the key is found, <c>false</c> otherwise.</returns>
        </member>
        <member name="P:Microsoft.Practices.SharePoint.Common.Configuration.HierarchicalConfig.WebContext">
            <summary>
            Gets the web context to use.  If no web was injected through constructor or method injection, then the web is retrieved 
            from SPContext.Current.  Returns null of the web was not injected, and SPContext.Current is null.
            </summary>
        </member>
        <member name="T:Microsoft.Practices.SharePoint.Common.ApplicationContextProvider">
            <summary>
            Provides the application context information for the sharepoint environment.  The logic separated into 
            the ApplicationContextProvider for testability.
            </summary>
        </member>
        <member name="T:Microsoft.Practices.SharePoint.Common.IApplicationContextProvider">
            <summary>
            The interface for providing context to the SharePointEnvironment.
            </summary>
        </member>
        <member name="M:Microsoft.Practices.SharePoint.Common.IApplicationContextProvider.GetCurrentAppDomainFriendlyName">
            <summary>
            Gets the current app domain friendly name.  Used to check if running in the sandbox.
            </summary>
            <returns>The friendly name of the current app domain</returns>
        </member>
        <member name="M:Microsoft.Practices.SharePoint.Common.IApplicationContextProvider.GetSPContextCurrentWeb">
            <summary>
            Gets the web in SPContext.Current.
            </summary>
            <returns>The web in the current context</returns>
        </member>
        <member name="M:Microsoft.Practices.SharePoint.Common.IApplicationContextProvider.GetSPFarmLocal">
            <summary>
            Gets the local farm instance to use.
            </summary>
            <returns>The value of SPFarm.Local</returns>
        </member>
        <member name="M:Microsoft.Practices.SharePoint.Common.IApplicationContextProvider.ExecuteRegisteredProxyOperation(System.String,System.String,Microsoft.SharePoint.UserCode.SPProxyOperationArgs)">
            <summary>
            Executes the proxy operation with the args provided.
            </summary>
            <param name="assemblyName">The assembly for the proxy (fully qualified)</param>
            <param name="typeName">The type name of the proxy</param>
            <param name="args">The args to pass to the proxy</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Practices.SharePoint.Common.IApplicationContextProvider.IsProxyCheckerInstalled">
            <summary>
            Checks if the proxy is installed that checks for the presence of other proxies.
            </summary>
            <returns>true if the proxy is installed, false otherwise</returns>
        </member>
        <member name="M:Microsoft.Practices.SharePoint.Common.IApplicationContextProvider.IsProxyInstalled(System.String,System.String)">
            <summary>
            Checks if the proxy specified is installed. If the proxy checker is not installed, then false will always
            be returned.
            </summary>
            <param name="assemblyName">The fully qualified assembly name containing the proxy</param>
            <param name="typeForProxy">The type name of the proxy</param>
            <returns>true if the proxy is installed, false otherwise.</returns>
        </member>
        <member name="M:Microsoft.Practices.SharePoint.Common.ApplicationContextProvider.GetCurrentAppDomainFriendlyName">
            <summary>
            Gets the friendly application domain name for the current application domain.
            </summary>
            <returns>The friendly name of the current application domain</returns>
        </member>
        <member name="M:Microsoft.Practices.SharePoint.Common.ApplicationContextProvider.GetSPFarmLocal">
            <summary>
            Gets the local farm
            </summary>
            <returns>The local farm instance</returns>
        </member>
        <member name="M:Microsoft.Practices.SharePoint.Common.ApplicationContextProvider.GetSPContextCurrentWeb">
            <summary>
            Provides the current SPContext.
            </summary>
            <returns>Returns the current web</returns>
        </member>
        <member name="M:Microsoft.Practices.SharePoint.Common.ApplicationContextProvider.ExecuteRegisteredProxyOperation(System.String,System.String,Microsoft.SharePoint.UserCode.SPProxyOperationArgs)">
            <summary>
            Executes a registered proxy operation 
            </summary>
            <param name="assemblyName">The assembly name for the proxy to execute</param>
            <param name="typeName">The name of the type of the proxy operation</param>
            <param name="args">The arguments to pass to the proxy operation</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Practices.SharePoint.Common.ApplicationContextProvider.IsProxyCheckerInstalled">
            <summary>
            Returns true if the proxy checker is installed (which is a full trust proxy that can check if other proxies are
            available).
            </summary>
            <returns>returns true if the proxy checker is installed, false otherwise</returns>
        </member>
        <member name="M:Microsoft.Practices.SharePoint.Common.ApplicationContextProvider.IsProxyInstalled(System.String,System.String)">
            <summary>
            Returns true if a proxy is installed identified by the assembly name and type provided.
            </summary>
            <param name="assemblyName">The assembly name to check for the proxy installed (fully qualified)</param>
            <param name="typeForProxy">The type of the proxy to check for</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Practices.SharePoint.Common.ApplicationContextProvider.CheckInGAC">
            <summary>
            Checks if the currently running assembly is in the GAC
            </summary>
            <returns>True if the assembly is in the GAC</returns>
        </member>
        <member name="T:Microsoft.Practices.SharePoint.Common.ListRepository.ListItemFieldMapper`1">
            <summary>
            Class that maps Fields from a <see cref="T:Microsoft.SharePoint.SPListItem"/> to properties on a strong typed business entity
            </summary>
            <typeparam name="TEntity">The type of businessentity to map. </typeparam>
        </member>
        <member name="M:Microsoft.Practices.SharePoint.Common.ListRepository.ListItemFieldMapper`1.CreateEntity(Microsoft.SharePoint.SPListItem)">
            <summary>
            Create an entity, and fill the mapped properties from the specified <see cref="T:Microsoft.SharePoint.SPListItem"/>.
            </summary>
            <param name="item">The listitem to use to fill the entities properties. </param>
            <returns>The created and populated entity. </returns>
        </member>
        <member name="M:Microsoft.Practices.SharePoint.Common.ListRepository.ListItemFieldMapper`1.FillSPListItemFromEntity(Microsoft.SharePoint.SPListItem,`0)">
            <summary>
            Fill a SPListItem's properties based on the values in an entity.  
            </summary>
            <param name="spListItem"></param>
            <param name="entity"></param>
        </member>
        <member name="M:Microsoft.Practices.SharePoint.Common.ListRepository.ListItemFieldMapper`1.AddMapping(System.Guid,System.String)">
            <summary>
            Add a mapping between a field in an SPListItem and a property in the entity. 
            </summary>
            <param name="fieldId"></param>
            <param name="entityPropertyName"></param>
        </member>
        <member name="P:Microsoft.Practices.SharePoint.Common.ListRepository.ListItemFieldMapper`1.FieldMappings">
            <summary>
            The list of field mappings that are used by the ListItemFieldMapper class. 
            </summary>
        </member>
        <member name="T:Microsoft.Practices.SharePoint.Common.Constants">
            <summary>
            Class that holds the constants for the SharePoint.Common project. 
            </summary>
        </member>
        <member name="F:Microsoft.Practices.SharePoint.Common.Constants.DefaultCategoryName">
            <summary>
            Constant that specifies the default category name.
            </summary>
        </member>
        <member name="F:Microsoft.Practices.SharePoint.Common.Constants.DefaultAreaName">
            <summary>
            Constant that defines the default area name.
            </summary>
        </member>
        <member name="F:Microsoft.Practices.SharePoint.Common.Constants.AreasConfigKey">
            <summary>
            Constant that specifies the name of the configuration key for searching the areas and categories section.
            </summary>
        </member>
        <member name="F:Microsoft.Practices.SharePoint.Common.Constants.EventLogName">
            <summary>
            Constant that specifies the name of the event log in which the event sources will be created for logging.
            </summary>
        </member>
        <member name="F:Microsoft.Practices.SharePoint.Common.Constants.CategoryPathSeparator">
            <summary>
            Constant that defines the path separator for categories (Area/Category).
            </summary>
        </member>
        <member name="F:Microsoft.Practices.SharePoint.Common.Constants.ItemContentTypeName">
            <summary>
            The name of the Item content type.
            </summary>
        </member>
        <member name="T:Microsoft.Practices.SharePoint.Common.Logging.DiagnosticsArea">
            <summary>
            Class representing an area for diagnostic purpose.
            </summary>
        </member>
        <member name="M:Microsoft.Practices.SharePoint.Common.Logging.DiagnosticsArea.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Practices.SharePoint.Common.Logging.DiagnosticsArea"/> class.
            </summary>
        </member>
        <member name="M:Microsoft.Practices.SharePoint.Common.Logging.DiagnosticsArea.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Practices.SharePoint.Common.Logging.DiagnosticsArea"/> class.
            </summary>
            <param name="name">The name of the diagnostic area.</param>
        </member>
        <member name="M:Microsoft.Practices.SharePoint.Common.Logging.DiagnosticsArea.#ctor(System.String,Microsoft.Practices.SharePoint.Common.Logging.DiagnosticsCategoryCollection)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Practices.SharePoint.Common.Logging.DiagnosticsArea"/> class.
            </summary>
            <param name="name">The name of the diagnostic area.</param>
            <param name="diagnosticsCategories">A collection of <see cref="T:Microsoft.Practices.SharePoint.Common.Logging.DiagnosticsCategory"/> that will be part of the area.</param>
        </member>
        <member name="M:Microsoft.Practices.SharePoint.Common.Logging.DiagnosticsArea.ToSPDiagnosticsArea">
            <summary>
            Converts from <see cref="T:Microsoft.Practices.SharePoint.Common.Logging.DiagnosticsArea"/> to <see cref="T:Microsoft.SharePoint.Administration.SPDiagnosticsArea"/> instance.
            </summary>
            <returns>the SPDiagnosticsArea created from this diagnostics area</returns>
        </member>
        <member name="P:Microsoft.Practices.SharePoint.Common.Logging.DiagnosticsArea.Name">
            <summary>
            The name of the diagnostic area
            </summary>
        </member>
        <member name="P:Microsoft.Practices.SharePoint.Common.Logging.DiagnosticsArea.DiagnosticsCategories">
            <summary>
            Gets the collection of <see cref="T:Microsoft.Practices.SharePoint.Common.Logging.DiagnosticsCategory"/>.
            </summary>
        </member>
        <member name="P:Microsoft.Practices.SharePoint.Common.Logging.DiagnosticsArea.DefaultSPDiagnosticsArea">
            <summary>
            Gets the default <see cref="T:Microsoft.SharePoint.Administration.SPDiagnosticsArea"/> instance.
            </summary>
        </member>
        <member name="T:Microsoft.Practices.SharePoint.Common.ProxyArgs.ProxyOperationTypes">
            <summary>
            The list of the assemlys and types for the sharepoint library.
            </summary>
        </member>
        <member name="F:Microsoft.Practices.SharePoint.Common.ProxyArgs.ProxyOperationTypes.ConfigurationProxyAssemblyName">
            <summary>
            The assembly for the config proxy operation
            </summary>
        </member>
        <member name="F:Microsoft.Practices.SharePoint.Common.ProxyArgs.ProxyOperationTypes.LoggingProxyAssemblyName">
            <summary>
            The assembly for logging proxy.
            </summary>
        </member>
        <member name="F:Microsoft.Practices.SharePoint.Common.ProxyArgs.ProxyOperationTypes.ReadConfigDataOpTypeName">
            <summary>
            The operation for reading configuration data.
            </summary>
        </member>
        <member name="F:Microsoft.Practices.SharePoint.Common.ProxyArgs.ProxyOperationTypes.ContainsKeyConfigOpTypeName">
            <summary>
            The operation name for determining if a key is contained in config settings.
            </summary>
        </member>
        <member name="F:Microsoft.Practices.SharePoint.Common.ProxyArgs.ProxyOperationTypes.ProxyInstalledOpTypeName">
            <summary>
            The proxy type for determining if a proxy operation is installed.
            </summary>
        </member>
        <member name="F:Microsoft.Practices.SharePoint.Common.ProxyArgs.ProxyOperationTypes.LoggingOpTypeName">
            <summary>
            The type for logging to the event log.
            </summary>
        </member>
        <member name="F:Microsoft.Practices.SharePoint.Common.ProxyArgs.ProxyOperationTypes.TracingOpTypeName">
            <summary>
            The type for tracing to the ULS log.
            </summary>
        </member>
        <member name="T:Microsoft.Practices.SharePoint.Common.ProxyArgs.LoggingOperationArgs">
            <summary>
            The proxy arguments for logging through the full trust proxy.
            </summary>
        </member>
        <member name="M:Microsoft.Practices.SharePoint.Common.ProxyArgs.LoggingOperationArgs.#ctor">
            <summary>
            The constructor for the logging operation.
            </summary>
        </member>
        <member name="P:Microsoft.Practices.SharePoint.Common.ProxyArgs.LoggingOperationArgs.Message">
            <summary>
            The message to log
            </summary>
        </member>
        <member name="P:Microsoft.Practices.SharePoint.Common.ProxyArgs.LoggingOperationArgs.EventId">
            <summary>
            The event id for the message being logged.
            </summary>
        </member>
        <member name="P:Microsoft.Practices.SharePoint.Common.ProxyArgs.LoggingOperationArgs.Severity">
            <summary>
            The severity of the message to log.
            </summary>
        </member>
        <member name="P:Microsoft.Practices.SharePoint.Common.ProxyArgs.LoggingOperationArgs.Category">
            <summary>
            The name of the cateory to log.
            </summary>
        </member>
        <member name="P:Microsoft.Practices.SharePoint.Common.ProxyArgs.LoggingOperationArgs.SiteID">
            <summary>
            The ID of the site whose parent web application or farm is used in the logging operation.
            </summary>
        </member>
        <member name="P:Microsoft.Practices.SharePoint.Common.ProxyArgs.LoggingOperationArgs.OperationAssemblyName">
            <summary>
            The assembly name containing the operation.
            </summary>
        </member>
        <member name="P:Microsoft.Practices.SharePoint.Common.ProxyArgs.LoggingOperationArgs.OperationTypeName">
            <summary>
            The type name for the operation.
            </summary>
        </member>
        <member name="T:Microsoft.Practices.SharePoint.Common.ServiceLocation.ServiceLocatorConfig">
            <summary>
            Class that reads and writes the <see cref="T:Microsoft.Practices.SharePoint.Common.ServiceLocation.SharePointServiceLocator"/>'s configration in hierarchical config. It uses the 
            <see cref="T:Microsoft.Practices.SharePoint.Common.Configuration.HierarchicalConfig"/> to read and write values into the Farm level of hierarchical config. 
            </summary>
        </member>
        <member name="T:Microsoft.Practices.SharePoint.Common.ServiceLocation.IServiceLocatorConfig">
            <summary>
            Interface for a class that can read and write type mappings into config. 
            </summary>
        </member>
        <member name="M:Microsoft.Practices.SharePoint.Common.ServiceLocation.IServiceLocatorConfig.RegisterTypeMapping``2">
            <summary>
            Register a type mapping between TFrom and TTo, with (null) as a key.
            </summary>
            <typeparam name="TFrom">The type that will be used to identify the type mapping.</typeparam>
            <typeparam name="TTo">The type that will be returned when using the type mapping.</typeparam>
        </member>
        <member name="M:Microsoft.Practices.SharePoint.Common.ServiceLocation.IServiceLocatorConfig.RegisterTypeMapping``2(System.String)">
            <summary>
            Register a type mapping between TFrom and TTo, with a specified key.
            </summary>
            <typeparam name="TFrom">The type that will be used to identify the type mapping.</typeparam>
            <typeparam name="TTo">The type that will be returned when using the type mapping.</typeparam>
            <param name="key">The key of the type mapping.</param>
        </member>
        <member name="M:Microsoft.Practices.SharePoint.Common.ServiceLocation.IServiceLocatorConfig.RemoveTypeMappings``1">
            <summary>
            Remove all type mappings for this type.
            </summary>
            <typeparam name="T">The type to remove type mappings for</typeparam>
        </member>
        <member name="M:Microsoft.Practices.SharePoint.Common.ServiceLocation.IServiceLocatorConfig.RemoveTypeMapping``1(System.String)">
            <summary>
            Remove a type mapping with specified key. Use (null) to remove a type mapping that was registered without parameter. 
            </summary>
            <typeparam name="T">The type to remove type mappings for.</typeparam>
            <param name="key">The key to find type mappings for.</param>
        </member>
        <member name="M:Microsoft.Practices.SharePoint.Common.ServiceLocation.IServiceLocatorConfig.GetTypeMappings">
            <summary>
            Gets a list of all of the type mappings configured.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Practices.SharePoint.Common.ServiceLocation.IServiceLocatorConfig.GetSiteCacheInterval">
            <summary>
            Gets the cache interval in seconds for a site level service locator.  When the interval
            expires the configuration is read back for the locator and if changed then service locator
            is reloaded.
            </summary>
            <returns>the duration in seconds to cache a site service locator instance</returns>
        </member>
        <member name="M:Microsoft.Practices.SharePoint.Common.ServiceLocation.IServiceLocatorConfig.SetSiteCacheInterval(System.Int32)">
            <summary>
            Sets the site cache interval for a service locator
            </summary>
            <param name="interval">The interval in seconds to set</param>
        </member>
        <member name="P:Microsoft.Practices.SharePoint.Common.ServiceLocation.IServiceLocatorConfig.LastUpdate">
            <summary>
            Gets the time that configuration was last updated.
            </summary>
        </member>
        <member name="P:Microsoft.Practices.SharePoint.Common.ServiceLocation.IServiceLocatorConfig.Site">
            <summary>
            Gets and sets the site for managing configuration at the site level.
            Set this property if you want to manage configuration for a site.
            </summary>
        </member>
        <member name="M:Microsoft.Practices.SharePoint.Common.ServiceLocation.ServiceLocatorConfig.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Practices.SharePoint.Common.ServiceLocation.ServiceLocatorConfig"/> class that reads and writes values into 
            a config manager that reads and writes to the SPFarm.
            </summary>
        </member>
        <member name="M:Microsoft.Practices.SharePoint.Common.ServiceLocation.ServiceLocatorConfig.#ctor(Microsoft.Practices.SharePoint.Common.Configuration.IConfigManager)">
            <summary>
            Creates a service locator config instance using the manager provided to access config information.
            </summary>
            <param name="manager"></param>
        </member>
        <member name="M:Microsoft.Practices.SharePoint.Common.ServiceLocation.ServiceLocatorConfig.GetSiteCacheInterval">
            <summary>
            Gets the interval to cache a site locator for
            </summary>
            <returns>the interval value, -1 if not configured</returns>
        </member>
        <member name="M:Microsoft.Practices.SharePoint.Common.ServiceLocation.ServiceLocatorConfig.SetSiteCacheInterval(System.Int32)">
            <summary>
            Sets the site cache interval to the value provided.
            </summary>
            <param name="interval">The interval to set.  Must be greater than zero</param>
        </member>
        <member name="M:Microsoft.Practices.SharePoint.Common.ServiceLocation.ServiceLocatorConfig.RegisterTypeMapping``2">
            <summary>
            Register a type mapping between two types. When asking for a TFrom, an instance of TTo is returned.
            </summary>
            <typeparam name="TFrom">The type that can be requested.</typeparam>
            <typeparam name="TTo">The type of object that should be returned when asking for a type.</typeparam>
        </member>
        <member name="M:Microsoft.Practices.SharePoint.Common.ServiceLocation.ServiceLocatorConfig.RegisterTypeMapping``2(System.String)">
            <summary>
            Register a type mapping between two types. When asking for a TFrom, an instance of TTo is returned.
            </summary>
            <typeparam name="TFrom">The type that can be requested.</typeparam>
            <typeparam name="TTo">The type of object that should be returned when asking for a type.</typeparam>
            <param name="key">The key that's used to store the type mapping.</param>
        </member>
        <member name="M:Microsoft.Practices.SharePoint.Common.ServiceLocation.ServiceLocatorConfig.RegisterTypeMapping``2(System.String,Microsoft.Practices.SharePoint.Common.ServiceLocation.InstantiationType)">
            <summary>
            Register a type mapping between TFrom and TTo with specified key. When <see cref="M:Microsoft.Practices.ServiceLocation.IServiceLocator.GetInstance(System.Type)"/> with
            parameter TFrom is called, an instance of type TTO is returned. 
            </summary>
            <typeparam name="TFrom">The type to register type mappings for. </typeparam>
            <typeparam name="TTo">The type to create if <see cref="M:Microsoft.Practices.ServiceLocation.IServiceLocator.GetInstance(System.Type)"/> is called with TFrom. </typeparam>
            <param name="instantiationType">Determines how the type should be created. </param>
            <param name="key">The key that's used to store the type mapping.</param>
        </member>
        <member name="M:Microsoft.Practices.SharePoint.Common.ServiceLocation.ServiceLocatorConfig.RemoveTypeMappings``1">
            <summary>
            Remove all type mappings for a specified type. 
            </summary>
            <typeparam name="T">The type to remove type mappings for. </typeparam>
        </member>
        <member name="M:Microsoft.Practices.SharePoint.Common.ServiceLocation.ServiceLocatorConfig.RemoveTypeMapping``1(System.String)">
            <summary>
            Remove type mapping for type with specified key. 
            </summary>
            <typeparam name="T">The type to remove type mapping for. </typeparam>
            <param name="key">The key that was used to register the type mapping. Use null for default key. </param>
        </member>
        <member name="M:Microsoft.Practices.SharePoint.Common.ServiceLocation.ServiceLocatorConfig.RemoveTypeMapping(Microsoft.Practices.SharePoint.Common.ServiceLocation.TypeMapping)">
            <summary>
            Removes a specified type mapping from the list of type mappings. 
            </summary>
            <param name="mapping"></param>
            
        </member>
        <member name="M:Microsoft.Practices.SharePoint.Common.ServiceLocation.ServiceLocatorConfig.GetTypeMappings">
            <summary>
            Returns the list of type mappings that's stored in the config. 
            </summary>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Practices.SharePoint.Common.ServiceLocation.ServiceLocatorConfig.GetPropertyBag">
            <summary>
            Gets the property bag to retrieve configuration data from.  If the site is set, it
            will retrieve the configuration data from the site, otherwise the configuration data
            will be retrieved from the farm.
            </summary>
            <returns>The property bag to use for the service locator config operations.</returns>
        </member>
        <member name="M:Microsoft.Practices.SharePoint.Common.ServiceLocation.ServiceLocatorConfig.GetConfigKey">
            <summary>
            The config key used to store the config values. 
            </summary>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Practices.SharePoint.Common.ServiceLocation.ServiceLocatorConfig.GetSiteCacheIntervalConfigKey">
            <summary>
            Gets the key for getting/setting the cache timeout for site service locators.
            </summary>
            <returns>The key to use to store the config data for the site cache interval</returns>
        </member>
        <member name="P:Microsoft.Practices.SharePoint.Common.ServiceLocation.ServiceLocatorConfig.Site">
            <summary>
            Sets the site to configure type mappings for.  When set, configuration will be
            retrieved and stored from the site collection provided.  If not set, then configuration
            will be stored and retrieved from the farm.
            </summary>
        </member>
        <member name="P:Microsoft.Practices.SharePoint.Common.ServiceLocation.ServiceLocatorConfig.LastUpdate">
            <summary>
            The last time configuration was updated, null if it has not been updated.
            </summary>
        </member>
        <member name="T:Microsoft.Practices.SharePoint.Common.Logging.TraceLogger">
            <summary>
            Class that can log messages into the SharePoint trace log. 
            </summary>
        </member>
        <member name="T:Microsoft.Practices.SharePoint.Common.Logging.ITraceLogger">
            <summary>
            Interface for classes that log to the trace log.
            
            This interface is primarily used to be able to register an <see cref="T:Microsoft.Practices.SharePoint.Common.Logging.ITraceLogger"/> in the service locator.
            </summary>
        </member>
        <member name="M:Microsoft.Practices.SharePoint.Common.Logging.ITraceLogger.Trace(System.String,System.Int32,Microsoft.SharePoint.Administration.TraceSeverity,System.String)">
            <summary>
            Log a message with specified <paramref name="message"/>, <paramref name="eventId"/>, <paramref name="severity"/>
            and <paramref name="category"/>.
            </summary>
            <param name="message">The message to write into the log.</param>
            <param name="eventId">
            The eventId that corresponds to the event.
            </param>
            <param name="severity">How serious the event is. </param>
            <param name="category">The category of the log message.</param>
        </member>
        <member name="M:Microsoft.Practices.SharePoint.Common.Logging.ITraceLogger.Trace(System.String,System.Int32,System.String)">
            <summary>
            Log a message with specified <paramref name="message"/>, <paramref name="eventId"/>, 
            and <paramref name="category"/> using the default severity for the category.
            </summary>
            <param name="message">The message to write into the log.</param>
            <param name="eventId">
            The eventId that corresponds to the event.
            </param>
            <param name="category">The category of the log message.</param>
        </member>
        <member name="M:Microsoft.Practices.SharePoint.Common.Logging.TraceLogger.Trace(System.String,System.Int32,Microsoft.SharePoint.Administration.TraceSeverity,System.String)">
            <summary>
            Write messages into the SharePoint ULS. 
            </summary>
            <param name="message">The message to write into the log.</param>
            <param name="eventId">The eventId that corresponds to the trace.</param>
            <param name="severity">How serious the trace is.</param>
            <param name="category">The category of the log message.</param>
        </member>
        <member name="M:Microsoft.Practices.SharePoint.Common.Logging.TraceLogger.Trace(System.String,System.Int32,System.String)">
            <summary>
            Write messages into the SharePoint ULS using the default severity for
            the category. 
            </summary>
            <param name="message">The message to write into the log.</param>
            <param name="eventId">The eventId that corresponds to the trace.</param>
            <param name="category">The category of the trace message.</param>
        </member>
        <member name="T:Microsoft.Practices.SharePoint.Common.Logging.DiagnosticsCategory">
            <summary>
            Class representing an area for diagnostic purpose.
            </summary>
        </member>
        <member name="F:Microsoft.Practices.SharePoint.Common.Logging.DiagnosticsCategory.DefaultEventSeverity">
            <summary>
            The default event severity for a diagnostics category
            </summary>
        </member>
        <member name="F:Microsoft.Practices.SharePoint.Common.Logging.DiagnosticsCategory.DefaultTraceSeverity">
            <summary>
            The default trace severity for a diagnostics category
            </summary>
        </member>
        <member name="M:Microsoft.Practices.SharePoint.Common.Logging.DiagnosticsCategory.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Practices.SharePoint.Common.Logging.DiagnosticsCategory"/> class.
            </summary>
        </member>
        <member name="M:Microsoft.Practices.SharePoint.Common.Logging.DiagnosticsCategory.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Practices.SharePoint.Common.Logging.DiagnosticsCategory"/> class.
            </summary>
            <param name="name">The name of the diagnostic category.</param>
        </member>
        <member name="M:Microsoft.Practices.SharePoint.Common.Logging.DiagnosticsCategory.#ctor(System.String,Microsoft.SharePoint.Administration.EventSeverity,Microsoft.SharePoint.Administration.TraceSeverity)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Practices.SharePoint.Common.Logging.DiagnosticsCategory"/> class.
            </summary>
            <param name="name">The name of the diagnostic category.</param>
            <param name="eventSeverity">The category's event severity.</param>
            <param name="traceSeverity">The category´s trace severity</param>
        </member>
        <member name="M:Microsoft.Practices.SharePoint.Common.Logging.DiagnosticsCategory.ToSPDiagnosticsCategory">
            <summary>
            Converts from <see cref="T:Microsoft.Practices.SharePoint.Common.Logging.DiagnosticsCategory"/> to <see cref="T:Microsoft.SharePoint.Administration.SPDiagnosticsCategory"/> instance.
            </summary>
            <returns></returns>
        </member>
        <member name="P:Microsoft.Practices.SharePoint.Common.Logging.DiagnosticsCategory.Id">
            <summary>
            The id of the diagnostic category
            </summary>
        </member>
        <member name="P:Microsoft.Practices.SharePoint.Common.Logging.DiagnosticsCategory.Name">
            <summary>
            The name of the diagnostic category
            </summary>
        </member>
        <member name="P:Microsoft.Practices.SharePoint.Common.Logging.DiagnosticsCategory.TraceSeverity">
            <summary>
            Gets or sets the trace severity.
            </summary>
        </member>
        <member name="P:Microsoft.Practices.SharePoint.Common.Logging.DiagnosticsCategory.EventSeverity">
            <summary>
            Gets or sets the event severity.
            </summary>
        </member>
        <member name="P:Microsoft.Practices.SharePoint.Common.Logging.DiagnosticsCategory.DefaultSPDiagnosticsCategory">
            <summary>
            Gets the default <see cref="T:Microsoft.SharePoint.Administration.SPDiagnosticsCategory"/> instance.
            </summary>
        </member>
        <member name="T:Microsoft.Practices.SharePoint.Common.Logging.DiagnosticsCategoryCollection">
            <summary>
            Category collection.
            </summary>
        </member>
        <member name="M:Microsoft.Practices.SharePoint.Common.Logging.DiagnosticsCategoryCollection.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Practices.SharePoint.Common.Logging.DiagnosticsCategoryCollection"/> class.
            </summary>
        </member>
        <member name="M:Microsoft.Practices.SharePoint.Common.Logging.DiagnosticsCategoryCollection.#ctor(System.Collections.Generic.IList{Microsoft.Practices.SharePoint.Common.Logging.DiagnosticsCategory})">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Practices.SharePoint.Common.Logging.DiagnosticsCategoryCollection"/> class.
            </summary>
            <param name="categories">The categories to set</param>
        </member>
        <member name="M:Microsoft.Practices.SharePoint.Common.Logging.DiagnosticsCategoryCollection.InsertItem(System.Int32,Microsoft.Practices.SharePoint.Common.Logging.DiagnosticsCategory)">
            <summary>
            Inserts a category into the collection.  Duplicate categories are not permitted.
            </summary>
            <param name="index">the index to insert at</param>
            <param name="item">the category to insert</param>
        </member>
        <member name="M:Microsoft.Practices.SharePoint.Common.Logging.DiagnosticsCategoryCollection.SetItem(System.Int32,Microsoft.Practices.SharePoint.Common.Logging.DiagnosticsCategory)">
            <summary>
            Sets the category at the index.  Duplicate categories are not permitted.
            </summary>
            <param name="index">The index to set at</param>
            <param name="item">The item to set</param>
        </member>
        <member name="P:Microsoft.Practices.SharePoint.Common.Logging.DiagnosticsCategoryCollection.Item(System.String)">
            <summary>
            string indexer for diagnostics category collection taking category name.
            </summary>
            <param name="categoryName">The name of the category in the index</param>
            <returns>The category if found, throws if no category found</returns>
        </member>
        <member name="T:Microsoft.Practices.SharePoint.Common.Logging.DiagnosticsAreaEventSource">
            <summary>
            Creates the event sources for configured diagnostic areas.
            </summary>
        </member>
        <member name="M:Microsoft.Practices.SharePoint.Common.Logging.DiagnosticsAreaEventSource.EnsureConfiguredAreasRegistered">
            <summary>
            Ensures that all configured DiagnosticAreas are registered as event sources.
            </summary>
        </member>
        <member name="M:Microsoft.Practices.SharePoint.Common.Logging.DiagnosticsAreaEventSource.RegisterAreas(Microsoft.Practices.SharePoint.Common.Logging.DiagnosticsAreaCollection)">
            <summary>
            Takes all the configured areas and set them as event sources.
            </summary>
        </member>
        <member name="T:Microsoft.Practices.SharePoint.Common.Configuration.ConfigurationList">
            <summary>
            Manages creation of the configuration list, and getting/setting values to the configuration list.
            Used by list based property bags.
            </summary>
        </member>
        <member name="F:Microsoft.Practices.SharePoint.Common.Configuration.ConfigurationList.ConfigListName">
            <summary>
            The name of the list to store configuration
            </summary>
        </member>
        <member name="F:Microsoft.Practices.SharePoint.Common.Configuration.ConfigurationList.ConfigListTitle">
            <summary>
            The title of the list to store configuration
            </summary>
        </member>
        <member name="F:Microsoft.Practices.SharePoint.Common.Configuration.ConfigurationList.ConfigKeyField">
            <summary>
            The name of the field that holds the configuration key
            </summary>
        </member>
        <member name="F:Microsoft.Practices.SharePoint.Common.Configuration.ConfigurationList.ConfigValueField">
            <summary>
            The name of the field that holds the configuration value
            </summary>
        </member>
        <member name="F:Microsoft.Practices.SharePoint.Common.Configuration.ConfigurationList.TitleField">
            <summary>
            The name of the title field
            </summary>
        </member>
        <member name="F:Microsoft.Practices.SharePoint.Common.Configuration.ConfigurationList.WebIdField">
            <summary>
            The name of the field that contains the unique id associated with the web that owns the config
            </summary>
        </member>
        <member name="F:Microsoft.Practices.SharePoint.Common.Configuration.ConfigurationList.PNPContentTypeGroup">
            <summary>
            The name of the content type group to add this content type to for the config list.
            </summary>
        </member>
        <member name="F:Microsoft.Practices.SharePoint.Common.Configuration.ConfigurationList.ConfigContentTypeName">
            <summary>
            The name of the content type created for defining configuratio ndata.
            </summary>
        </member>
        <member name="F:Microsoft.Practices.SharePoint.Common.Configuration.ConfigurationList.SettingKeyFieldId">
            <summary>
            The GUID ID for the field holding the configuration key
            </summary>
        </member>
        <member name="F:Microsoft.Practices.SharePoint.Common.Configuration.ConfigurationList.SettingValueFieldId">
            <summary>
            The GUID ID for the field holding the configuration value.
            </summary>
        </member>
        <member name="F:Microsoft.Practices.SharePoint.Common.Configuration.ConfigurationList.SettingWebIdFieldId">
            <summary>
            The ID for the field holding the unique ID for the web for the config item.
            </summary>
        </member>
        <member name="F:Microsoft.Practices.SharePoint.Common.Configuration.ConfigurationList.ConfigurationContentTypeId">
            <summary>
            The unique ID for the content type for the configuration list.
            </summary>
        </member>
        <member name="F:Microsoft.Practices.SharePoint.Common.Configuration.ConfigurationList.SettingWebIdFieldDefXml">
            <summary>
            The CAML definition fo the web ID site column.
            </summary>
        </member>
        <member name="F:Microsoft.Practices.SharePoint.Common.Configuration.ConfigurationList.SettingKeyFieldDefXml">
            <summary>
            The CAML for creating the setting key site column.
            </summary>
        </member>
        <member name="F:Microsoft.Practices.SharePoint.Common.Configuration.ConfigurationList.SettingValueFieldDefXml">
            <summary>
            The CAML for creating the setting value site column.
            </summary>
        </member>
        <member name="M:Microsoft.Practices.SharePoint.Common.Configuration.ConfigurationList.GetList(Microsoft.SharePoint.SPSite)">
            <summary>
            Gets the list for the configuration from the root web of a site.
            </summary>
            <param name="site">The site to get the config list for</param>
            <returns>The list instance for configuration</returns>
        </member>
        <member name="M:Microsoft.Practices.SharePoint.Common.Configuration.ConfigurationList.#ctor(Microsoft.SharePoint.SPSite)">
            <summary>
            Change to take SPSite.
            </summary>
            <param name="site">The site to load the configuration list for</param>
        </member>
        <member name="M:Microsoft.Practices.SharePoint.Common.Configuration.ConfigurationList.EnsureConfigurationList(Microsoft.SharePoint.SPSite)">
            <summary>
            Ensures the configuration list is created for the site provided.  Checks if the list
            and all related content types and site columns are created, and creates them if they do
            not exist.
            </summary>
            <param name="site">The site to ensure the existance of the config list for</param>
        </member>
        <member name="M:Microsoft.Practices.SharePoint.Common.Configuration.ConfigurationList.ContainsKey(System.String,System.String)">
            <summary>
            Checks if a key is in the list for the context ID provided.  
            </summary>
            <param name="key">The name of the key to check for</param>
            <param name="contextId">The ID that is unique for the configuration context, for example the ID of an SPWeb</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Practices.SharePoint.Common.Configuration.ConfigurationList.Save(System.String,System.String,System.String)">
            <summary>
            Saves they value for the key provided for the given context into the configuration list.
            </summary>
            <param name="key">The key to save</param>
            <param name="value">The value to save</param>
            <param name="contextId">The ID that is unique for the configuration context, for example the ID of a SPWeb</param>
        </member>
        <member name="M:Microsoft.Practices.SharePoint.Common.Configuration.ConfigurationList.Remove(System.String,System.String)">
            <summary>
            Removes the setting for the key and context ID provided.
            </summary>
            <param name="key">The key of the configuration item to remove</param>
            <param name="contextId">The ID that is unique for the configuration context, for example the ID of a SPWeb</param>
        </member>
        <member name="M:Microsoft.Practices.SharePoint.Common.Configuration.ConfigurationList.Get(System.String,System.String)">
            <summary>
            Gets the value of a setting for the key and context provided.
            </summary>
            <param name="key">The key for the setting</param>
            <param name="contextId">The ID that is unique for the configuration context, for example the ID of a SPWeb</param>
            <returns>The item retrieved, null if no item existed</returns>
        </member>
        <member name="P:Microsoft.Practices.SharePoint.Common.Configuration.ConfigurationList.ListInstance">
            <summary>
            Gets the configuration list instance.
            </summary>
        </member>
        <member name="T:Microsoft.Practices.SharePoint.Common.ServiceLocation.InstantiationType">
            <summary>
            Determines how to instantiate objects from the service locator
            </summary>
        </member>
        <member name="F:Microsoft.Practices.SharePoint.Common.ServiceLocation.InstantiationType.NewInstanceForEachRequest">
            <summary>
            Create a new instance for each call to <see cref="M:Microsoft.Practices.ServiceLocation.IServiceLocator.GetInstance(System.Type)"/>. 
            </summary>
        </member>
        <member name="F:Microsoft.Practices.SharePoint.Common.ServiceLocation.InstantiationType.AsSingleton">
            <summary>
            Create a singleton instance. Each call to <see cref="M:Microsoft.Practices.ServiceLocation.IServiceLocator.GetInstance(System.Type)"/> will return the same instance.
            </summary>
        </member>
        <member name="T:Microsoft.Practices.SharePoint.Common.ServiceLocation.ActivatingServiceLocator">
            <summary>
            Class that provides basic service location functionality to an application. It uses System.Activator to create new instances.
            You can use this class to decouple classes from each other. A class only needs to know the interface of
            the services it needs to consume. This class will find and return the corresponding implementation for
            that interface.
            It implements the IServiceLocator interface as defined in the Common Service Locator project.
            </summary>
        </member>
        <member name="M:Microsoft.Practices.SharePoint.Common.ServiceLocation.ActivatingServiceLocator.DoGetInstance(System.Type,System.String)">
            <summary>
            This method will do the actual work of resolving the requested service instance.
            </summary>
            <param name="serviceType">Type of instance requested.</param>
            <param name="key">Name of registered service you want. May be null.</param>
            <returns>The requested service instance.</returns>
        </member>
        <member name="M:Microsoft.Practices.SharePoint.Common.ServiceLocation.ActivatingServiceLocator.CreateInstanceFromTypeMapping(Microsoft.Practices.SharePoint.Common.ServiceLocation.TypeMapping)">
            <summary>
            Create an instance of an object from a type mapping. An instance of type <see cref="P:Microsoft.Practices.SharePoint.Common.ServiceLocation.TypeMapping.ToType"/> will
            be instantiated. 
            </summary>
            <param natme="typeMapping">The type mapping to use to create the instance. </param>
            <returns>The created instance. </returns>
        </member>
        <member name="M:Microsoft.Practices.SharePoint.Common.ServiceLocation.ActivatingServiceLocator.DoGetAllInstances(System.Type)">
            <summary>
            This method will do the actual work of resolving all the requested service instances for a particular type.
            </summary>
            <param name="serviceType">Type of service requested.</param>
            <returns>Sequence of service instance objects.</returns>
        </member>
        <member name="M:Microsoft.Practices.SharePoint.Common.ServiceLocation.ActivatingServiceLocator.RegisterTypeMapping``2">
            <summary>
            Register a type mapping between two types. When asking for a TFrom, an instance of TTo is returned.
            </summary>
            <typeparam name="TFrom">The type that can be requested.</typeparam>
            <typeparam name="TTo">The type of object that should be returned when asking for a type.</typeparam>
            <returns>The service locator to make it easier to add multiple type mappings</returns>
        </member>
        <member name="M:Microsoft.Practices.SharePoint.Common.ServiceLocation.ActivatingServiceLocator.RegisterTypeMapping``2(Microsoft.Practices.SharePoint.Common.ServiceLocation.InstantiationType)">
            <summary>
            Register a type mapping between TFrom and TTo with key (null). When <see cref="M:Microsoft.Practices.ServiceLocation.IServiceLocator.GetInstance(System.Type)"/> with
            parameter TFrom is called, an instance of type TTO is returned. 
            </summary>
            <typeparam name="TFrom">The type to register type mappings for. </typeparam>
            <typeparam name="TTo">The type to create if <see cref="M:Microsoft.Practices.ServiceLocation.IServiceLocator.GetInstance(System.Type)"/> is called with TFrom. </typeparam>
            <param name="instantiationType">Determines how the type should be created. </param>
            <returns>The service locator to make it easier to add multiple type mappings</returns>
        </member>
        <member name="M:Microsoft.Practices.SharePoint.Common.ServiceLocation.ActivatingServiceLocator.RegisterTypeMapping``2(System.String,Microsoft.Practices.SharePoint.Common.ServiceLocation.InstantiationType)">
            <summary>
            Register a type mapping between TFrom and TTo with specified key. When <see cref="M:Microsoft.Practices.ServiceLocation.IServiceLocator.GetInstance(System.Type)"/> with
            parameter TFrom is called, an instance of type TTO is returned. 
            </summary>
            <typeparam name="TFrom">The type to register type mappings for. </typeparam>
            <typeparam name="TTo">The type to create if <see cref="M:Microsoft.Practices.ServiceLocation.IServiceLocator.GetInstance(System.Type)"/> is called with TFrom. </typeparam>
            <param name="instantiationType">Determines how the type should be created. </param>
            <param name="key">The key that's used to store the type mapping.</param>
            <returns>The service locator to make it easier to add multiple type mappings</returns>
        </member>
        <member name="M:Microsoft.Practices.SharePoint.Common.ServiceLocation.ActivatingServiceLocator.RegisterTypeMapping``2(System.String)">
            <summary>
            Register a type mapping between TFrom and TTo with specified key. When <see cref="M:Microsoft.Practices.ServiceLocation.IServiceLocator.GetInstance(System.Type)"/> with
            parameter TFrom is called, an instance of type TTO is returned. 
            </summary>
            <typeparam name="TFrom">The type to register type mappings for. </typeparam>
            <typeparam name="TTo">The type to create if <see cref="M:Microsoft.Practices.ServiceLocation.IServiceLocator.GetInstance(System.Type)"/> is called with TFrom. </typeparam>
            <param name="key">The key that's used to store the type mapping.</param>
            <returns>The service locator to make it easier to add multiple type mappings</returns>
        </member>
        <member name="M:Microsoft.Practices.SharePoint.Common.ServiceLocation.ActivatingServiceLocator.RegisterTypeMapping(System.Type,System.Type)">
            <summary>
            Register a type mapping between fromType and toType with specified key. When <see cref="M:Microsoft.Practices.ServiceLocation.IServiceLocator.GetInstance(System.Type)"/> with
            parameter TFrom is called, an instance of type TTO is returned.
            </summary>
            <param name="fromType">The type to register type mappings for. </param>
            <param name="toType">The type to create if <see cref="M:Microsoft.Practices.ServiceLocation.IServiceLocator.GetInstance(System.Type)"/> is called with fromType. </param>
            <returns>The service locator to make it easier to add multiple type mappings</returns>
        </member>
        <member name="M:Microsoft.Practices.SharePoint.Common.ServiceLocation.ActivatingServiceLocator.RegisterTypeMapping(System.Type,System.Type,System.String,Microsoft.Practices.SharePoint.Common.ServiceLocation.InstantiationType)">
            <summary>
            Register a type mapping between fromType and toType with specified key. When <see cref="M:Microsoft.Practices.ServiceLocation.IServiceLocator.GetInstance(System.Type)"/> with
            parameter TFrom is called, an instance of type TTO is returned.
            </summary>
            <param name="fromType">The type to register type mappings for. </param>
            <param name="toType">The type to create if <see cref="M:Microsoft.Practices.ServiceLocation.IServiceLocator.GetInstance(System.Type)"/> is called with fromType. </param>
            <param name="key">The key that's used to store the type mapping.</param>
            <param name="instantiationType">Determines how the type should be created. </param>
            <returns>The service locator to make it easier to add multiple type mappings</returns>
        </member>
        <member name="M:Microsoft.Practices.SharePoint.Common.ServiceLocation.ActivatingServiceLocator.RegisterTypeMapping(Microsoft.Practices.SharePoint.Common.ServiceLocation.TypeMapping)">
            <summary>
            Registers a type mapping.
            </summary>
            <param name="mapping">The mapping to register.</param>
            <returns>The service locator to make it easier to add multiple type mappings</returns>
        </member>
        <member name="M:Microsoft.Practices.SharePoint.Common.ServiceLocation.ActivatingServiceLocator.IsTypeRegistered``1">
            <summary>
            Determines if a type mapping is registered. 
            </summary>
            <typeparam name="TService">The type of the service.</typeparam>
            <returns>True if the type mapping is registered. Else false. </returns>
        </member>
        <member name="M:Microsoft.Practices.SharePoint.Common.ServiceLocation.ActivatingServiceLocator.IsTypeRegistered(System.Type)">
            <summary>
            Determines if a type mapping is registered. 
            </summary>
            <param name="t">The type of the service.</param>
            <returns>True if the type mapping is registered. Else false. </returns>
        </member>
        <member name="M:Microsoft.Practices.SharePoint.Common.ServiceLocation.ActivatingServiceLocator.IsTypeRegistered``1(System.String)">
            <summary>
            Determines if a type mapping is registered. 
            </summary>
            <typeparam name="TService">The type of the service.</typeparam>
            <param name="key">The key for the type mapping</param>
            <returns>True if the type mapping is registered. Else false. </returns>
        </member>
        <member name="M:Microsoft.Practices.SharePoint.Common.ServiceLocation.ActivatingServiceLocator.IsTypeRegistered(System.Type,System.String)">
            <summary>
            Determines if a type mapping is registered. 
            </summary>
            <param name="t">The type of the service.</param>
            <param name="key">The key for the type mapping</param>
            <returns>True if the type mapping is registered. Else false. </returns>
        </member>
        <member name="M:Microsoft.Practices.SharePoint.Common.ServiceLocation.ActivatingServiceLocator.GetTypeMappings">
            <summary>
            Gets the list of type mappings the service locator instance manages.
            </summary>
            <returns>An enumeration of the type mappings the service locator posesses</returns>
        </member>
        <member name="M:Microsoft.Practices.SharePoint.Common.ServiceLocation.ActivatingServiceLocator.Refresh(System.Collections.Generic.IEnumerable{Microsoft.Practices.SharePoint.Common.ServiceLocation.TypeMapping},System.Collections.Generic.IEnumerable{Microsoft.Practices.SharePoint.Common.ServiceLocation.TypeMapping},System.Collections.Generic.IEnumerable{Microsoft.Practices.SharePoint.Common.ServiceLocation.TypeMapping},System.Collections.Generic.IEnumerable{Microsoft.Practices.SharePoint.Common.ServiceLocation.TypeMapping})">
            <summary>
            Refreshes the services for a service locator.  The default configuration and farm configuration
            settings are merged with the site config settings.  Programmatically added mappings are preserved.
            </summary>
            <param name="defaultConfig">The default configuration type mappings</param>
            <param name="farmConfig">The farm level configured type mappings</param>
            <param name="siteConfig">The previous site level configured type mappings</param>
            <param name="newSiteMappings">The new site level type mappings</param>
        </member>
        <member name="E:Microsoft.Practices.SharePoint.Common.ServiceLocation.ActivatingServiceLocator.MappingRegisteredEvent">
            <summary>
            The event that is signalled when a new type mapping is registered.
            </summary>
        </member>
        <member name="T:Microsoft.Practices.SharePoint.Common.ProxyArgs.ReadConfigArgs">
            <summary>
            The arguments for reading configuration arguments.
            </summary>
        </member>
        <member name="M:Microsoft.Practices.SharePoint.Common.ProxyArgs.ReadConfigArgs.#ctor">
            <summary>
            The constructor for read config args.
            </summary>
        </member>
        <member name="P:Microsoft.Practices.SharePoint.Common.ProxyArgs.ReadConfigArgs.Key">
            <summary>
            The key for the setting to read.
            </summary>
        </member>
        <member name="P:Microsoft.Practices.SharePoint.Common.ProxyArgs.ReadConfigArgs.Level">
            <summary>
            The level for reading the config key.
            </summary>
        </member>
        <member name="P:Microsoft.Practices.SharePoint.Common.ProxyArgs.ReadConfigArgs.SiteId">
            <summary>
            The ID of the site is the child of the web app or farm to read config for.
            </summary>
        </member>
        <member name="P:Microsoft.Practices.SharePoint.Common.ProxyArgs.ReadConfigArgs.OperationAssemblyName">
            <summary>
            The name of the assembly containg the read config operation.
            </summary>
        </member>
        <member name="P:Microsoft.Practices.SharePoint.Common.ProxyArgs.ReadConfigArgs.OperationTypeName">
            <summary>
            The type of the operation for reading config.
            </summary>
        </member>
        <member name="T:Microsoft.Practices.SharePoint.Common.Configuration.SPWebConfigModificationHelper">
            <summary>
            Class that helps in creating Web.Config modifications. 
            </summary>
        </member>
        <member name="M:Microsoft.Practices.SharePoint.Common.Configuration.SPWebConfigModificationHelper.CreateAndAddWebConfigModification(System.Collections.Generic.IList{Microsoft.SharePoint.Administration.SPWebConfigModification},System.String,System.String,Microsoft.SharePoint.Administration.SPWebConfigModification.SPWebConfigModificationType,System.String,System.String)">
            <summary>
            Create and add an SPWebConfigModification to a list of modifications.
            </summary>
            <param name="modifications">The list to add the created webconfigmodification to.</param>
            <param name="name">The name of the modification.</param>
            <param name="xpath">The XPath expression to apply the config change to. </param>
            <param name="type">The type of modification to make.</param>
            <param name="value">The value of the modification. This is the Xml fragment to change or update</param>
            <param name="owner">
            The owner of the modification. This value is used by <see cref="M:Microsoft.Practices.SharePoint.Common.Configuration.SPWebConfigModificationHelper.CleanUpWebConfigModifications(Microsoft.SharePoint.Administration.SPWebApplication,System.String)"/> to remove the modifications again. Typically
            this field is the name of the assembly that is making the modifications. 
             </param>
        </member>
        <member name="M:Microsoft.Practices.SharePoint.Common.Configuration.SPWebConfigModificationHelper.CleanUpWebConfigModifications(Microsoft.SharePoint.Administration.SPWebApplication,System.String)">
            <summary>
             Remove web.config modifications from the Web application, based on the owner field.
            </summary>
            <param name="webApp">The Web Application that holds the SPWebConfigModifications to remove.</param>
            <param name="owner">The owner of the webconfigmodifications. </param>
        </member>
        <member name="T:Microsoft.Practices.SharePoint.Common.Configuration.SPWebAppPropertyBag">
            <summary>
            Provides a property bag for a web application based upon the SPWebApplication property bag. 
            </summary>
        </member>
        <member name="M:Microsoft.Practices.SharePoint.Common.Configuration.SPWebAppPropertyBag.ClearCache">
            <summary>
            For internal use, clears the cached setting store data
            </summary>
        </member>
        <member name="M:Microsoft.Practices.SharePoint.Common.Configuration.SPWebAppPropertyBag.Reset">
            <summary>
            Forces the property bag to reload settings on next access.
            </summary>
        </member>
        <member name="M:Microsoft.Practices.SharePoint.Common.Configuration.SPWebAppPropertyBag.#ctor(Microsoft.SharePoint.Administration.SPWebApplication)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Practices.SharePoint.Common.Configuration.SPWebAppPropertyBag"/> class.
            </summary>
            <param name="webApplication">The Web Application.</param>
        </member>
        <member name="M:Microsoft.Practices.SharePoint.Common.Configuration.SPWebAppPropertyBag.Contains(System.String)">
            <summary>
            Does a specific key exist in the PropertyBag.
            </summary>
            <param name="key">the key to check.</param>
            <returns>true if the key exists, else false.</returns>
        </member>
        <member name="M:Microsoft.Practices.SharePoint.Common.Configuration.SPWebAppPropertyBag.Remove(System.String)">
            <summary>
            Remove a particular config setting from this property bag.
            </summary>
            <param name="key">The key to remove</param>
        </member>
        <member name="P:Microsoft.Practices.SharePoint.Common.Configuration.SPWebAppPropertyBag.Level">
            <summary>
            The config level this property bag operates on. Returns <see cref="F:Microsoft.Practices.SharePoint.Common.Configuration.ConfigLevel.CurrentSPWebApplication"/>.
            </summary>
        </member>
        <member name="P:Microsoft.Practices.SharePoint.Common.Configuration.SPWebAppPropertyBag.Item(System.String)">
            <summary>
            Gets or sets a value based on the key. If the value is not defined in this PropertyBag, it will look in it's
            parent property bag.
            </summary>
            <value></value>
            <returns>The config value defined in the property bag. </returns>
        </member>
        <member name="T:Microsoft.Practices.SharePoint.Common.Configuration.SPSitePropertyBag">
            <summary>
            A property bag for a site. Uses the property bag on the root web to store configuration values.
            </summary>
        </member>
        <member name="T:Microsoft.Practices.SharePoint.Common.Configuration.SPWebPropertyBag">
            <summary>
            A property bag to store settings for the web using the SPWeb property bag. 
            </summary>
        </member>
        <member name="M:Microsoft.Practices.SharePoint.Common.Configuration.SPWebPropertyBag.#ctor(Microsoft.SharePoint.SPWeb)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Practices.SharePoint.Common.Configuration.SPWebPropertyBag"/> class.
            </summary>
            <param name="web">The SPWeb associated with this property bag.</param>
        </member>
        <member name="M:Microsoft.Practices.SharePoint.Common.Configuration.SPWebPropertyBag.Contains(System.String)">
            <summary>
            Does a specific key exist in the PropertyBag.  
            </summary>
            <param name="key">the key to check.</param>
            <returns>true if the key exists, else false.</returns>
        </member>
        <member name="M:Microsoft.Practices.SharePoint.Common.Configuration.SPWebPropertyBag.Update">
            <summary>
            Save any changes made to this PropertyBag.
            </summary>
        </member>
        <member name="M:Microsoft.Practices.SharePoint.Common.Configuration.SPWebPropertyBag.Remove(System.String)">
            <summary>
            Remove a particular config setting from this property bag.
            </summary>
            <param name="key">The key to remove</param>
        </member>
        <member name="M:Microsoft.Practices.SharePoint.Common.Configuration.SPWebPropertyBag.BuildKey(System.String)">
            <summary>
            Allow derived classes to change the key that's used
            </summary>
            <param name="key">The key to build</param>
            <returns>the key provided</returns>
        </member>
        <member name="P:Microsoft.Practices.SharePoint.Common.Configuration.SPWebPropertyBag.web">
            <summary>
            The SPWeb that's wrapped by this property bag. 
            </summary>
        </member>
        <member name="P:Microsoft.Practices.SharePoint.Common.Configuration.SPWebPropertyBag.Level">
            <summary>
            The config level this PropertyBag represents.
            </summary>
            <value></value>
        </member>
        <member name="P:Microsoft.Practices.SharePoint.Common.Configuration.SPWebPropertyBag.Item(System.String)">
            <summary>
            Gets or sets a value based on the key. 
            </summary>
            <returns>The config value defined in the property bag. </returns>
        </member>
        <member name="F:Microsoft.Practices.SharePoint.Common.Configuration.SPSitePropertyBag.KeySuffix">
            <summary>
            The prefix that's used by the SPSitePropertyBag to differentiate key's between SPSite settings and
            settings for the RootWeb. 
            </summary>
        </member>
        <member name="M:Microsoft.Practices.SharePoint.Common.Configuration.SPSitePropertyBag.#ctor(Microsoft.SharePoint.SPSite)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Practices.SharePoint.Common.Configuration.SPSitePropertyBag"/> class.
            </summary>
            <param name="site">The site.</param>
        </member>
        <member name="M:Microsoft.Practices.SharePoint.Common.Configuration.SPSitePropertyBag.BuildKey(System.String)">
            <summary>
            Changes the key to make sure that the items stored at rootweb level don't override
            the items at the current Web level. This can otherwise occur if the root Web == the current Web. 
            </summary>
            <param name="key">The key provided</param>
            <returns>A transformed key to differentiate site from web level settings</returns>
        </member>
        <member name="P:Microsoft.Practices.SharePoint.Common.Configuration.SPSitePropertyBag.Level">
            <summary>
            Gets The config level that this SPSitePropertyBag operates on. Returns <see cref="F:Microsoft.Practices.SharePoint.Common.Configuration.ConfigLevel.CurrentSPSite"/>.
            </summary>
        </member>
        <member name="T:Microsoft.Practices.SharePoint.Common.Configuration.SandboxFarmPropertyBag">
            <summary>
            A property bag for reading farm configuration settings from
            the sandbox.  Write operation are not permitted.
            </summary>
        </member>
        <member name="M:Microsoft.Practices.SharePoint.Common.Configuration.SandboxFarmPropertyBag.Contains(System.String)">
            <summary>
            Checks if a key is in the property bag.
            </summary>
            <param name="key">The key to check for</param>
            <returns><c>true</c> if the key is found, <c>false</c> otherwise</returns>
        </member>
        <member name="M:Microsoft.Practices.SharePoint.Common.Configuration.SandboxFarmPropertyBag.Remove(System.String)">
            <summary>
            Removes a setting from the property bag.  Always throws an InvalidOperationException since
            writes are not permitted to the farm from the sandbox.
            </summary>
            <param name="key">the key for the setting to remove from the property bag</param>
        </member>
        <member name="P:Microsoft.Practices.SharePoint.Common.Configuration.SandboxFarmPropertyBag.Item(System.String)">
            <summary>
            Indexer for getting and setting values for the key specified.  Setting values at the farm level will always
            result in a InvalidOperationException.
            </summary>
            <param name="key">The key to check for in the property bag</param>
            <returns>The value for the key, null if not found</returns>
        </member>
        <member name="P:Microsoft.Practices.SharePoint.Common.Configuration.SandboxFarmPropertyBag.Level">
            <summary>
            The configuration level for this property bag, always returns ConfigLevel.CurrentSPFarm.
            </summary>
        </member>
        <member name="T:Microsoft.Practices.SharePoint.Common.Configuration.ConfigurationException">
            <summary>
            Exception that indicates that there is a problem with the  configuration. 
            </summary>
        </member>
        <member name="M:Microsoft.Practices.SharePoint.Common.Configuration.ConfigurationException.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Practices.SharePoint.Common.Configuration.ConfigurationException"/> class.
            </summary>
        </member>
        <member name="M:Microsoft.Practices.SharePoint.Common.Configuration.ConfigurationException.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Practices.SharePoint.Common.Configuration.ConfigurationException"/> class.
            </summary>
            <param name="message">The message.</param>
        </member>
        <member name="M:Microsoft.Practices.SharePoint.Common.Configuration.ConfigurationException.#ctor(System.String,System.Exception)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Practices.SharePoint.Common.Configuration.ConfigurationException"/> class.
            </summary>
            <param name="message">The message.</param>
            <param name="inner">The inner.</param>
        </member>
        <member name="M:Microsoft.Practices.SharePoint.Common.Configuration.ConfigurationException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Practices.SharePoint.Common.Configuration.ConfigurationException"/> class.
            </summary>
            <param name="info">The <see cref="T:System.Runtime.Serialization.SerializationInfo"/> that holds the serialized object data about the exception being thrown.</param>
            <param name="context">The <see cref="T:System.Runtime.Serialization.StreamingContext"/> that contains contextual information about the source or destination.</param>
            <exception cref="T:System.ArgumentNullException">The <paramref name="info"/> parameter is null. </exception>
            <exception cref="T:System.Runtime.Serialization.SerializationException">The class name is null or <see cref="P:System.Exception.HResult"/> is zero (0). </exception>
        </member>
        <member name="T:Microsoft.Practices.SharePoint.Common.Validation">
            <summary>
            A static helper class that includes various parameter checking routines.
            </summary>
        </member>
        <member name="M:Microsoft.Practices.SharePoint.Common.Validation.ArgumentNotNull(System.Object,System.String)">
            <summary>
            Throws <see cref="T:System.ArgumentNullException"/> if the given argument is null.
            </summary>
            <exception cref="T:System.ArgumentNullException"> if tested value if null.</exception>
            <param name="argumentValue">Argument value to test.</param>
            <param name="argumentName">Name of the argument being tested.</param>
        </member>
        <member name="M:Microsoft.Practices.SharePoint.Common.Validation.ArgumentNotNullOrEmpty(System.String,System.String)">
            <summary>
            Throws an exception if the tested string argument is null or the empty string.
            </summary>
            <exception cref="T:System.ArgumentNullException">Thrown if string value is null.</exception>
            <exception cref="T:System.ArgumentException">Thrown if the string is empty</exception>
            <param name="argumentValue">Argument value to check.</param>
            <param name="argumentName">Name of argument being checked.</param>
        </member>
        <member name="M:Microsoft.Practices.SharePoint.Common.Validation.TypeIsAssignable(System.Type,System.Type,System.String)">
            <summary>
            Verifies that an argument type is assignable from the provided type (meaning
            interfaces are implemented, or classes exist in the base class hierarchy).
            </summary>
            <param name="assignmentTargetType">The argument type that will be assigned to.</param>
            <param name="assignmentValueType">The type of the value being assigned.</param>
            <param name="argumentName">Argument name.</param>
        </member>
        <member name="T:Microsoft.Practices.SharePoint.Common.ServiceLocation.TypeMappingChangedArgs">
            <summary>
            Event args to use to notify a tpye mapping has changed for a service locator
            (added programmatically)
            </summary>
        </member>
        <member name="P:Microsoft.Practices.SharePoint.Common.ServiceLocation.TypeMappingChangedArgs.Mapping">
            <summary>
            The details about the changed type mapping.
            </summary>
        </member>
        <member name="T:Microsoft.Practices.SharePoint.Common.ProxyArgs.ProxyInstalledArgs">
            <summary>
            The proxy args for determining if a proxy is installed.
            </summary>
        </member>
        <member name="M:Microsoft.Practices.SharePoint.Common.ProxyArgs.ProxyInstalledArgs.#ctor">
            <summary>
            Constructs a proxy installed argument instance.
            </summary>
        </member>
        <member name="P:Microsoft.Practices.SharePoint.Common.ProxyArgs.ProxyInstalledArgs.AssemblyName">
            <summary>
            The name of the assemlby to check if the proxy operation is installed.
            </summary>
        </member>
        <member name="P:Microsoft.Practices.SharePoint.Common.ProxyArgs.ProxyInstalledArgs.TypeName">
            <summary>
            The type name of the proxy operation to check if the proxy operation is installed.
            </summary>
        </member>
        <member name="P:Microsoft.Practices.SharePoint.Common.ProxyArgs.ProxyInstalledArgs.OperationAssemblyName">
            <summary>
            The assembly containing the operation to determine if the proxy operation is installed.
            </summary>
        </member>
        <member name="P:Microsoft.Practices.SharePoint.Common.ProxyArgs.ProxyInstalledArgs.OperationTypeName">
            <summary>
            The type name for the operation to use to determine if a proxy is installed.
            </summary>
        </member>
        <member name="T:Microsoft.Practices.SharePoint.Common.ProxyArgs.ContainsKeyDataArgs">
            <summary>
            The arguments for calling the full trust proxy to determine if a web app
            or a farm config setting exists.
            </summary>
        </member>
        <member name="M:Microsoft.Practices.SharePoint.Common.ProxyArgs.ContainsKeyDataArgs.#ctor">
            <summary>
            The constructor for the arguments to pass to the full trust proxy for 
            configuration reading.
            </summary>
        </member>
        <member name="P:Microsoft.Practices.SharePoint.Common.ProxyArgs.ContainsKeyDataArgs.Key">
            <summary>
            The key to check
            </summary>
        </member>
        <member name="P:Microsoft.Practices.SharePoint.Common.ProxyArgs.ContainsKeyDataArgs.Level">
            <summary>
            The level for the key to check.
            </summary>
        </member>
        <member name="P:Microsoft.Practices.SharePoint.Common.ProxyArgs.ContainsKeyDataArgs.SiteId">
            <summary>
            The ID of the site associated with the web application or farm.
            </summary>
        </member>
        <member name="P:Microsoft.Practices.SharePoint.Common.ProxyArgs.ContainsKeyDataArgs.OperationAssemblyName">
            <summary>
            The name of the assembly for the proxy operation.
            </summary>
        </member>
        <member name="P:Microsoft.Practices.SharePoint.Common.ProxyArgs.ContainsKeyDataArgs.OperationTypeName">
            <summary>
            The name of the type for the proxy operation.
            </summary>
        </member>
        <member name="T:Microsoft.Practices.SharePoint.Common.Logging.SandboxTraceSeverity">
            <summary>
            Represents equivalent trace servities to SharePoint for use in the sandbox
            since TraceSeverity enum can't be accessed from the sandbox.
            </summary>
        </member>
        <member name="F:Microsoft.Practices.SharePoint.Common.Logging.SandboxTraceSeverity.High">
            <summary>
            Writes high-level detail to the trace log file.
            </summary>
        </member>
        <member name="F:Microsoft.Practices.SharePoint.Common.Logging.SandboxTraceSeverity.Medium">
            <summary>
            Writes medium-level detail to the trace log file
            </summary>
        </member>
        <member name="F:Microsoft.Practices.SharePoint.Common.Logging.SandboxTraceSeverity.Monitorable">
            <summary>
             Represents an unusual code path and actions that should be monitored.  
            </summary>
        </member>
        <member name="F:Microsoft.Practices.SharePoint.Common.Logging.SandboxTraceSeverity.None">
            <summary>
             Writes no trace information to the trace log file.  
            </summary>
        </member>
        <member name="F:Microsoft.Practices.SharePoint.Common.Logging.SandboxTraceSeverity.Unexpected">
            <summary>
             Represents an unexpected code path and actions that should be monitored.
            </summary>
        </member>
        <member name="F:Microsoft.Practices.SharePoint.Common.Logging.SandboxTraceSeverity.Verbose">
            <summary>
             Writes low-level detail to the trace log file.   
            </summary>
        </member>
        <member name="T:Microsoft.Practices.SharePoint.Common.ServiceLocation.IServiceLocatorFactory">
            <summary>
            Interface for classes that will create and configure service locators, in such a way that
            they can be used by the <see cref="T:Microsoft.Practices.SharePoint.Common.ServiceLocation.SharePointServiceLocator"/>. If you register
            an IServiceLocatorFactory in the <see cref="T:Microsoft.Practices.SharePoint.Common.ServiceLocation.ServiceLocatorConfig"/>, it will use that 
            factory to create the service locator instance. 
            </summary>
        </member>
        <member name="M:Microsoft.Practices.SharePoint.Common.ServiceLocation.IServiceLocatorFactory.Create">
            <summary>
            Create the <see cref="T:Microsoft.Practices.ServiceLocation.IServiceLocator"/>
            </summary>
            <returns>The created service locator</returns>
        </member>
        <member name="M:Microsoft.Practices.SharePoint.Common.ServiceLocation.IServiceLocatorFactory.LoadTypeMappings(Microsoft.Practices.ServiceLocation.IServiceLocator,System.Collections.Generic.IEnumerable{Microsoft.Practices.SharePoint.Common.ServiceLocation.TypeMapping})">
            <summary>
            Loads the type mappings into the service locator. 
            </summary>
            <param name="serviceLocator">The service locator to load type mappings into.</param>
            <param name="typeMappings">The type mappings to load</param>
        </member>
        <member name="T:Microsoft.Practices.SharePoint.Common.ServiceLocation.ActivatingServiceLocatorFactory">
            <summary>
            Class that will create an activating service locator and load it up with type mappings. 
            </summary>
        </member>
        <member name="M:Microsoft.Practices.SharePoint.Common.ServiceLocation.ActivatingServiceLocatorFactory.Create">
            <summary>
            Create the <see cref="T:Microsoft.Practices.ServiceLocation.IServiceLocator"/> and loads it with type mappings. 
            </summary>
            <returns>The created service locator</returns>
        </member>
        <member name="M:Microsoft.Practices.SharePoint.Common.ServiceLocation.ActivatingServiceLocatorFactory.LoadTypeMappings(Microsoft.Practices.ServiceLocation.IServiceLocator,System.Collections.Generic.IEnumerable{Microsoft.Practices.SharePoint.Common.ServiceLocation.TypeMapping})">
            <summary>
            Loads the type mappings.
            </summary>
            <param name="serviceLocator">The service locator.</param>
            <param name="typeMappings">The mappings.</param>
        </member>
        <member name="T:Microsoft.Practices.SharePoint.Common.Configuration.WebAppSettingStore">
            <summary>
            Stores values for the web application level settings
            </summary>
        </member>
        <member name="F:Microsoft.Practices.SharePoint.Common.Configuration.WebAppSettingStore.Settings">
            <summary>
            The settigns to store at the web application level.
            </summary>
        </member>
        <member name="M:Microsoft.Practices.SharePoint.Common.Configuration.WebAppSettingStore.#ctor">
            <summary>
            Required for serialization
            </summary>
        </member>
        <member name="M:Microsoft.Practices.SharePoint.Common.Configuration.WebAppSettingStore.#ctor(System.String,Microsoft.SharePoint.Administration.SPPersistedObject)">
            <summary>
            Required constructor by the SPPersistedObject base class.
            </summary>
            <param name="name">The name for the persisted object</param>
            <param name="parent">The parent of this persisted object</param>
        </member>
        <member name="M:Microsoft.Practices.SharePoint.Common.Configuration.WebAppSettingStore.Load(Microsoft.SharePoint.Administration.SPWebApplication)">
            <summary>
            Loads the setting store for the farm provided, and creates the setting store if not found.
            </summary>
            <param name="webApp">The farm to use</param>
            <returns>The setting store for farm level settings</returns>
        </member>
        <member name="M:Microsoft.Practices.SharePoint.Common.Configuration.WebAppSettingStore.Create(Microsoft.SharePoint.Administration.SPWebApplication)">
            <summary>
            Creates the setting store for a web application
            </summary>
            <param name="webApp">The parent web app to store the settings</param>
            <returns>The web app setting store instance</returns>
        </member>
        <member name="M:Microsoft.Practices.SharePoint.Common.Configuration.WebAppSettingStore.DeleteStore(Microsoft.SharePoint.Administration.SPWebApplication)">
            <summary>
            Removes the setting store.  Warning, all settings will be lost when removed.
            </summary>
            <param name="webApp">The web app to clear the settings for</param>
        </member>
        <member name="P:Microsoft.Practices.SharePoint.Common.Configuration.WebAppSettingStore.StoreName">
            <summary>
            The name for this persisted object.
            </summary>
        </member>
        <member name="P:Microsoft.Practices.SharePoint.Common.Configuration.WebAppSettingStore.DisplayName">
            <summary>
            The display name shown in admin for this persisted object.
            </summary>
        </member>
        <member name="T:Microsoft.Practices.SharePoint.Common.Configuration.SandboxWebAppPropertyBag">
            <summary>
            A read only property bag for use in the sandbox to access the web application settings.
            </summary>
        </member>
        <member name="M:Microsoft.Practices.SharePoint.Common.Configuration.SandboxWebAppPropertyBag.#ctor(System.Guid)">
            <summary>
            Constructs a web application property bag for the sandbox.
            </summary>
            <param name="siteId">The ID of the site that is associated with the web application</param>
        </member>
        <member name="M:Microsoft.Practices.SharePoint.Common.Configuration.SandboxWebAppPropertyBag.Contains(System.String)">
            <summary>
            Checks if the web application property bag contains the key specified.
            </summary>
            <param name="key">The key to check for.</param>
            <returns><c>true</c> if the property is in the bag, <c>false</c> otherwise</returns>
        </member>
        <member name="M:Microsoft.Practices.SharePoint.Common.Configuration.SandboxWebAppPropertyBag.Remove(System.String)">
            <summary>
            Removes a setting from the property bag.  Always throws an InvalidOperationException since
            writes are not permitted to the web application from the sandbox.
            </summary>
            <param name="key">the key for the setting to remove from the property bag</param>
        </member>
        <member name="P:Microsoft.Practices.SharePoint.Common.Configuration.SandboxWebAppPropertyBag.Item(System.String)">
            <summary>
            Indexer for getting and setting values for the key specified.  Setting values at the web application level will always
            result in a InvalidOperationException.
            </summary>
            <param name="key">The key to check for in the property bag</param>
            <returns>The value for the key, null if not found</returns>
        </member>
        <member name="P:Microsoft.Practices.SharePoint.Common.Configuration.SandboxWebAppPropertyBag.Level">
            <summary>
            The configuration level for this property bag, always returns ConfigLevel.CurrentSPWebApplication.
            </summary>
        </member>
        <member name="T:Microsoft.Practices.SharePoint.Common.ServiceLocation.TypeMapping">
            <summary>
            Class that represents a type mapping for the <see cref="T:Microsoft.Practices.ServiceLocation.IServiceLocator"/>.
            
            A type mapping links an interface to an implementation. 
            </summary>
        </member>
        <member name="M:Microsoft.Practices.SharePoint.Common.ServiceLocation.TypeMapping.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Practices.SharePoint.Common.ServiceLocation.TypeMapping"/> class.
            </summary>
        </member>
        <member name="M:Microsoft.Practices.SharePoint.Common.ServiceLocation.TypeMapping.#ctor(System.Type,System.Type,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Practices.SharePoint.Common.ServiceLocation.TypeMapping"/> class and populate it's values. 
            </summary>
            <param name="typeFrom">The type that's used to index the type mapping</param>
            <param name="typeTo">The type that the typeFrom is mapped to. </param>
            <param name="key">The key used to index the type mapping.</param>
        </member>
        <member name="M:Microsoft.Practices.SharePoint.Common.ServiceLocation.TypeMapping.GetNonNullKey">
            <summary>
            Returns a key that is assured to be non-null.  Returns an empty string if the 
            key is currently null.
            </summary>
            <returns>The key value, an empty string if the key is null</returns>
        </member>
        <member name="M:Microsoft.Practices.SharePoint.Common.ServiceLocation.TypeMapping.Create``2">
            <summary>
            Helper method to create type mapping objects more easily. Creates a type mapping with
            key (null) and instantiation type NewInstanceForEachRequest. 
            </summary>
            <typeparam name="TFrom">the from type</typeparam>
            <typeparam name="TTo">the target type</typeparam>
            <returns>the created type mapping</returns>
        </member>
        <member name="M:Microsoft.Practices.SharePoint.Common.ServiceLocation.TypeMapping.Create``2(System.String)">
            <summary>
            Helper methods to create type mapping objects more easily. Creates type mapping with
            specified key and instantiation type NewInstanceForEachRequest.
            </summary>
            <typeparam name="TFrom">the from type. </typeparam>
            <typeparam name="TTo">The target type</typeparam>
            <param name="key">The key to use. </param>
            <returns>the created type mapping</returns>
        </member>
        <member name="M:Microsoft.Practices.SharePoint.Common.ServiceLocation.TypeMapping.Create``2(Microsoft.Practices.SharePoint.Common.ServiceLocation.InstantiationType)">
            <summary>
            Helper method to create type mapping objects more easily. Creates a type mapping with
            key (null) and specified instantiation type. 
            </summary>
            <typeparam name="TFrom">the from type</typeparam>
            <typeparam name="TTo">the target type</typeparam>
            <param name="instantiate">How to instantiate the types from this type mapping.</param>
            <returns>the created type mapping</returns>
        </member>
        <member name="M:Microsoft.Practices.SharePoint.Common.ServiceLocation.TypeMapping.Create``2(System.String,Microsoft.Practices.SharePoint.Common.ServiceLocation.InstantiationType)">
            <summary>
            Helper method to create type mapping objects more easily. Creates a type mapping with
            specified key and specified instantiation type. 
            </summary>
            <typeparam name="TFrom">the from type</typeparam>
            <typeparam name="TTo">the target type</typeparam>
            <param name="instantiate">How to instantiate the types from this type mapping.</param>
            <param name="key">The key to use. </param>
            <returns>the created type mapping</returns>
        </member>
        <member name="M:Microsoft.Practices.SharePoint.Common.ServiceLocation.TypeMapping.ValidateMapping(Microsoft.Practices.SharePoint.Common.ServiceLocation.TypeMapping)">
            <summary>
            Validates if the content of a type mapping is complete.
            </summary>
            <param name="mapping">The mapping to validate</param>
        </member>
        <member name="M:Microsoft.Practices.SharePoint.Common.ServiceLocation.TypeMapping.Equals(System.Object)">
            <summary>
            Overrides the equals for comparing a type mapping.
            </summary>
            <param name="o">The object to compare to this type mapping</param>
            <returns>True of the object provided is equlvalent to the type mapping, false otherwise</returns>
        </member>
        <member name="M:Microsoft.Practices.SharePoint.Common.ServiceLocation.TypeMapping.GetHashCode">
            <summary>
            Generates a hash code for the type mapping (overridden as a best practice when overriding equals).
            </summary>
            <returns>The hash code for the type mapping</returns>
        </member>
        <member name="P:Microsoft.Practices.SharePoint.Common.ServiceLocation.TypeMapping.FromAssembly">
            <summary>
            The name of the assembly that the 'from' type is located in. 
            </summary>
        </member>
        <member name="P:Microsoft.Practices.SharePoint.Common.ServiceLocation.TypeMapping.FromType">
            <summary>
            The assembly qualified typename of the 'from' type. 
            </summary>
        </member>
        <member name="P:Microsoft.Practices.SharePoint.Common.ServiceLocation.TypeMapping.ToType">
            <summary>
            The assembly qualified typename of the 'to' type. 
            </summary>
        </member>
        <member name="P:Microsoft.Practices.SharePoint.Common.ServiceLocation.TypeMapping.ToAssembly">
            <summary>
            The name of the Assembly that the 'to' type is located in. 
            </summary>
        </member>
        <member name="P:Microsoft.Practices.SharePoint.Common.ServiceLocation.TypeMapping.Key">
            <summary>
            A key that can differentiate several type mappings for the same fromtype. If you don't specify
            a key, null will be used. 
            </summary>
        </member>
        <member name="P:Microsoft.Practices.SharePoint.Common.ServiceLocation.TypeMapping.InstantiationType">
            <summary>
            Determines how the objects for this type mapping should be instantiated. As a singleton or a new
            instance each time. 
            </summary>
        </member>
        <member name="T:Microsoft.Practices.SharePoint.Common.Logging.DiagnosticsService">
            <summary>
            Provides a diagnostic logging for Windows SharePoint Services.
            </summary>
        </member>
        <member name="M:Microsoft.Practices.SharePoint.Common.Logging.DiagnosticsService.#ctor">
            <summary>
            Initializes a new instance of the DiagnosticService class.
            </summary>
        </member>
        <member name="M:Microsoft.Practices.SharePoint.Common.Logging.DiagnosticsService.#ctor(System.String,Microsoft.SharePoint.Administration.SPFarm)">
            <summary>
            /// Initializes a new instance of the DiagnosticService class.
            </summary>
            <param name="name">Gets or Sets the name that identifies the particular instance of the object.</param>
            <param name="parent">Gets the ID of the parent class that declares de object</param>
        </member>
        <member name="M:Microsoft.Practices.SharePoint.Common.Logging.DiagnosticsService.Register">
            <summary>
            Registers the class.  
            </summary>
        </member>
        <member name="M:Microsoft.Practices.SharePoint.Common.Logging.DiagnosticsService.Unregister">
            <summary>
            Unregisters the class. 
            </summary>
        </member>
        <member name="M:Microsoft.Practices.SharePoint.Common.Logging.DiagnosticsService.FindCategory(System.String)">
            <summary>
            Finds the desired SharePoint diagnostic category based on the name passed in.
            </summary>
            <param name="categoryPath">>The name of the diagnostic category.</param>
            <returns>The sharepoint diagnostics category found.</returns>
        </member>
        <member name="M:Microsoft.Practices.SharePoint.Common.Logging.DiagnosticsService.ProvideAreas">
            <summary>
            Provides the collection of diagnostic areas getting them from the configuration.
            </summary>
            <returns>An Enumerable collection of diagnostic areas.</returns>
        </member>
        <member name="M:Microsoft.Practices.SharePoint.Common.Logging.DiagnosticsService.LogEvent(System.String,System.Int32,System.String)">
            <summary>
            Logs an event to the event log using default severity for category.
            </summary>
            <param name="message">the message to log</param>
            <param name="eventId">the id of the event</param>
            <param name="category">the cateogry for the event</param>
        </member>
        <member name="M:Microsoft.Practices.SharePoint.Common.Logging.DiagnosticsService.LogEvent(System.String,System.Int32,Microsoft.SharePoint.Administration.EventSeverity,System.String)">
            <summary>
            Logs an event to the event log.
            </summary>
            <param name="message">the message to log</param>
            <param name="eventId">the id of the event</param>
            <param name="severity">the severity of the event</param>
            <param name="categoryName">the cateogry for the event</param>
        </member>
        <member name="M:Microsoft.Practices.SharePoint.Common.Logging.DiagnosticsService.LogTrace(System.String,System.Int32,Microsoft.SharePoint.Administration.TraceSeverity,System.String)">
            <summary>
            Logs an trace to the ULS log.
            </summary>
            <param name="message">the message to log</param>
            <param name="eventId">the id of the trace</param>
            <param name="severity">the severity of the trace</param>
            <param name="categoryName">the category for the trace</param>       
        </member>
        <member name="M:Microsoft.Practices.SharePoint.Common.Logging.DiagnosticsService.LogTrace(System.String,System.Int32,System.String)">
            <summary>
            Logs an trace to the ULS log.
            </summary>
            <param name="message">the message to log</param>
            <param name="eventId">the id of the trace</param>
            <param name="category">the category for the trace</param>       
        </member>
        <member name="M:Microsoft.Practices.SharePoint.Common.Logging.DiagnosticsService.GetCategory(System.String)">
            <summary>
            Gets the category for the provided category name.  Throws a logging exception if the 
            category is not found.  Returns default category for null or empty category name.
            </summary>
            <param name="categoryName">The category to find</param>
            <returns>the SPCategory for the category name provided</returns>
        </member>
        <member name="P:Microsoft.Practices.SharePoint.Common.Logging.DiagnosticsService.Local">
            <summary>
            Gets the local instance of the class and registers it.
            </summary>
        </member>
        <member name="P:Microsoft.Practices.SharePoint.Common.Logging.DiagnosticsService.DefaultCategory">
            <summary>
            Returns the default diagnostic category.
            </summary>
            <returns>A default instance of SPDiagnosticsCategory.</returns>
        </member>
        <member name="T:Microsoft.Practices.SharePoint.Common.ListRepository.FieldToEntityPropertyMapping">
            <summary>
            Mapping between a field in an SPListItem and a property in an entity class. 
            </summary>
        </member>
        <member name="P:Microsoft.Practices.SharePoint.Common.ListRepository.FieldToEntityPropertyMapping.ListFieldId">
            <summary>
            The guid that corresponds to the Id of the field.
            </summary>
        </member>
        <member name="P:Microsoft.Practices.SharePoint.Common.ListRepository.FieldToEntityPropertyMapping.EntityPropertyName">
            <summary>
            The name of the property on the entity. 
            </summary>
        </member>
        <member name="T:Microsoft.Practices.SharePoint.Common.ListRepository.CAMLQueryBuilder">
            <summary>
            Class that helps in building CAML Queries. 
            </summary>
        </member>
        <member name="M:Microsoft.Practices.SharePoint.Common.ListRepository.CAMLQueryBuilder.Build">
            <summary>
            Build a CAML Query, based on the filter expressions that have been added to it. 
            </summary>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Practices.SharePoint.Common.ListRepository.CAMLQueryBuilder.AddFilter(Microsoft.Practices.SharePoint.Common.ListRepository.CAMLFilter)">
            <summary>
            Add a filter expression to the CAML Query builder
            </summary>
            <param name="filter">The filter expression to add. </param>
        </member>
        <member name="M:Microsoft.Practices.SharePoint.Common.ListRepository.CAMLQueryBuilder.AddEqual(System.String,System.Object,System.String)">
            <summary>
            Add an 'EQ' (equals) expression to the CAML Query builder where you want to filter the field 
            based on the value. You can specify the field name and the CAML type to determine what the type is you are filtering on.
            </summary>
            <param name="name">The name of the field to filter. </param>
            <param name="value">The value to filter the field by.</param>
            <param name="camlType">The type of the expression in CAML</param>
        </member>
        <member name="M:Microsoft.Practices.SharePoint.Common.ListRepository.CAMLQueryBuilder.AddEqual(System.String,System.Int32)">
            <summary>
            Add an 'EQ' (equals) expression to the CAML Query builder where you want to filter the field 
            based on the value. The type of the filter expression is 'Integer'.
            </summary>
            <param name="name">The fieldname to filter by. </param>
            <param name="value">The value to filter on. </param>
        </member>
        <member name="M:Microsoft.Practices.SharePoint.Common.ListRepository.CAMLQueryBuilder.AddEqual(System.String,System.DateTime)">
            <summary>
            Add an 'EQ' (equals) expression to the CAML Query builder where you want to filter the field 
            based on the value. The type of the filter expression is 'DateTime' and the value will be formatted
            using <see cref="M:Microsoft.SharePoint.Utilities.SPUtility.CreateDateTimeFromISO8601DateTimeString(System.String)"/>. 
            </summary>
            <param name="name">The fieldname to filter by. </param>
            <param name="value">The value to filter on. </param>
        </member>
        <member name="M:Microsoft.Practices.SharePoint.Common.ListRepository.CAMLQueryBuilder.AddEqual(System.String,System.String)">
            <summary>
            Add an 'EQ' (equals) expression to the CAML Query builder where you want to filter the field 
            based on the value. The type of the filter expression is 'Text'.
            </summary>
            <param name="name">The fieldname to filter by. </param>
            <param name="value">The value to filter on. </param>
        </member>
        <member name="M:Microsoft.Practices.SharePoint.Common.ListRepository.CAMLQueryBuilder.FilterByContentType(System.String)">
            <summary>
            Add a filter expression to filter by content type. 
            </summary>
            <param name="contentTypeName">The contenttype to filter by.</param>
        </member>
        <member name="M:Microsoft.Practices.SharePoint.Common.ListRepository.CAMLQueryBuilder.AddEqual(System.Guid,System.Object,System.String)">
            <summary>
            Add an 'EQ' (equals) expression to the CAML Query builder where you want to filter the field 
            based on the value. You can specify the field GUID and the CAML type to determine what the type is you are filtering on.
            </summary>
            <param name="fieldId">The fieldId to filter by. </param>
            <param name="value">The value to filter on. </param>
            <param name="camlType">The type of the column to filter on. </param>
        </member>
        <member name="M:Microsoft.Practices.SharePoint.Common.ListRepository.CAMLQueryBuilder.AddEqual(System.Guid,System.String)">
            <summary>
            Add an 'EQ' (equals) expression to the CAML Query builder where you want to filter the field 
            based on the value. The type of the filter expression is 'Text'.
            </summary>
            <param name="fieldId">The fieldId to filter by. </param>
            <param name="value">The value to filter on. </param>
        </member>
        <member name="M:Microsoft.Practices.SharePoint.Common.ListRepository.CAMLQueryBuilder.AddEqual(System.Guid,System.Int32)">
            <summary>
            Add an 'EQ' (equals) expression to the CAML Query builder where you want to filter the field 
            based on the value. The type of the filter expression is 'Integer'.
            </summary>
            <param name="fieldId">The fieldId to filter by. </param>
            <param name="value">The value to filter on. </param>
        </member>
        <member name="M:Microsoft.Practices.SharePoint.Common.ListRepository.CAMLQueryBuilder.AddEqual(System.Guid,System.DateTime)">
            <summary>
            Add an 'EQ' (equals) expression to the CAML Query builder where you want to filter the field 
            based on the value. The type of the filter expression is 'DateTime' and the value will be formatted
            using <see cref="M:Microsoft.SharePoint.Utilities.SPUtility.CreateDateTimeFromISO8601DateTimeString(System.String)"/>. 
            </summary>
            <param name="fieldId">The fieldId to filter by. </param>
            <param name="value">The value to filter on. </param>
        </member>
        <member name="M:Microsoft.Practices.SharePoint.Common.ListRepository.CAMLQueryBuilder.AddNotEqual(System.String,System.Object,System.String)">
            <summary>
            Add an 'Neq' (not equals) expression to the CAML Query builder where you want to filter the field 
            based on the value. You can specify the CAML type to determine what the type is you are filtering on.
            </summary>
            <param name="name">The name of the field to filter. </param>
            <param name="value">The value to filter the field by.</param>
            <param name="camlType">The type of the expression in CAML</param>
        </member>
        <member name="M:Microsoft.Practices.SharePoint.Common.ListRepository.CAMLQueryBuilder.AddNotEqual(System.String,System.String)">
            <summary>
            Add an 'Neq' (not equals) expression to the CAML Query builder where you want to filter the field 
            based on the value. This overload will use the CAML type "Text" to create a filter.
            </summary>
            <param name="name">The name of the field to filter. </param>
            <param name="value">The value to filter the field by.</param>
        </member>
        <member name="M:Microsoft.Practices.SharePoint.Common.ListRepository.CAMLQueryBuilder.AddNotEqual(System.String,System.Int32)">
            <summary>
            Add an 'Neq' (not equals) expression to the CAML Query builder where you want to filter the field 
            based on the value. This overload will use the CAML type "Integer" to create a filter.
            </summary>
            <param name="name">The name of the field to filter. </param>
            <param name="value">The value to filter the field by.</param>
        </member>
        <member name="M:Microsoft.Practices.SharePoint.Common.ListRepository.CAMLQueryBuilder.AddNotEqual(System.String,System.DateTime)">
            <summary>
            Add an 'Neq' (not equals) expression to the CAML Query builder where you want to filter the field 
            based on the value. This overload will use the CAML type "DateTime" to create a filter.
            </summary>
            <param name="name">The name of the field to filter. </param>
            <param name="value">The value to filter the field by.</param>
        </member>
        <member name="T:Microsoft.Practices.SharePoint.Common.ServiceLocation.ServiceLocationConfigData">
            <summary>
            Contains the configuration data for the sharepoint service locator that is serialized to 
            and stored in configuration.
            </summary>
        </member>
        <member name="M:Microsoft.Practices.SharePoint.Common.ServiceLocation.ServiceLocationConfigData.#ctor">
            <summary>
            Default constructor for ServiceLocationConfigData.
            </summary>
        </member>
        <member name="M:Microsoft.Practices.SharePoint.Common.ServiceLocation.ServiceLocationConfigData.#ctor(System.Collections.Generic.IList{Microsoft.Practices.SharePoint.Common.ServiceLocation.TypeMapping})">
            <summary>
            Constructs the service location configuration data initializnig with the 
            type mapping list provided.
            </summary>
            <param name="list"></param>
        </member>
        <member name="P:Microsoft.Practices.SharePoint.Common.ServiceLocation.ServiceLocationConfigData.LastUpdate">
            <summary>
            Returns the last time the configuration data was updated.
            </summary>
        </member>
        <member name="T:Microsoft.Practices.SharePoint.Common.Configuration.SandboxWithProxyPropertyBagHierarchy">
            <summary>
            A property bag for use in the sandbox that contains read only property bags for the farm
            and web application.   Contains a property bag for the web, site, readonly web app, and
            read only farm.
            </summary>
        </member>
        <member name="M:Microsoft.Practices.SharePoint.Common.Configuration.SandboxWithProxyPropertyBagHierarchy.#ctor(Microsoft.SharePoint.SPWeb)">
            <summary>
            Constructs the property bag for sandbox with proxy.
            </summary>
            <param name="web">The web to use as a basis for creating property bags</param>
        </member>
        <member name="M:Microsoft.Practices.SharePoint.Common.Configuration.SandboxWithProxyPropertyBagHierarchy.BuildHierarchy(Microsoft.SharePoint.SPWeb)">
            <summary>
            Builds the hierarchy of property bags for the provided web.
            </summary>
            <param name="web">The web to use as a basis for creating the property bags</param>
        </member>
        <member name="T:Microsoft.Practices.SharePoint.Common.Configuration.SandboxFarmPropertyBagHierarchy">
            <summary>
            The property bag hierarchy for a farm only context. Contains a single
            property bag in the hierarchy, SPFarmPropertyBag.
            </summary>
        </member>
        <member name="M:Microsoft.Practices.SharePoint.Common.Configuration.SandboxFarmPropertyBagHierarchy.#ctor">
            <summary>
            Constructs the FarmPropertyBagHierarchy
            </summary>
        </member>
        <member name="T:Microsoft.Practices.SharePoint.Common.Configuration.ListBackedPropertyBag">
            <summary>
            A property bag that is backed by a list.  
            </summary>
        </member>
        <member name="M:Microsoft.Practices.SharePoint.Common.Configuration.ListBackedPropertyBag.#ctor(Microsoft.SharePoint.SPSite,System.String,Microsoft.Practices.SharePoint.Common.Configuration.ConfigLevel)">
            <summary>
            Constructs a list backed property bag.
            </summary>
            <param name="configListSite">The site to use for retrieving the configuration list</param>
            <param name="contextId">The context Id for this property bag, for example, web.ID</param>
            <param name="level">The level for this property bag</param>
        </member>
        <member name="M:Microsoft.Practices.SharePoint.Common.Configuration.ListBackedPropertyBag.#ctor(Microsoft.SharePoint.SPSite,System.String,Microsoft.Practices.SharePoint.Common.Configuration.ConfigLevel,System.Func{System.String,System.String})">
            <summary>
            Constructs a list backed property bag with a function for transforming the key.
            </summary>
            <param name="configListSite">The site to use for retrieving the configuration list</param>
            <param name="contextId">The context Id for this property bag, for example, web.ID</param>
            <param name="level">The level for this property bag</param>
            <param name="buildKeyFunc">The function to use to transform the key to use to actually store</param>
        </member>
        <member name="M:Microsoft.Practices.SharePoint.Common.Configuration.ListBackedPropertyBag.Contains(System.String)">
            <summary>
            Checks if a key is in the property bag.
            </summary>
            <param name="key">The key to check for</param>
            <returns><c>true</c> if the key is in the property bag, <c>false</c> otherwise</returns>
        </member>
        <member name="M:Microsoft.Practices.SharePoint.Common.Configuration.ListBackedPropertyBag.Remove(System.String)">
            <summary>
            Removes the key specified from the property bag.
            </summary>
            <param name="key">The key to remove from the property bag</param>
        </member>
        <member name="P:Microsoft.Practices.SharePoint.Common.Configuration.ListBackedPropertyBag.Level">
            <summary>
            Gets the configuration level for the property bag.
            </summary>
        </member>
        <member name="P:Microsoft.Practices.SharePoint.Common.Configuration.ListBackedPropertyBag.ContextId">
            <summary>
            Gets the context ID for this property bag.  The context ID is used in combination with a 
            key to uniquely identify a value.  The context ID identifies the configuration "partition", for 
            example, a web.ID would be the ContextId for all key values stored for a web instance.
            </summary>
        </member>
        <member name="P:Microsoft.Practices.SharePoint.Common.Configuration.ListBackedPropertyBag.Item(System.String)">
            <summary>
            Indexer for getting and setting values for the key specified.
            </summary>
            <param name="key">The key to check for in the property bag</param>
            <returns>The value for the key, null if not found</returns>
        </member>
        <member name="T:Microsoft.Practices.SharePoint.Common.Configuration.FarmSettingStore">
            <summary>
            Class for persisting settings for the farm level.
            </summary>
        </member>
        <member name="F:Microsoft.Practices.SharePoint.Common.Configuration.FarmSettingStore.Settings">
            <summary>
            Settings to be stored at the farm level.  Must be a field instead of a property in order
            to be serialized by SharePoint.
            </summary>
        </member>
        <member name="M:Microsoft.Practices.SharePoint.Common.Configuration.FarmSettingStore.#ctor">
            <summary>
            Required for serialization
            </summary>
        </member>
        <member name="M:Microsoft.Practices.SharePoint.Common.Configuration.FarmSettingStore.#ctor(System.String,Microsoft.SharePoint.Administration.SPPersistedObject)">
            <summary>
            Required constructor by the SPPersistedObject base class.
            </summary>
            <param name="name">The name for the persisted object</param>
            <param name="parent">The parent of this persisted object</param>
        </member>
        <member name="M:Microsoft.Practices.SharePoint.Common.Configuration.FarmSettingStore.Load(Microsoft.SharePoint.Administration.SPFarm)">
            <summary>
            Loads the setting store for the farm provided, and creates the setting store if not found.
            </summary>
            <param name="farm">The farm to use</param>
            <returns>The setting store for farm level settings</returns>
        </member>
        <member name="M:Microsoft.Practices.SharePoint.Common.Configuration.FarmSettingStore.Create(Microsoft.SharePoint.Administration.SPFarm)">
            <summary>
            Creates a new FarmSettingStore.  This operation cannot be done from a content web application.
            </summary>
            <param name="farm">The Farm to create the setting store in</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Practices.SharePoint.Common.Configuration.FarmSettingStore.DeleteStore(Microsoft.SharePoint.Administration.SPFarm)">
            <summary>
            Removes the setting store.  Warning, all settings will be lost when removed.
            </summary>
            <param name="farm">The farm to clear the settings for</param>
        </member>
        <member name="P:Microsoft.Practices.SharePoint.Common.Configuration.FarmSettingStore.StoreName">
            <summary>
            THe name of the farm configuration store persisted object.
            </summary>
        </member>
        <member name="P:Microsoft.Practices.SharePoint.Common.Configuration.FarmSettingStore.DisplayName">
            <summary>
            The display name shown in admin for this persisted object.
            </summary>
        </member>
        <member name="T:Microsoft.Practices.SharePoint.Common.Configuration.ConfigSettingSerializer">
            <summary>
            The Serializer that help with serializing the values of config settings to and from strings. 
            </summary>
        </member>
        <member name="T:Microsoft.Practices.SharePoint.Common.Configuration.IConfigSettingSerializer">
            <summary>
            Class that helps with serializing configuration settings. 
            </summary>
        </member>
        <member name="M:Microsoft.Practices.SharePoint.Common.Configuration.IConfigSettingSerializer.Serialize(System.Type,System.Object)">
            <summary>
            Serialize a value to a string in XML format. 
            </summary>
            <param name="type">The type of value to serialize</param>
            <param name="value">The value to serialize</param>
            <returns>the value, serialized as XML</returns>
        </member>
        <member name="M:Microsoft.Practices.SharePoint.Common.Configuration.IConfigSettingSerializer.Deserialize(System.Type,System.String)">
            <summary>
            Deserialize a value that was serialized by the <see cref="M:Microsoft.Practices.SharePoint.Common.Configuration.IConfigSettingSerializer.Serialize(System.Type,System.Object)"/> method. 
            </summary>
            <param name="type">The type of object that was serialized.</param>
            <param name="value">The serialized value that should be deserialized.</param>
            <returns>The object that was serialized in XML.</returns>
        </member>
        <member name="M:Microsoft.Practices.SharePoint.Common.Configuration.ConfigSettingSerializer.Serialize(System.Type,System.Object)">
            <summary>
            Serialize a value to a string in XML format.
            </summary>
            <param name="type">The type of value to serialize</param>
            <param name="value">The value to serialize</param>
            <returns>the value, serialized as xml</returns>
        </member>
        <member name="M:Microsoft.Practices.SharePoint.Common.Configuration.ConfigSettingSerializer.Deserialize(System.Type,System.String)">
            <summary>
            Deserialize a value that was serialized by the <see cref="M:Microsoft.Practices.SharePoint.Common.Configuration.ConfigSettingSerializer.Serialize(System.Type,System.Object)"/> method.
            </summary>
            <param name="type">The type of object that was serialized.</param>
            <param name="value">The serialized value that should be deserialized.</param>
            <returns>The object that was serialized in XML.</returns>
        </member>
        <member name="T:Microsoft.Practices.SharePoint.Common.Configuration.IConfigManager">
            <summary>
            The IConfigManager interface allows you to read and write config settings in property bags for different levels of web, 
            site, web application, and farm.
            
            This interface is closely related to the  <see cref="T:Microsoft.Practices.SharePoint.Common.Configuration.IHierarchicalConfig"/>  class. This class allows you
            to read configuration at specific levels, and to manage configuration settings (create/update/delete) at specific levels 
            that are read by the hierarchical configuration.  Using this interface is a two step process.  You first get a property bag to
            operate upon by calling GetPropertyBag to retrieve the property bag, and then calling the desired operation for setting, getting, 
            or removing a value passing in the property bag. If a property bag is not available for the level, then
            GetPropertyBag will return null.
            
            To use the IConfigManager from an environment without a SPContext.Current, like a feature receiver, list recieve, or console
            application, then set the web to use as a starting point for the hierarchy using <see cref="M:Microsoft.Practices.SharePoint.Common.Configuration.IConfigManager.SetWeb(Microsoft.SharePoint.SPWeb)"/>.  If you 
            call into the configuration manager without a SPContext.Current, and without setting the web, you can only operate upon 
            a property bag at the <see cref="F:Microsoft.Practices.SharePoint.Common.Configuration.ConfigLevel.CurrentSPFarm"/> level. 
            </summary>
        </member>
        <member name="M:Microsoft.Practices.SharePoint.Common.Configuration.IConfigManager.RemoveKeyFromPropertyBag(System.String,Microsoft.Practices.SharePoint.Common.Configuration.IPropertyBag)">
            <summary>
            Remove a config value from a specified location. This method will not look up in parent property bags. 
            </summary>
            <param name="key">The configsetting to remove</param>
            <param name="propertyBag">The property bag to remove it from</param>
        </member>
        <member name="M:Microsoft.Practices.SharePoint.Common.Configuration.IConfigManager.ContainsKeyInPropertyBag(System.String,Microsoft.Practices.SharePoint.Common.Configuration.IPropertyBag)">
            <summary>
            See if a particular property bag contains a config setting with that key. 
            This method will check the specific property bag provided for the value. 
            </summary>
            <param name="key">The key to use to find the config setting</param>
            <param name="propertyBag">The property bag to look in</param>
            <returns>True if the PropertyBag is found, else false</returns>
        </member>
        <member name="M:Microsoft.Practices.SharePoint.Common.Configuration.IConfigManager.SetInPropertyBag(System.String,System.Object,Microsoft.Practices.SharePoint.Common.Configuration.IPropertyBag)">
            <summary>
            Sets a config value for a specific key in the specified property bag
            </summary>
            <param name="key">The key for this config setting</param>
            <param name="value">The value to give this config setting</param>
            <param name="propertyBag">The property bag to store the setting in</param>
        </member>
        <member name="M:Microsoft.Practices.SharePoint.Common.Configuration.IConfigManager.GetFromPropertyBag``1(System.String,Microsoft.Practices.SharePoint.Common.Configuration.IPropertyBag)">
            <summary>
            Reads a config value from the specified property bag, but will not look up the hierarchy. 
            </summary>
            <typeparam name="TValue">The type of the config value.</typeparam>
            <param name="key">The key the config value was stored under. </param>
            <param name="propertyBag">The property bag to read the config value from.</param>
            <returns>The config value</returns>
        </member>
        <member name="M:Microsoft.Practices.SharePoint.Common.Configuration.IConfigManager.GetPropertyBag(Microsoft.Practices.SharePoint.Common.Configuration.ConfigLevel)">
            <summary>
            Gets the property bag for the level specified.  If the property bag for the level is not available,
            then null will be returned.
            </summary>
            <param name="level">The level to retrieve</param>
            <returns>The property bag for the level, or null if no property bag for the level is available.</returns>
        </member>
        <member name="M:Microsoft.Practices.SharePoint.Common.Configuration.IConfigManager.SetWeb(Microsoft.SharePoint.SPWeb)">
            <summary>
            Sets the web to use as a basis for building the property bags to use for configuration (this technique is called method injection).
            Use this method to set the web to use when SPContext.Current is not available.
            </summary>
            <param name="web">The web to use as a basis for building the property bags available</param>
        </member>
        <member name="P:Microsoft.Practices.SharePoint.Common.Configuration.IConfigManager.CanAccessFarmConfig">
            <summary>
            Returns true if the farm can be accessed in the current context, false otherwise.  The farm can not be accessed
            from a sandbox application unless a full-trust proxy is installed that enables reading from the farm (and web application) 
            configuration elvels.
            </summary>
        </member>
        <member name="T:Microsoft.Practices.SharePoint.Common.Configuration.ConfigManager">
            <summary>
            The manager responsible for setting, updating, and deleting configuration values
            from property bags, and looking up values from a specific property bag level.  The
            manager always operates on specific property bags.  For hierarchical look <see cref="T:Microsoft.Practices.SharePoint.Common.Configuration.HierarchicalConfig"/>
            </summary>
        </member>
        <member name="M:Microsoft.Practices.SharePoint.Common.Configuration.ConfigManager.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Practices.SharePoint.Common.Configuration.ConfigManager"/> class.
            </summary>
        </member>
        <member name="M:Microsoft.Practices.SharePoint.Common.Configuration.ConfigManager.#ctor(Microsoft.SharePoint.SPWeb)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Practices.SharePoint.Common.Configuration.ConfigManager"/> class.
            </summary>
        </member>
        <member name="M:Microsoft.Practices.SharePoint.Common.Configuration.ConfigManager.SetWeb(Microsoft.SharePoint.SPWeb)">
            <summary>
            Sets the web to use for configuration.  Call this method when operating in 
            an environment where SPContext.Current is not available, like a feature receiver,
            event receiver, or console application before using the configuration manager.  
            For the default implementation property bags will be created using the web for context 
            (web, web.Site, web.Site.WebApplication, SPLocal.Farm).
            </summary>
            <param name="web">The web to use as a basis for property bags</param>
        </member>
        <member name="M:Microsoft.Practices.SharePoint.Common.Configuration.ConfigManager.#ctor(Microsoft.Practices.SharePoint.Common.Configuration.IPropertyBagHierarchy)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Practices.SharePoint.Common.Configuration.ConfigManager"/> class.
            </summary>
            <param name="hierarchy">instance of <see cref="T:Microsoft.Practices.SharePoint.Common.Configuration.IPropertyBagHierarchy"/>.</param>
        </member>
        <member name="M:Microsoft.Practices.SharePoint.Common.Configuration.ConfigManager.#ctor(Microsoft.Practices.SharePoint.Common.Configuration.IConfigSettingSerializer)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Practices.SharePoint.Common.Configuration.ConfigManager"/> class.
            </summary>
            <param name="configSettingSerializer">The config setting serializer.</param>
        </member>
        <member name="M:Microsoft.Practices.SharePoint.Common.Configuration.ConfigManager.#ctor(Microsoft.Practices.SharePoint.Common.Configuration.IPropertyBagHierarchy,Microsoft.Practices.SharePoint.Common.Configuration.IConfigSettingSerializer)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Practices.SharePoint.Common.Configuration.ConfigManager"/> class.
            </summary>
            <param name="hierarchy">instance of <see cref="T:Microsoft.Practices.SharePoint.Common.Configuration.IPropertyBagHierarchy"/>.</param>
            <param name="configSettingSerializer">The config setting serializer.</param>
        </member>
        <member name="M:Microsoft.Practices.SharePoint.Common.Configuration.ConfigManager.GetFromPropertyBag``1(System.String,Microsoft.Practices.SharePoint.Common.Configuration.IPropertyBag)">
            <summary>
            Reads a config value from the specified property bag, but will not look up the hierarchy.  This method
            will not throw an exception if the value is not configured, it will instead return the default value.
            </summary>
            <typeparam name="TValue">The type of the config value.</typeparam>
            <param name="key">The key the config value was stored under.</param>
            <param name="propertyBag">The property bag to read the config value from.</param>
            <returns>The config value</returns>
        </member>
        <member name="M:Microsoft.Practices.SharePoint.Common.Configuration.ConfigManager.Get``1(System.String,Microsoft.Practices.SharePoint.Common.Configuration.IPropertyBag)">
            <summary>
            Read a config value based on the key, from the specified property bag.  This method will throw a <see cref="T:Microsoft.Practices.SharePoint.Common.Configuration.ConfigurationException"/>
            exception if the value is not configured in the property bag.
            </summary>
            <typeparam name="TValue">The type of the value to read.</typeparam>
            <param name="key">The key associated with the config value</param>
            <param name="propertyBag">The property bag to read values from.</param>
            <returns>The value read</returns>
        </member>
        <member name="M:Microsoft.Practices.SharePoint.Common.Configuration.ConfigManager.GetFromPropertyBag(System.Type,System.String,Microsoft.Practices.SharePoint.Common.Configuration.ConfigLevel)">
            <summary>
            Gets an instance of the type provided associated with the key provided at the level provided.
            This method will return null if the property is not found in the property bag.
            </summary>
            <param name="type">The type of configuration instance to get</param>
            <param name="key">The key of the configuration data</param>
            <param name="level">The level to get the property at</param>
            <returns>the value found, null if no configuration item found</returns>
        </member>
        <member name="M:Microsoft.Practices.SharePoint.Common.Configuration.ConfigManager.RemoveKeyFromPropertyBag(System.String,Microsoft.Practices.SharePoint.Common.Configuration.IPropertyBag)">
            <summary>
            Remove a config value from a specified property bag. 
            </summary>
            <param name="key">The config setting to remove</param>
            <param name="propertyBag">The property bag to remove the setting from</param>
        </member>
        <member name="M:Microsoft.Practices.SharePoint.Common.Configuration.ConfigManager.ContainsKeyInPropertyBag(System.String,Microsoft.Practices.SharePoint.Common.Configuration.IPropertyBag)">
            <summary>
            Returns true if the IPropertyBag contains the key
            </summary>
            <param name="key">The key to check</param>
            <param name="propertyBag">The property bag to check</param>
            <returns>true if the key is in the property bag</returns>
        </member>
        <member name="M:Microsoft.Practices.SharePoint.Common.Configuration.ConfigManager.GetHierarchy">
            <summary>
            Gets the property bag hierarchy to use for the given context.  Override
            this method to provide an implementation of configuration manager that uses
            property bags that are not backed by the default use of property bags assoicated with
            the SPWeb, SPWebApplication, and SPFarm objects.  For example, you would override
            this method if you wanted to provide a list backed property bag implementation.
            </summary>
            <returns>The property bag hierarchy to use</returns>
        </member>
        <member name="M:Microsoft.Practices.SharePoint.Common.Configuration.ConfigManager.GetPropertyBag(Microsoft.Practices.SharePoint.Common.Configuration.ConfigLevel)">
            <summary>
            Gets the property bag for the level specified.  The object related to the level must
            be accessible from context (SPFarm.Local for farm, SPContext.Current for all others).
            </summary>
            <param name="level">the configuration level to get the bag for</param>
            <returns>the property bag for the requested level</returns>
        </member>
        <member name="M:Microsoft.Practices.SharePoint.Common.Configuration.ConfigManager.SetInPropertyBag(System.String,System.Object,Microsoft.Practices.SharePoint.Common.Configuration.IPropertyBag)">
            <summary>
            Sets a config value for a specific key in the specified property bag
            </summary>
            <param name="key">The key for this config setting</param>
            <param name="value">The value to give this config setting</param>
            <param name="propertyBag">the property bag to store the setting in</param>
        </member>
        <member name="M:Microsoft.Practices.SharePoint.Common.Configuration.ConfigManager.ValidateKey(System.String)">
            <summary>
            Validates the key to make sure it doesn't contain invalid values. An invalid value throws a <see cref="T:Microsoft.Practices.SharePoint.Common.Configuration.ConfigurationException"/>. 
            </summary>
            <param name="key">The key.</param>
        </member>
        <member name="P:Microsoft.Practices.SharePoint.Common.Configuration.ConfigManager.PnPKeyNamespace">
            <summary>
            The prefix value used to give the pnp keys a namespace in order to 
            distinguish keys managed by the application setting manager.
            </summary>
        </member>
        <member name="P:Microsoft.Practices.SharePoint.Common.Configuration.ConfigManager.MaxKeyLength">
            <summary>
            The maximum key length that can be stored.
            </summary>
        </member>
        <member name="P:Microsoft.Practices.SharePoint.Common.Configuration.ConfigManager.WebContext">
            <summary>
            Gets the current web context to use for creating property bags.  If the web was not set
            through either constructor injection (using ConfigManager(SPWeb)) or through method injection
            (by calling SetWeb), then the context for SPContext.Current.Web will be used.
            </summary>
        </member>
        <member name="P:Microsoft.Practices.SharePoint.Common.Configuration.ConfigManager.CanAccessFarmConfig">
            <summary>
            Is true if farm level config can be accessed, false otherwise.
            </summary>
        </member>
        <member name="T:Microsoft.Practices.SharePoint.Common.Logging.DiagnosticsAreaCollection">
            <summary>
            Areas collection.
            </summary>
        </member>
        <member name="M:Microsoft.Practices.SharePoint.Common.Logging.DiagnosticsAreaCollection.#ctor">
            <summary>
            Constructs an empty diagnostics area collection.  The collection can not be persisted when constructed without the configuration manager provided. 
            A default constructor is also required by the deserialization process.
            </summary>
        </member>
        <member name="M:Microsoft.Practices.SharePoint.Common.Logging.DiagnosticsAreaCollection.#ctor(Microsoft.Practices.SharePoint.Common.Configuration.IConfigManager)">
            <summary>
            Constructs the diagnostics area collection
            </summary>
            <param name="configMgr">the instance of configuration manager to use when loading areas</param>
        </member>
        <member name="M:Microsoft.Practices.SharePoint.Common.Logging.DiagnosticsAreaCollection.LoadAreas(Microsoft.Practices.SharePoint.Common.Configuration.IConfigManager)">
            <summary>
            Loads the areas from farm configuration using the configuration manager provided.
            </summary>
            <param name="configMgr">The configuration manager to use to load the areas</param>
            <returns>the list containing areas loaded</returns>
        </member>
        <member name="M:Microsoft.Practices.SharePoint.Common.Logging.DiagnosticsAreaCollection.InsertItem(System.Int32,Microsoft.Practices.SharePoint.Common.Logging.DiagnosticsArea)">
            <summary>
            Inserts a DiagnosticsArea into the collection, throws if a duplicate area already exists.
            </summary>
            <param name="index">The index of the area</param>
            <param name="item">The area to be added</param>
        </member>
        <member name="M:Microsoft.Practices.SharePoint.Common.Logging.DiagnosticsAreaCollection.SetItem(System.Int32,Microsoft.Practices.SharePoint.Common.Logging.DiagnosticsArea)">
            <summary>
            Sets a new area in a list
            </summary>
            <param name="index">The index to set at</param>
            <param name="item">The new area to be set at the index</param>
        </member>
        <member name="M:Microsoft.Practices.SharePoint.Common.Logging.DiagnosticsAreaCollection.SaveConfiguration">
            <summary>
            Persists the changes to the configuration store.
            </summary>
        </member>
        <member name="P:Microsoft.Practices.SharePoint.Common.Logging.DiagnosticsAreaCollection.Item(System.String)">
            <summary>
            string indexer for collection, looks up based on area name.  Throws if area doesn't exist.
            </summary>
            <param name="areaName">The area name to index</param>
            <returns>the DiagnosticsArea at that index</returns>
        </member>
        <member name="T:Microsoft.Practices.SharePoint.Common.Configuration.HierarchyBuilder">
            <summary>
            Responsible for building the hierarchy of property bags for
            the current context.
            </summary>
        </member>
        <member name="M:Microsoft.Practices.SharePoint.Common.Configuration.HierarchyBuilder.GetHierarchy(Microsoft.SharePoint.SPWeb)">
            <summary>
            Constructs the hierarchy using the SPWeb as the starting
            point for the operating context.
            </summary>
            <param name="web">The web to use as a basis for the hierarchy</param>
            <returns>A <see cref="T:Microsoft.Practices.SharePoint.Common.Configuration.IPropertyBagHierarchy"/> that contains the property bag hierarchy to use</returns>
        </member>
        <member name="T:Microsoft.Practices.SharePoint.Common.ProxyArgs.TracingOperationArgs">
            <summary>
            The args for tracing a message from the sandbox.
            </summary>
        </member>
        <member name="M:Microsoft.Practices.SharePoint.Common.ProxyArgs.TracingOperationArgs.#ctor">
            <summary>
            The constructor for the arguments for the tracing operation.
            </summary>
        </member>
        <member name="P:Microsoft.Practices.SharePoint.Common.ProxyArgs.TracingOperationArgs.Message">
            <summary>
            The message
            </summary>
        </member>
        <member name="P:Microsoft.Practices.SharePoint.Common.ProxyArgs.TracingOperationArgs.EventId">
            <summary>
            The event ID to use.
            </summary>
        </member>
        <member name="P:Microsoft.Practices.SharePoint.Common.ProxyArgs.TracingOperationArgs.Severity">
            <summary>
            The serverity of the message.
            </summary>
        </member>
        <member name="P:Microsoft.Practices.SharePoint.Common.ProxyArgs.TracingOperationArgs.Category">
            <summary>
            The cateogory of the message.
            </summary>
        </member>
        <member name="P:Microsoft.Practices.SharePoint.Common.ProxyArgs.TracingOperationArgs.SiteID">
            <summary>
            The ID of the site associated with the message.
            </summary>
        </member>
        <member name="P:Microsoft.Practices.SharePoint.Common.ProxyArgs.TracingOperationArgs.OperationAssemblyName">
            <summary>
            The name of the assembly.
            </summary>
        </member>
        <member name="P:Microsoft.Practices.SharePoint.Common.ProxyArgs.TracingOperationArgs.OperationTypeName">
            <summary>
            The name of the type to use.
            </summary>
        </member>
        <member name="T:Microsoft.Practices.SharePoint.Common.Configuration.XmlSerializerCache">
            <summary>
            A cache for xml serializers.  Improves performance by caching serialization classes.
            </summary>
        </member>
        <member name="F:Microsoft.Practices.SharePoint.Common.Configuration.XmlSerializerCache.serializerFactory">
            <summary>
            Caches the XmlSerializer instance for a specific type.
            </summary>
        </member>
        <member name="T:Microsoft.Practices.SharePoint.Common.Configuration.FarmPropertyBagHierarchy">
            <summary>
            The property bag hierarchy for a farm only context. Contains a single
            property bag in the hierarchy, SPFarmPropertyBag.
            </summary>
        </member>
        <member name="M:Microsoft.Practices.SharePoint.Common.Configuration.FarmPropertyBagHierarchy.#ctor(Microsoft.SharePoint.Administration.SPFarm)">
            <summary>
            Constructs the FarmPropertyBagHierarchy
            </summary>
            <param name="farm">The farm to create the hierarchy for</param>
        </member>
        <member name="M:Microsoft.Practices.SharePoint.Common.Configuration.FarmPropertyBagHierarchy.BuildHierarchy(Microsoft.SharePoint.Administration.SPFarm)">
            <summary>
            Builds the heirarchy for the farm only context.  
            </summary>
            <param name="farm">The farm to use</param>
        </member>
        <member name="T:Microsoft.Practices.SharePoint.Common.Configuration.ConfigLevel">
            <summary>
            The levels at which configuration information can be stored. These levels are used to determine if a specific config value
            can be stored at a specific level.
            </summary>
        </member>
        <member name="F:Microsoft.Practices.SharePoint.Common.Configuration.ConfigLevel.CurrentSPFarm">
            <summary>
            Store config information in the SPFarm property bag
            </summary>
        </member>
        <member name="F:Microsoft.Practices.SharePoint.Common.Configuration.ConfigLevel.CurrentSPWebApplication">
            <summary>
            Store config information in the SPWebApplication property bag
            </summary>
        </member>
        <member name="F:Microsoft.Practices.SharePoint.Common.Configuration.ConfigLevel.CurrentSPSite">
            <summary>
            Store config information in the SPSite property bag
            </summary>
        </member>
        <member name="F:Microsoft.Practices.SharePoint.Common.Configuration.ConfigLevel.CurrentSPWeb">
            <summary>
            Store config information in the SPWeb property bag
            </summary>
        </member>
        <member name="T:Microsoft.Practices.SharePoint.Common.Properties.Resources">
            <summary>
              A strongly-typed resource class, for looking up localized strings, etc.
            </summary>
        </member>
        <member name="P:Microsoft.Practices.SharePoint.Common.Properties.Resources.ResourceManager">
            <summary>
              Returns the cached ResourceManager instance used by this class.
            </summary>
        </member>
        <member name="P:Microsoft.Practices.SharePoint.Common.Properties.Resources.Culture">
            <summary>
              Overrides the current thread's CurrentUICulture property for all
              resource lookups using this strongly typed resource class.
            </summary>
        </member>
        <member name="P:Microsoft.Practices.SharePoint.Common.Properties.Resources.AddedDefaultDiagnosticsAreaToCollection">
            <summary>
              Looks up a localized string similar to The default area can not be added to the configured areas collection..
            </summary>
        </member>
        <member name="P:Microsoft.Practices.SharePoint.Common.Properties.Resources.ArgumentMustBeGreaterThanZero">
            <summary>
              Looks up a localized string similar to The value for &apos;{0}&apos; must be greater than zero.  Value provided: &apos;{1}&apos;.
            </summary>
        </member>
        <member name="P:Microsoft.Practices.SharePoint.Common.Properties.Resources.ArgumentMustNotBeEmpty">
            <summary>
              Looks up a localized string similar to The argument &apos;{0}&apos; must not be empty or null..
            </summary>
        </member>
        <member name="P:Microsoft.Practices.SharePoint.Common.Properties.Resources.BadSiteUrl">
            <summary>
              Looks up a localized string similar to The site URL set for configuration  &apos;{0}&apos; is not valid..
            </summary>
        </member>
        <member name="P:Microsoft.Practices.SharePoint.Common.Properties.Resources.CantAccessFarmFromSandbox">
            <summary>
              Looks up a localized string similar to Farm configuration cannot be accessed from the sandbox unless the farm proxy is installed..
            </summary>
        </member>
        <member name="P:Microsoft.Practices.SharePoint.Common.Properties.Resources.CantAccessWebApplicationFromSandbox">
            <summary>
              Looks up a localized string similar to Web application configuration cannot be accessed from the sandbox unless the farm proxy is installed..
            </summary>
        </member>
        <member name="P:Microsoft.Practices.SharePoint.Common.Properties.Resources.CategoryExistsExceptionMessage">
            <summary>
              Looks up a localized string similar to There is a category with the name {0}  already added to the properties bag..
            </summary>
        </member>
        <member name="P:Microsoft.Practices.SharePoint.Common.Properties.Resources.CategoryNotFoundExceptionMessage">
            <summary>
              Looks up a localized string similar to The Category &apos;{0}&apos; was not found in the diagnostic categories collections..
            </summary>
        </member>
        <member name="P:Microsoft.Practices.SharePoint.Common.Properties.Resources.ConfigDeserializeError">
            <summary>
              Looks up a localized string similar to Error when deserializing type: &apos;{0}&apos; in the sandbox deserialization.
            </summary>
        </member>
        <member name="P:Microsoft.Practices.SharePoint.Common.Properties.Resources.ConfigSettingNotSet">
            <summary>
              Looks up a localized string similar to Configsetting with key &apos;{0}&apos; could not be set &apos;{1}&apos; with type &apos;{2}&apos;. The technical exception was: {3}: {4}.
            </summary>
        </member>
        <member name="P:Microsoft.Practices.SharePoint.Common.Properties.Resources.ConfigSettingNotSupportedInSandbox">
            <summary>
              Looks up a localized string similar to Configuration values stored in the sandbox must be string, int, or implement the IXmlSerializable interface, and have a default constructor.
            </summary>
        </member>
        <member name="P:Microsoft.Practices.SharePoint.Common.Properties.Resources.ContextMissingSetTypeMappingList">
            <summary>
              Looks up a localized string similar to No farm or site context available when setting type mapping..
            </summary>
        </member>
        <member name="P:Microsoft.Practices.SharePoint.Common.Properties.Resources.ContextNotFound">
            <summary>
              Looks up a localized string similar to The SPContext was not found. The property bag needs access to the SPContext.Current because it wants to access the current Web..
            </summary>
        </member>
        <member name="P:Microsoft.Practices.SharePoint.Common.Properties.Resources.CreateConfigContentTypeFailed">
            <summary>
              Looks up a localized string similar to Creating the content type for configuration data failed..
            </summary>
        </member>
        <member name="P:Microsoft.Practices.SharePoint.Common.Properties.Resources.DiagnosticsAreaAddedCateogoryWithNullName">
            <summary>
              Looks up a localized string similar to The name of a category being added to an area was null.
            </summary>
        </member>
        <member name="P:Microsoft.Practices.SharePoint.Common.Properties.Resources.DiagnosticsAreaCollectionAddNullException">
            <summary>
              Looks up a localized string similar to DiagnosticsAreaCollection: Add called with throw on duplicate areas, area already existed.
            </summary>
        </member>
        <member name="P:Microsoft.Practices.SharePoint.Common.Properties.Resources.DiagnosticsAreaCollectionAreaExists">
            <summary>
              Looks up a localized string similar to The area being added already exists \n\t Value: &apos;{0}&apos;.
            </summary>
        </member>
        <member name="P:Microsoft.Practices.SharePoint.Common.Properties.Resources.DiagnosticsAreaCollectionDeleteAreaDoesntExist">
            <summary>
              Looks up a localized string similar to Area {0} provided does not exist in the collection to delete.
            </summary>
        </member>
        <member name="P:Microsoft.Practices.SharePoint.Common.Properties.Resources.DiagnosticsAreaCollectionSaveConfigFailure">
            <summary>
              Looks up a localized string similar to Failed to save configuration updates for logger areas and categories to the farm property bag..
            </summary>
        </member>
        <member name="P:Microsoft.Practices.SharePoint.Common.Properties.Resources.DiagnosticsAreaCollectionSaveWithNoConfig">
            <summary>
              Looks up a localized string similar to Attempted to save areas configuration without setting configuration manager.
            </summary>
        </member>
        <member name="P:Microsoft.Practices.SharePoint.Common.Properties.Resources.DiagnosticsAreaReadXmlConfigDeserializationFailed">
            <summary>
              Looks up a localized string similar to The deserialization of the configuration settings for logging failed..
            </summary>
        </member>
        <member name="P:Microsoft.Practices.SharePoint.Common.Properties.Resources.DiagnosticsCategoryExists">
            <summary>
              Looks up a localized string similar to The DiagnosticsCategory exists, only one entry for a category per area. Value: &apos;{0}&apos;.
            </summary>
        </member>
        <member name="P:Microsoft.Practices.SharePoint.Common.Properties.Resources.ErrorWritingTrace">
            <summary>
              Looks up a localized string similar to An error occurred while writing tot the Trace Log, trace message:{0}.
            </summary>
        </member>
        <member name="P:Microsoft.Practices.SharePoint.Common.Properties.Resources.FailedDeserialization">
            <summary>
              Looks up a localized string similar to Failed deserializing key:&apos;{0}&apos;, serialized data: &apos;{1}&apos;.
            </summary>
        </member>
        <member name="P:Microsoft.Practices.SharePoint.Common.Properties.Resources.FailureReadingProxyInstalled">
            <summary>
              Looks up a localized string similar to Failed when attempting to detect if a proxy was installed..
            </summary>
        </member>
        <member name="P:Microsoft.Practices.SharePoint.Common.Properties.Resources.ImplicitConversionNotDefined">
            <summary>
              Looks up a localized string similar to {0} does not have an implicit conversion defined for {1}.
            </summary>
        </member>
        <member name="P:Microsoft.Practices.SharePoint.Common.Properties.Resources.InvalidCategoryFormat">
            <summary>
              Looks up a localized string similar to The category name should be formatted as a path (area/category), invalid format: {0}.
            </summary>
        </member>
        <member name="P:Microsoft.Practices.SharePoint.Common.Properties.Resources.InvalidConfigSetting">
            <summary>
              Looks up a localized string similar to Configsetting with key &apos;{0}&apos; could not be retrieved. The configured value could not be converted from &apos;{1}&apos; to an instance of &apos;{2}&apos;. The technical exception was: {3}: {4}.
            </summary>
        </member>
        <member name="P:Microsoft.Practices.SharePoint.Common.Properties.Resources.InvalidKeyLength">
            <summary>
              Looks up a localized string similar to Key &apos;{0}&apos; must be between 1 and &apos;{1}&apos; in length.  Key Length: &apos;{2}&apos;..
            </summary>
        </member>
        <member name="P:Microsoft.Practices.SharePoint.Common.Properties.Resources.InvalidKeyPrefix">
            <summary>
              Looks up a localized string similar to The key &apos;{0}&apos; cannot be used. Key&apos;s may not be prefixed with the text &apos;{1}&apos;..
            </summary>
        </member>
        <member name="P:Microsoft.Practices.SharePoint.Common.Properties.Resources.InvalidKeySuffix">
            <summary>
              Looks up a localized string similar to The key &apos;{0}&apos; cannot be used. Key&apos;s may not be suffixed with the text &apos;{1}&apos; because this is used by the SPSitePropertyBag to differentiate between properties of the SPWeb and the SPSite..
            </summary>
        </member>
        <member name="P:Microsoft.Practices.SharePoint.Common.Properties.Resources.InvalidRunContext">
            <summary>
              Looks up a localized string similar to The SharePointServiceLocator needs to run in a SharePoint context and have access to the SPFarm..
            </summary>
        </member>
        <member name="P:Microsoft.Practices.SharePoint.Common.Properties.Resources.InvalidSandboxEventSeverity">
            <summary>
              Looks up a localized string similar to The sandbox event severity was invalid, Value: &apos;{0}&apos;.
            </summary>
        </member>
        <member name="P:Microsoft.Practices.SharePoint.Common.Properties.Resources.InvalidSandboxTraceSeverity">
            <summary>
              Looks up a localized string similar to The sandbox trace severity was invalid, Value: &apos;{0}&apos;.
            </summary>
        </member>
        <member name="P:Microsoft.Practices.SharePoint.Common.Properties.Resources.InvalidSPListItem">
            <summary>
              Looks up a localized string similar to SPListItem &apos;{0}&apos; does not have a field with Id &apos;{1}&apos; which was mapped to property: &apos;{2}&apos; for entity &apos;{3}&apos;..
            </summary>
        </member>
        <member name="P:Microsoft.Practices.SharePoint.Common.Properties.Resources.KeyNotConfigured">
            <summary>
              Looks up a localized string similar to There was no value configured for key &apos;{0}&apos; in a propertyBag..
            </summary>
        </member>
        <member name="P:Microsoft.Practices.SharePoint.Common.Properties.Resources.LoggingExceptionMessage1">
            <summary>
              Looks up a localized string similar to One or more error occurred while writing messages into the log..
            </summary>
        </member>
        <member name="P:Microsoft.Practices.SharePoint.Common.Properties.Resources.LoggingExceptionMessage2">
            <summary>
              Looks up a localized string similar to \r\nThe error while writing to the EventLog was:.
            </summary>
        </member>
        <member name="P:Microsoft.Practices.SharePoint.Common.Properties.Resources.LoggingExceptionMessage3">
            <summary>
              Looks up a localized string similar to \r\n Orginal logged message was: .
            </summary>
        </member>
        <member name="P:Microsoft.Practices.SharePoint.Common.Properties.Resources.NonAbstractType">
            <summary>
              Looks up a localized string similar to {0} must be a non-abstract type with a parameterless constructor.
            </summary>
        </member>
        <member name="P:Microsoft.Practices.SharePoint.Common.Properties.Resources.NullSPContext">
            <summary>
              Looks up a localized string similar to This code should run in a SharePoint context. SPContext.Current is null..
            </summary>
        </member>
        <member name="P:Microsoft.Practices.SharePoint.Common.Properties.Resources.PropertyBagNotValidForContext">
            <summary>
              Looks up a localized string similar to The property bag for level &apos;{0}&apos; is not accessible in the current context..
            </summary>
        </member>
        <member name="P:Microsoft.Practices.SharePoint.Common.Properties.Resources.PropertyTypeNotMapped">
            <summary>
              Looks up a localized string similar to Type &apos;{0}&apos; does not have a property &apos;{1}&apos; which was mapped to FieldID: &apos;{2}&apos; for SPListItem &apos;{3}&apos;..
            </summary>
        </member>
        <member name="P:Microsoft.Practices.SharePoint.Common.Properties.Resources.SandboxLoggingFailed">
            <summary>
              Looks up a localized string similar to The attempt to write to the sandbox log failed..
            </summary>
        </member>
        <member name="P:Microsoft.Practices.SharePoint.Common.Properties.Resources.SandboxTraceFailed">
            <summary>
              Looks up a localized string similar to The attempt to trace from the sandbox failed..
            </summary>
        </member>
        <member name="P:Microsoft.Practices.SharePoint.Common.Properties.Resources.SaveConfigConcurrencyFailure">
            <summary>
              Looks up a localized string similar to Failure to save configuration due to contention on &apos;{0}&apos; property bag..
            </summary>
        </member>
        <member name="P:Microsoft.Practices.SharePoint.Common.Properties.Resources.ServiceLocatorNotSupported">
            <summary>
              Looks up a localized string similar to ServiceLocator.Current is not supported. Use SharePointServiceLocator.Current instead..
            </summary>
        </member>
        <member name="P:Microsoft.Practices.SharePoint.Common.Properties.Resources.SPFarmNotFound">
            <summary>
              Looks up a localized string similar to SPFarm was not found..
            </summary>
        </member>
        <member name="P:Microsoft.Practices.SharePoint.Common.Properties.Resources.StringIndexOutOfRange">
            <summary>
              Looks up a localized string similar to The index value is not found in the collection: Collection &apos;{0}&apos; Value &apos;{1}&apos; .
            </summary>
        </member>
        <member name="P:Microsoft.Practices.SharePoint.Common.Properties.Resources.TypeMappingNotRegistered">
            <summary>
              Looks up a localized string similar to No type mapping was registered for type &apos;{0}&apos; and key &apos;{1}&apos;..
            </summary>
        </member>
        <member name="P:Microsoft.Practices.SharePoint.Common.Properties.Resources.TypesAreNotAssignable">
            <summary>
              Looks up a localized string similar to The type {1} cannot be assigned to variables of type {0}..
            </summary>
        </member>
        <member name="P:Microsoft.Practices.SharePoint.Common.Properties.Resources.UndefinedConfigLevel">
            <summary>
              Looks up a localized string similar to The config level &apos;{0}&apos; was not supported. Use Farm, WebApplication, Site or Web..
            </summary>
        </member>
        <member name="P:Microsoft.Practices.SharePoint.Common.Properties.Resources.UnexpectedExceptionFromSandbox">
            <summary>
              Looks up a localized string similar to The sandbox threw an unexpected exception when accessing configuration at the {0} level..
            </summary>
        </member>
        <member name="P:Microsoft.Practices.SharePoint.Common.Properties.Resources.UpdateCategoryCategoryDoesntExist">
            <summary>
              Looks up a localized string similar to A category must exist in order to update, category did not exist:{0}&quot;.
            </summary>
        </member>
        <member name="P:Microsoft.Practices.SharePoint.Common.Properties.Resources.ValueSetInConfig">
            <summary>
              Looks up a localized string similar to Set value in hierarchical config.\n\tKey: &apos;{0}&apos;\n\tLevel: &apos;{1}&apos;\n\tValue: &apos;{2}&apos;.
            </summary>
        </member>
        <member name="P:Microsoft.Practices.SharePoint.Common.Properties.Resources.WriteNotAllowedInSandboxToWebApplication">
            <summary>
              Looks up a localized string similar to Writes are not permitted to the web application level from the sandbox..
            </summary>
        </member>
        <member name="T:Microsoft.Practices.SharePoint.Common.Configuration.FullTrustPropertyBagHierarchy">
            <summary>
            Represents the property bag hierarchy for a full trust configuration.  Contains a
            SPWebPropertyBag, SPSitePropertyBag, SPWebApPropertyBag, and SPFarmPropertyBag.
            </summary>
        </member>
        <member name="M:Microsoft.Practices.SharePoint.Common.Configuration.FullTrustPropertyBagHierarchy.#ctor(Microsoft.SharePoint.SPWeb)">
            <summary>
            Constructs the farm hierarchy for a full trust configuration.
            </summary>
            <param name="web">The web to use to build the hierarchy</param>
        </member>
        <member name="M:Microsoft.Practices.SharePoint.Common.Configuration.FullTrustPropertyBagHierarchy.BuildHierarchy(Microsoft.SharePoint.SPWeb)">
            <summary>
            Builds the hierarchy for the provided web.  The web, site, and web application, and farm are
            property bags are constructed from this web using web.Site, web.Site.WebApplication, and 
            web.Site.WebApplication.Farm.
            </summary>
            <param name="web">The SPWeb to use to construct the hierarchy</param>
        </member>
        <member name="T:Microsoft.Practices.SharePoint.Common.Configuration.ListBackedUrlPropertyBag">
            <summary>
            Represents a property bag that is backed by a list, and constructed based upon a URL.
            For cases where the configuration list can't be identified by context - for example,
            a web application and a farm will need to rely upon a single centrally located list
            for their settings.  This class requires AllowUnsafeUpdates to be used, and therefore
            can not be used from the sandbox.  <see cref="T:Microsoft.Practices.SharePoint.Common.Configuration.ListBackedPropertyBag"/> to use within
            the sandbox.
            </summary>
        </member>
        <member name="M:Microsoft.Practices.SharePoint.Common.Configuration.ListBackedUrlPropertyBag.#ctor(System.String,System.String,Microsoft.Practices.SharePoint.Common.Configuration.ConfigLevel)">
            <summary>
            Constructs a property bag backed by a list using the site url to access the list.
            </summary>
            <param name="siteUrl">The site url where the configuration list is located</param>
            <param name="contextId">The unique ID for this context</param>
            <param name="level">The level of the list based property bag</param>
        </member>
        <member name="M:Microsoft.Practices.SharePoint.Common.Configuration.ListBackedUrlPropertyBag.#ctor(System.String,System.String,Microsoft.Practices.SharePoint.Common.Configuration.ConfigLevel,System.Func{System.String,System.String})">
            <summary>
            Constructs a list based property bag backed by a list using the site url to access the list.
            </summary>
            <param name="siteUrl">The site url where the configuration list is located</param>
            <param name="contextId">The unique ID for this context</param>
            <param name="level">The level of the list based property bag</param>
            <param name="buildKeyFunc">the function to use for transforming the key value used for storage</param>
        </member>
        <member name="M:Microsoft.Practices.SharePoint.Common.Configuration.ListBackedUrlPropertyBag.Contains(System.String)">
            <summary>
            Returns true if the property bag contains the key specified.
            </summary>
            <param name="key">The key to check for</param>
            <returns><c>true</c> if the key exists for the context, <c>false</c> otherwise</returns>
        </member>
        <member name="M:Microsoft.Practices.SharePoint.Common.Configuration.ListBackedUrlPropertyBag.Remove(System.String)">
            <summary>
            Removes the key specified from the property bag.
            </summary>
            <param name="key">The key to remove from the property bag</param>
        </member>
        <member name="P:Microsoft.Practices.SharePoint.Common.Configuration.ListBackedUrlPropertyBag.Level">
            <summary>
            The configuration level for this list.
            </summary>
        </member>
        <member name="P:Microsoft.Practices.SharePoint.Common.Configuration.ListBackedUrlPropertyBag.ContextId">
            <summary>
            The context Id for this list.  This represents a unique ID for the given context.
            For example, use the Web.ID for a web, or a Site.ID for a site.  This is used in 
            combination with the key for lookup in the list to uniquely define the key setting 
            in a specific context.
            </summary>
        </member>
        <member name="P:Microsoft.Practices.SharePoint.Common.Configuration.ListBackedUrlPropertyBag.Item(System.String)">
            <summary>
            Indexer for getting and setting values for the key specified.
            </summary>
            <param name="key">The key to check for in the property bag</param>
            <returns>The value for the key, null if not found</returns>
        </member>
        <member name="T:Microsoft.Practices.SharePoint.Common.ServiceLocation.SharePointServiceLocator">
            <summary>
            Class that manages a single instance of of a service locator using farm or site collection
            configuration.
            </summary>
        </member>
        <member name="M:Microsoft.Practices.SharePoint.Common.ServiceLocation.SharePointServiceLocator.GetCurrent">
            <summary>
            The current container for services.  This will look up type mappings at the site level and 
            the farm level if SPContext exists, otherwise it will only look at the farm level.
            Settings at the SPSite will be override settings at SPFarm.  In a sandbox solution, it
            will always only look at the site level unless the farm proxy is installed.
            </summary>
            <returns>The farm/site locator if a context exists, otherwise the farm only locator</returns>
        </member>
        <member name="M:Microsoft.Practices.SharePoint.Common.ServiceLocation.SharePointServiceLocator.GetCurrent(Microsoft.SharePoint.SPSite)">
            <summary>
            The current container for services for the site specified.  This will look up type mappings 
            at the site level and the farm level.Settings at the SPSite will be override settings at SPFarm.
            Use when SPContext is not available and but you want to lookup values from the site level.
            </summary>
            <param name="site">The site that holds config. Pass in null if site not avaiable</param>
            <returns>the farm/site service locator for the site specified</returns>
        </member>
        <member name="M:Microsoft.Practices.SharePoint.Common.ServiceLocation.SharePointServiceLocator.GetCurrentFarm">
            <summary>
            This will return a locator loading only farm level settings.  Use this if you want to only use
            type mappings defined at the farm level, or if you want to add a type mapping at runtime rather
            than through configuration that applies across the entire farm.
            </summary>
            <returns>the farm level service locator</returns>
        </member>
        <member name="M:Microsoft.Practices.SharePoint.Common.ServiceLocation.SharePointServiceLocator.DoGetCurrent(Microsoft.SharePoint.SPSite)">
            <summary>
            This will lookup a setting at the site level. This method is virtual to improve
            testability.
            </summary>
            <param name="site">The site to get the currently locator for</param>
            <returns>the site locator</returns>
        </member>
        <member name="M:Microsoft.Practices.SharePoint.Common.ServiceLocation.SharePointServiceLocator.DoGetCurrent">
            <summary>
            Gets the current service locator for the farm
            </summary>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Practices.SharePoint.Common.ServiceLocation.SharePointServiceLocator.EnsureCommonServiceLocatorCurrentFails">
            <summary>
            Make sure that the <see cref="P:Microsoft.Practices.ServiceLocation.ServiceLocator.Current"/> from the common service locator library doesn't work.
            It should fail with a <see cref="T:System.NotSupportedException"/>, because people should use <see cref="M:Microsoft.Practices.SharePoint.Common.ServiceLocation.SharePointServiceLocator.GetCurrent"/>.
            </summary>
        </member>
        <member name="M:Microsoft.Practices.SharePoint.Common.ServiceLocation.SharePointServiceLocator.CreateServiceLocatorInstance">
            <summary>
            Create a new instance of the service locator and possibly fill it with
            </summary>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Practices.SharePoint.Common.ServiceLocation.SharePointServiceLocator.GetServiceLocatorConfig">
            <summary>
            Gets the service locator config data to use for the farm config settings.  This is made virtual
            for testability.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Practices.SharePoint.Common.ServiceLocation.SharePointServiceLocator.GetServiceLocatorConfig(Microsoft.SharePoint.SPSite)">
            <summary>
            Gets the service locator config for site config settings.  Made virtual for testability.  
            </summary>
            <param name="site">The site to load config settings for</param>
            <returns>The config settings for a site</returns>
        </member>
        <member name="M:Microsoft.Practices.SharePoint.Common.ServiceLocation.SharePointServiceLocator.CreateServiceLocatorInstance(Microsoft.SharePoint.SPSite)">
            <summary>
            Create a new instance of the service locator and possibly fill it with farm and 
            site level mappings.
            </summary>
            <returns>The service locator instance for the site.  Combines site and farm level mappings</returns>
        </member>
        <member name="M:Microsoft.Practices.SharePoint.Common.ServiceLocation.SharePointServiceLocator.GetSiteCacheInterval">
            <summary>
            Gets the caching interval for the site collection locator.
            </summary>
            <returns>The interval for caching a site service locator</returns>
        </member>
        <member name="M:Microsoft.Practices.SharePoint.Common.ServiceLocation.SharePointServiceLocator.ReplaceCurrentServiceLocator(Microsoft.Practices.ServiceLocation.IServiceLocator)">
            <summary>
            Replace the static instance of service locator with a new service locator instance.
            </summary>
            <param name="newServiceLocator">The new service locator to use from now on. </param>
        </member>
        <member name="M:Microsoft.Practices.SharePoint.Common.ServiceLocation.SharePointServiceLocator.Reset">
            <summary>
            Reset the service locator back to the default service locator. 
            </summary>
        </member>
        <member name="P:Microsoft.Practices.SharePoint.Common.ServiceLocation.SharePointServiceLocator.SiteCachingTimeoutInSeconds">
            <summary>
            The time in seconds between refreshing the configuration of a site level locator.
            </summary>
        </member>
        <member name="T:Microsoft.Practices.SharePoint.Common.Logging.LoggingException">
            <summary>
            Exception that occurs if something goes wrong while logging a message. 
            </summary>
        </member>
        <member name="M:Microsoft.Practices.SharePoint.Common.Logging.LoggingException.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Practices.SharePoint.Common.Logging.LoggingException"/> class.
            </summary>
        </member>
        <member name="M:Microsoft.Practices.SharePoint.Common.Logging.LoggingException.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Practices.SharePoint.Common.Logging.LoggingException"/> class.
            </summary>
            <param name="message">The message.</param>
        </member>
        <member name="M:Microsoft.Practices.SharePoint.Common.Logging.LoggingException.#ctor(System.String,System.Exception)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Practices.SharePoint.Common.Logging.LoggingException"/> class.
            </summary>
            <param name="message">The message.</param>
            <param name="inner">The inner exception.</param>
        </member>
        <member name="M:Microsoft.Practices.SharePoint.Common.Logging.LoggingException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Practices.SharePoint.Common.Logging.LoggingException"/> class.
            </summary>
            <param name="info">The <see cref="T:System.Runtime.Serialization.SerializationInfo"/> that holds the serialized object data about the exception being thrown.</param>
            <param name="context">The <see cref="T:System.Runtime.Serialization.StreamingContext"/> that contains contextual information about the source or destination.</param>
            <exception cref="T:System.ArgumentNullException">
            The <paramref name="info"/> parameter is null.
            </exception>
            <exception cref="T:System.Runtime.Serialization.SerializationException">
            The class name is null or <see cref="P:System.Exception.HResult"/> is zero (0).
            </exception>
        </member>
        <member name="T:Microsoft.Practices.SharePoint.Common.SharePointEnvironment">
            <summary>
            Gets information about the current SharePoint context.
            </summary>
        </member>
        <member name="M:Microsoft.Practices.SharePoint.Common.SharePointEnvironment.Reset">
            <summary>
            Resets the SharePoint environment, clearing all cached information.
            </summary>
        </member>
        <member name="M:Microsoft.Practices.SharePoint.Common.SharePointEnvironment.ProxyInstalled(System.String,System.String)">
            <summary>
            Determines if a full trust sandbox proxy has been installed to the farm.
            </summary>
            <param name="assemblyName">The fully qualified assembly name containing the proxy</param>
            <param name="typeForProxy">The type for the proxy</param>
            <returns>True if the proxy is installed, false otherwise</returns>
        </member>
        <member name="P:Microsoft.Practices.SharePoint.Common.SharePointEnvironment.InSandbox">
            <summary>
            Returns true if running in the sandbox, false otherwise.
            </summary>
        </member>
        <member name="P:Microsoft.Practices.SharePoint.Common.SharePointEnvironment.CanAccessSharePoint">
            <summary>
            Returns true if SharePoint can be accessed in any way, at the farm level or above.
            </summary>
        </member>
        <member name="P:Microsoft.Practices.SharePoint.Common.SharePointEnvironment.CanAccessFarm">
            <summary>
            Returns true if the farm can be accessed.  Do not call from a sandbox application.
            </summary>
        </member>
        <member name="P:Microsoft.Practices.SharePoint.Common.SharePointEnvironment.CanAccessFarmConfig">
            <summary>
            Returns true if farm level config can be accessed, false otherwise.  Safe to call from the sandbox.
            If in the sandbox, determines if the proxy is installed for reading configuration from web application or 
            the farm.
            </summary>
        </member>
        <member name="P:Microsoft.Practices.SharePoint.Common.SharePointEnvironment.ApplicationContextProvider">
            <summary>
            Sets the application context provider to use for getting environment information.  Provided for testability.
            </summary>
        </member>
    </members>
</doc>
